{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { environment } from \"../../../environments/environment\";\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../service/ordenes/ordenes.service\";\nimport * as i4 from \"src/app/service/particulas_magneticas/particulas-magneticas.service\";\nimport * as i5 from \"../../service/rutas-informes/informes-rutas.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/material/stepper\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/material/button\";\nimport * as i11 from \"ngx-quill\";\nimport * as i12 from \"@angular/material/select\";\nimport * as i13 from \"@angular/material/core\";\nimport * as i14 from \"@angular/material/icon\";\nimport * as i15 from \"@angular/material/grid-list\";\nimport * as i16 from \"ng-image-fullscreen-view\";\nimport * as i17 from \"@angular/material/card\";\nconst _c0 = [\"formFileSmRegistroFotos\"];\n\nfunction ParticulasMagneticasComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 48);\n    i0.ɵɵelementStart(1, \"div\", 49);\n    i0.ɵɵtext(2, \"Proyecto\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 50);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 51);\n    i0.ɵɵtext(6, \"Sub-proyecto\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 52);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 51);\n    i0.ɵɵtext(10, \"Consecutivo\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 52);\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\", 51);\n    i0.ɵɵtext(14, \"Fecha de inicio\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"div\", 52);\n    i0.ɵɵtext(16);\n    i0.ɵɵpipe(17, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"div\", 51);\n    i0.ɵɵtext(19, \"Lugar de inspecci\\u00F3n\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"div\", 52);\n    i0.ɵɵtext(21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r0.detallesOrden.proyecto);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r0.detallesOrden.subProyecto);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r0.detallesOrden.orden_consecutivo);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(17, 5, ctx_r0.detallesOrden.fecha_visita, \"mediumDate\"));\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r0.detallesOrden.lugar_visita);\n  }\n}\n\nfunction ParticulasMagneticasComponent_ng_template_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"Normas\");\n  }\n}\n\nfunction ParticulasMagneticasComponent_ng_template_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"Materiales utilizados\");\n  }\n}\n\nfunction ParticulasMagneticasComponent_button_51_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 53);\n    i0.ɵɵlistener(\"click\", function ParticulasMagneticasComponent_button_51_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.cancelarEditMaterialesUtilizados();\n    });\n    i0.ɵɵtext(1, \" Cancela \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ParticulasMagneticasComponent_tr_56_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"tr\", 54);\n    i0.ɵɵlistener(\"click\", function ParticulasMagneticasComponent_tr_56_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r23);\n      const itemMaterial_r21 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.onClickEditMaterialesUtilizados(itemMaterial_r21);\n    });\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const itemMaterial_r21 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(itemMaterial_r21.detalles);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(itemMaterial_r21.fabricante);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(itemMaterial_r21.ref_comercial);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(itemMaterial_r21.lotes_n);\n  }\n}\n\nfunction ParticulasMagneticasComponent_ng_template_64_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"Normas para los procedimientos y m\\u00E9todos de aplicaci\\u00F3n\");\n  }\n}\n\nfunction ParticulasMagneticasComponent_ng_template_96_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"Par\\u00E1metros de operaci\\u00F3n\");\n  }\n}\n\nfunction ParticulasMagneticasComponent_button_119_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 53);\n    i0.ɵɵlistener(\"click\", function ParticulasMagneticasComponent_button_119_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return ctx_r24.cancelarEditMaterialesUtilizados();\n    });\n    i0.ɵɵtext(1, \" Cancela \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ParticulasMagneticasComponent_tr_124_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r28 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"tr\", 54);\n    i0.ɵɵlistener(\"click\", function ParticulasMagneticasComponent_tr_124_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r28);\n      const itemParametros_r26 = restoredCtx.$implicit;\n      const ctx_r27 = i0.ɵɵnextContext();\n      return ctx_r27.onClickEditMaterialesUtilizados(itemParametros_r26);\n    });\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const itemParametros_r26 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(itemParametros_r26.actividad);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(itemParametros_r26.tiempo);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(itemParametros_r26.temperatura);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(itemParametros_r26.aplicacion);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(itemParametros_r26.iluminacion);\n  }\n}\n\nfunction ParticulasMagneticasComponent_ng_template_132_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"Proceso\");\n  }\n}\n\nfunction ParticulasMagneticasComponent_ng_template_153_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 55);\n    i0.ɵɵtext(1, \" Elementos inspeccionados \");\n  }\n}\n\nfunction ParticulasMagneticasComponent_ng_template_165_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"Resultados\");\n  }\n}\n\nfunction ParticulasMagneticasComponent_button_196_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r30 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 53);\n    i0.ɵɵlistener(\"click\", function ParticulasMagneticasComponent_button_196_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r29 = i0.ɵɵnextContext();\n      return ctx_r29.cancelarEditMaterialesUtilizados();\n    });\n    i0.ɵɵtext(1, \" Cancela \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ParticulasMagneticasComponent_tr_201_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r33 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"tr\", 54);\n    i0.ɵɵlistener(\"click\", function ParticulasMagneticasComponent_tr_201_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r33);\n      const itemResul_r31 = restoredCtx.$implicit;\n      const ctx_r32 = i0.ɵɵnextContext();\n      return ctx_r32.onClickEditResultados(itemResul_r31);\n    });\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const itemResul_r31 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(itemResul_r31.item);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(itemResul_r31.elemento);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(itemResul_r31.indicacion);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(itemResul_r31.calificacion);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(itemResul_r31.observaciones);\n  }\n}\n\nfunction ParticulasMagneticasComponent_ng_template_209_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 55);\n    i0.ɵɵtext(1, \" Observaciones \");\n  }\n}\n\nfunction ParticulasMagneticasComponent_ng_template_221_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r35 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 56);\n    i0.ɵɵlistener(\"click\", function ParticulasMagneticasComponent_ng_template_221_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r35);\n      const ctx_r34 = i0.ɵɵnextContext();\n      return ctx_r34.onGetRegistroFotos();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(1, \" Registro Fotogr\\u00E1fico \");\n  }\n}\n\nfunction ParticulasMagneticasComponent_mat_grid_tile_242_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r39 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-grid-tile\");\n    i0.ɵɵelementStart(1, \"img\", 57);\n    i0.ɵɵlistener(\"click\", function ParticulasMagneticasComponent_mat_grid_tile_242_Template_img_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r39);\n      const i_r37 = restoredCtx.index;\n      const ctx_r38 = i0.ɵɵnextContext();\n      return ctx_r38.showLightboxRegistroFotos(i_r37);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"mat-grid-tile-footer\");\n    i0.ɵɵelementStart(3, \"h3\", 58);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\", 58);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 59);\n    i0.ɵɵelementStart(8, \"mat-icon\");\n    i0.ɵɵtext(9, \"restore_from_trash\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r36 = ctx.$implicit;\n    const i_r37 = ctx.index;\n    const ctx_r18 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"alt\", item_r36.title);\n    i0.ɵɵproperty(\"src\", ctx_r18.url + \"/img-uploads/\" + item_r36.image, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Registro Fotogr\\u00E1fico N\\u00B0 \", i_r37 + 1, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r36.title, \" \");\n  }\n}\n\nexport let ParticulasMagneticasComponent = /*#__PURE__*/(() => {\n  class ParticulasMagneticasComponent {\n    constructor(_formBuilder, _route, _activatedRoute, _ordenesService, _particulasMagneticas, _informesRutasService) {\n      this._formBuilder = _formBuilder;\n      this._route = _route;\n      this._activatedRoute = _activatedRoute;\n      this._ordenesService = _ordenesService;\n      this._particulasMagneticas = _particulasMagneticas;\n      this._informesRutasService = _informesRutasService;\n      this.quillModules = {\n        toolbar: [['bold', 'italic', 'underline'], [{\n          align: []\n        }, {\n          list: 'ordered'\n        }, {\n          list: 'bullet'\n        }], ['clean']]\n      };\n      this.isLinear = false;\n      this.NormasBtnSave = true;\n      this.NormasStatus = false;\n      this.implementosUtilizados = [];\n      this.MaterialesUtilizadosStatus = false;\n      this.MaterialesUtilizados = [];\n      this.NormasProceBtnSave = true;\n      this.NormasProceStatus = false;\n      this.ParametrosOpStatus = false;\n      this.ParametrosOp = [];\n      this.ProcesoBtnSave = true;\n      this.ProcesoStatus = false;\n      this.ElementosInspeccionadosBtnSave = true;\n      this.ElementosInspeccionadosStatus = false;\n      this.ResultadosStatus = false;\n      this.Resultado = [];\n      this.ObservacionesBtnSave = true;\n      this.ObservacionesStatus = false;\n      this.RegistroFotos = [];\n      this.showFlagRegistroFotos = false;\n      this.selectedImageIndexRegistroFotos = -1;\n      this.imageObjectRegistroFotos = [];\n      this.firmaRevisaImg = '';\n      this.firmaRevisoStatus = false;\n      this.firmaElaboroImg = '';\n      this.firmaElaboroStatus = false;\n      this.url = environment.url;\n    }\n\n    ngOnInit() {\n      this.onGetDetallesOrden();\n      this.forms();\n      this.onGet();\n    }\n\n    onGet() {\n      this.onGetNormas();\n      this.onGetImplementos();\n      this.onGetMaterialesUtilizados();\n      this.onGetNormasProcess();\n    }\n\n    forms() {\n      this.Normas = this._formBuilder.group({\n        norma: ['', [Validators.required]],\n        equipos_utilizados: ['', [Validators.required]]\n      });\n      this.Materiales_Utilizados = this._formBuilder.group({\n        detalles: ['', [Validators.required]],\n        fabricante: ['', [Validators.required]],\n        ref_comercial: ['', [Validators.required]],\n        lotes_n: ['', [Validators.required]]\n      });\n      this.Normas_Proce = this._formBuilder.group({\n        normas_process: ['', [Validators.required]],\n        tipo: ['', [Validators.required]],\n        metodo: ['', [Validators.required]],\n        procedimiento: ['', [Validators.required]]\n      });\n      this.Parametros_operacion = this._formBuilder.group({\n        actividad: ['', [Validators.required]],\n        distancia: ['', [Validators.required]],\n        aplicacion: ['', [Validators.required]],\n        iluminacion: ['', [Validators.required]]\n      });\n      this.Proceso = this._formBuilder.group({\n        proceso_magnetizacion: ['', [Validators.required]],\n        corriente_magnetizacion: ['', [Validators.required]]\n      });\n      this.ElementosInspeccionados = this._formBuilder.group({\n        elemento_inspeccionado: ['', [Validators.required]]\n      });\n      this.Resultados = this._formBuilder.group({\n        elemento: ['', [Validators.required]],\n        indicacion: ['', [Validators.required]],\n        calificacion: ['', [Validators.required]],\n        observaciones: ['', [Validators.required]]\n      });\n      this.Observaciones = this._formBuilder.group({\n        observaciones: ['', [Validators.required]]\n      });\n      this.RegistroFotosForm = this._formBuilder.group({\n        title: ['', [Validators.required]]\n      });\n    }\n\n    onGetAutoSave() {\n      this._activatedRoute.params.subscribe(params => {\n        const {\n          orden_id,\n          informe_id\n        } = params;\n\n        this._informesRutasService.getAutoSaveStepper(orden_id, informe_id).subscribe(res => {\n          this.statusAutoSave = true;\n          this.autoSaveIndex = res.body; // this.windowOnloadCanvasElaboro()\n          // this.windowOnloadCanvasReviso()\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              this.statusAutoSave = false;\n              this.autoSaveIndex = body.body;\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      });\n    }\n\n    setIndex(event) {\n      if (this.statusAutoSave == true) {\n        let data = {\n          indexStepper: event.selectedIndex\n        };\n\n        this._informesRutasService.putAutoSaveStepper(data, this.autoSaveIndex._id).subscribe(res => {\n          this.onGetAutoSave();\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'info',\n                title: body.message\n              });\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      } else if (this.statusAutoSave == false) {\n        this._activatedRoute.params.subscribe(params => {\n          const {\n            orden_id,\n            informe_id\n          } = params;\n          let data = {\n            indexStepper: event.selectedIndex,\n            orden_id,\n            informe_id\n          };\n\n          this._informesRutasService.postAutoSaveStepper(data).subscribe(res => {\n            this.onGetAutoSave();\n          }, error => {\n            var errorMessage = error;\n\n            if (errorMessage != null) {\n              var body = error.error;\n\n              if (error.status === 404) {\n                const Toast = Swal.mixin({\n                  toast: true,\n                  position: 'center',\n                  showConfirmButton: false,\n                  timer: 4000,\n                  timerProgressBar: true,\n                  width: '300px'\n                });\n                Toast.fire({\n                  icon: 'info',\n                  title: body.message\n                });\n              } else if (error.status === 500) {\n                const Toast = Swal.mixin({\n                  toast: true,\n                  position: 'center',\n                  showConfirmButton: false,\n                  timer: 4000,\n                  timerProgressBar: true,\n                  width: '300px'\n                });\n                Toast.fire({\n                  icon: 'error',\n                  title: body.message\n                });\n              } else if (error.status === 0) {\n                const Toast = Swal.mixin({\n                  toast: true,\n                  position: 'center',\n                  showConfirmButton: false,\n                  timer: 4000,\n                  timerProgressBar: true,\n                  width: '300px'\n                });\n                Toast.fire({\n                  icon: 'error',\n                  title: 'Por favor compruebe su conexión de internet'\n                });\n              }\n            }\n          });\n        });\n      }\n    }\n\n    onGetDetallesOrden() {\n      this._activatedRoute.params.subscribe(params => {\n        const orden_id = params['orden_id'];\n        const informe_id = params['informe_id'];\n\n        this._ordenesService.getDetallesOrdenes(orden_id).subscribe(res => {\n          this.detallesOrden = res.body[0];\n        });\n\n        this._particulasMagneticas.getDetallesInforme(informe_id).subscribe(res => {\n          this.detallesInforme = res.body[0]; // console.log(res.body)\n          // this.NormasId = res.body._id\n        });\n      });\n    }\n\n    onGetImplementos() {\n      this._activatedRoute.params.subscribe(params => {\n        const orden_id = params['orden_id'];\n\n        this._ordenesService.getImplementosOrdenes(orden_id).subscribe(res => {\n          this.implementosUtilizados = res.body;\n        });\n      });\n    }\n\n    onGetNormas() {\n      this._activatedRoute.params.subscribe(params => {\n        const {\n          orden_id,\n          informe_id\n        } = params;\n\n        this._particulasMagneticas.getNormasParticulas(orden_id, informe_id).subscribe(res => {\n          this.NormasId = res.body._id;\n          this.Normas.patchValue(res.body);\n          this.NormasBtnSave = false;\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              this.NormasStatus = false;\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      });\n    }\n\n    onSubmitNormas() {\n      this._activatedRoute.params.subscribe(params => {\n        const {\n          orden_id,\n          informe_id\n        } = params;\n        let data = Object.assign(Object.assign({}, this.Normas.value), {\n          orden_id: orden_id,\n          informe_id: informe_id\n        });\n\n        this._particulasMagneticas.postNormasParticulas(data).subscribe(res => {\n          this.onGetNormas();\n          this.Normas.reset();\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'info',\n                title: body.message\n              });\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      });\n    }\n\n    onEditNormas() {\n      if (this.NormasId) {\n        let data = Object.assign({}, this.Normas.value); // console.log(data)\n\n        this._particulasMagneticas.putNormasParticulas(data, this.NormasId).subscribe(res => {\n          this.onGetNormas();\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'info',\n                title: 'No hay usuarios por favor Agregue uno'\n              });\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      } else {\n        this._activatedRoute.params.subscribe(params => {\n          const orden_id = params['orden_id'];\n          const informe_id = params['informe_id'];\n          let data = Object.assign(Object.assign({}, this.Normas.value), {\n            orden_id,\n            informe_id\n          });\n\n          this._particulasMagneticas.postNormasParticulas(data).subscribe(res => {}, error => {\n            var errorMessage = error;\n\n            if (errorMessage != null) {\n              var body = error.error;\n\n              if (error.status === 404) {\n                const Toast = Swal.mixin({\n                  toast: true,\n                  position: 'center',\n                  showConfirmButton: false,\n                  timer: 4000,\n                  timerProgressBar: true,\n                  width: '300px'\n                });\n                Toast.fire({\n                  icon: 'info',\n                  title: 'No hay usuarios por favor Agregue uno'\n                });\n              } else if (error.status === 500) {\n                const Toast = Swal.mixin({\n                  toast: true,\n                  position: 'center',\n                  showConfirmButton: false,\n                  timer: 4000,\n                  timerProgressBar: true,\n                  width: '300px'\n                });\n                Toast.fire({\n                  icon: 'error',\n                  title: body.message\n                });\n              } else if (error.status === 0) {\n                const Toast = Swal.mixin({\n                  toast: true,\n                  position: 'center',\n                  showConfirmButton: false,\n                  timer: 4000,\n                  timerProgressBar: true,\n                  width: '300px'\n                });\n                Toast.fire({\n                  icon: 'error',\n                  title: 'Por favor compruebe su conexión de internet'\n                });\n              }\n            }\n          });\n        });\n      }\n    }\n\n    onGetMaterialesUtilizados() {\n      this._activatedRoute.params.subscribe(params => {\n        const {\n          orden_id,\n          informe_id\n        } = params;\n\n        this._particulasMagneticas.getMaterialesUtilizados(orden_id, informe_id).subscribe(data => {\n          this.MaterialesUtilizados = data.body;\n          console.log(this.MaterialesUtilizados);\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              this.MaterialesUtilizadosStatus = false;\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      });\n    }\n\n    onClickEditMaterialesUtilizados(data) {\n      this.MaterialesUtilizadosId = data._id;\n      this.MaterialesUtilizadosStatus = true;\n      this.MaterialesUtilizados.splice(data.actividad, 1);\n      this.Materiales_Utilizados.patchValue(data);\n    }\n\n    cancelarEditMaterialesUtilizados() {\n      this.onGetMaterialesUtilizados();\n      this.Materiales_Utilizados.reset();\n      this.MaterialesUtilizadosStatus = false;\n    }\n\n    onSubmitMaterialesUtilizados() {\n      this._activatedRoute.params.subscribe(params => {\n        const {\n          orden_id,\n          informe_id\n        } = params;\n        let data = Object.assign(Object.assign({}, this.Materiales_Utilizados.value), {\n          orden_id: orden_id,\n          informe_id: informe_id\n        });\n\n        this._particulasMagneticas.postMaterialesUtilizados(data).subscribe(res => {\n          this.onGetMaterialesUtilizados();\n          this.Materiales_Utilizados.reset();\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'info',\n                title: body.message\n              });\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      });\n    }\n\n    onEditarMaterialesUtilizados() {\n      if (this.Materiales_Utilizados.value.actividad == '') {} else {\n        this._particulasMagneticas.putMaterialesUtilizados(this.Materiales_Utilizados.value, this.MaterialesUtilizadosId).subscribe(res => {\n          this.Materiales_Utilizados.reset();\n          this.onGetMaterialesUtilizados();\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'info',\n                title: body.message\n              });\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      }\n    }\n\n    onGetNormasProcess() {\n      this._activatedRoute.params.subscribe(params => {\n        const {\n          orden_id,\n          informe_id\n        } = params;\n\n        this._particulasMagneticas.getNormasProce(orden_id, informe_id).subscribe(res => {\n          this.NormasProceId = res.body._id;\n          this.Normas_Proce.patchValue(res.body);\n          this.NormasProceBtnSave = false;\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              this.NormasStatus = false;\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      });\n    }\n\n    onSubmitNormasProce() {\n      this._activatedRoute.params.subscribe(params => {\n        const {\n          orden_id,\n          informe_id\n        } = params;\n        let data = Object.assign(Object.assign({}, this.Normas_Proce.value), {\n          orden_id: orden_id,\n          informe_id: informe_id\n        });\n\n        this._particulasMagneticas.postNormasProce(data).subscribe(res => {\n          this.onGetNormasProcess();\n          this.Normas_Proce.reset();\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'info',\n                title: body.message\n              });\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      });\n    }\n\n    onEditNormasProce() {\n      if (this.NormasProceId) {\n        let data = Object.assign({}, this.Normas_Proce.value); // console.log(data)\n\n        this._particulasMagneticas.putNormasProces(data, this.NormasProceId).subscribe(res => {\n          this.onGetNormasProcess();\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'info',\n                title: 'No hay usuarios por favor Agregue uno'\n              });\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      } else {\n        this._activatedRoute.params.subscribe(params => {\n          const orden_id = params['orden_id'];\n          const informe_id = params['informe_id'];\n          let data = Object.assign(Object.assign({}, this.Normas_Proce.value), {\n            orden_id,\n            informe_id\n          });\n\n          this._particulasMagneticas.postNormasProce(data).subscribe(res => {}, error => {\n            var errorMessage = error;\n\n            if (errorMessage != null) {\n              var body = error.error;\n\n              if (error.status === 404) {\n                const Toast = Swal.mixin({\n                  toast: true,\n                  position: 'center',\n                  showConfirmButton: false,\n                  timer: 4000,\n                  timerProgressBar: true,\n                  width: '300px'\n                });\n                Toast.fire({\n                  icon: 'info',\n                  title: 'No hay usuarios por favor Agregue uno'\n                });\n              } else if (error.status === 500) {\n                const Toast = Swal.mixin({\n                  toast: true,\n                  position: 'center',\n                  showConfirmButton: false,\n                  timer: 4000,\n                  timerProgressBar: true,\n                  width: '300px'\n                });\n                Toast.fire({\n                  icon: 'error',\n                  title: body.message\n                });\n              } else if (error.status === 0) {\n                const Toast = Swal.mixin({\n                  toast: true,\n                  position: 'center',\n                  showConfirmButton: false,\n                  timer: 4000,\n                  timerProgressBar: true,\n                  width: '300px'\n                });\n                Toast.fire({\n                  icon: 'error',\n                  title: 'Por favor compruebe su conexión de internet'\n                });\n              }\n            }\n          });\n        });\n      }\n    }\n\n    onGetParametrosOp() {\n      this._activatedRoute.params.subscribe(params => {\n        const {\n          orden_id,\n          informe_id\n        } = params;\n\n        this._particulasMagneticas.getParametros(orden_id, informe_id).subscribe(data => {\n          this.ParametrosOp = data.body;\n          console.log(this.ParametrosOp);\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              this.ParametrosOpStatus = false;\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      });\n    }\n\n    onClickEditParametrosOp(data) {\n      this.ParametrosOpId = data._id;\n      this.ParametrosOpStatus = true;\n      this.ParametrosOp.splice(data.actividad, 1);\n      this.Parametros_operacion.patchValue(data);\n    }\n\n    cancelarEditParametrosOp() {\n      this.onGetParametrosOp();\n      this.Parametros_operacion.reset();\n      this.ParametrosOpStatus = false;\n    }\n\n    onSubmitParametrosOp() {\n      this._activatedRoute.params.subscribe(params => {\n        const {\n          orden_id,\n          informe_id\n        } = params;\n        let data = Object.assign(Object.assign({}, this.Parametros_operacion.value), {\n          orden_id: orden_id,\n          informe_id: informe_id\n        });\n\n        this._particulasMagneticas.postParametros(data).subscribe(res => {\n          this.onGetParametrosOp();\n          this.Parametros_operacion.reset();\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'info',\n                title: body.message\n              });\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      });\n    }\n\n    onEditarParametrosOp() {\n      if (this.Parametros_operacion.value.actividad == '') {} else {\n        this._particulasMagneticas.putParametros(this.Parametros_operacion.value, this.ParametrosOpId).subscribe(res => {\n          this.Parametros_operacion.reset();\n          this.onGetParametrosOp();\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'info',\n                title: body.message\n              });\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      }\n    }\n\n    onGetProceso() {\n      this._activatedRoute.params.subscribe(params => {\n        const {\n          orden_id,\n          informe_id\n        } = params;\n\n        this._particulasMagneticas.getProcedimiento(orden_id, informe_id).subscribe(res => {\n          this.ProcesoId = res.body._id;\n          this.Proceso.patchValue(res.body);\n          this.ProcesoBtnSave = false;\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              this.ProcesoStatus = false;\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      });\n    }\n\n    onSubmitProceso() {\n      this._activatedRoute.params.subscribe(params => {\n        const {\n          orden_id,\n          informe_id\n        } = params;\n        let data = Object.assign(Object.assign({}, this.Proceso.value), {\n          orden_id: orden_id,\n          informe_id: informe_id\n        });\n\n        this._particulasMagneticas.postProcedimiento(data).subscribe(res => {\n          this.onGetProceso();\n          this.Proceso.reset();\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'info',\n                title: body.message\n              });\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      });\n    }\n\n    onEditProceso() {\n      if (this.ProcesoId) {\n        let data = Object.assign({}, this.Proceso.value); // console.log(data)\n\n        this._particulasMagneticas.putProcedimiento(data, this.ProcesoId).subscribe(res => {\n          this.onGetProceso();\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'info',\n                title: 'No hay usuarios por favor Agregue uno'\n              });\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      } else {\n        this._activatedRoute.params.subscribe(params => {\n          const orden_id = params['orden_id'];\n          const informe_id = params['informe_id'];\n          let data = Object.assign(Object.assign({}, this.Normas_Proce.value), {\n            orden_id,\n            informe_id\n          });\n\n          this._particulasMagneticas.postProcedimiento(data).subscribe(res => {}, error => {\n            var errorMessage = error;\n\n            if (errorMessage != null) {\n              var body = error.error;\n\n              if (error.status === 404) {\n                const Toast = Swal.mixin({\n                  toast: true,\n                  position: 'center',\n                  showConfirmButton: false,\n                  timer: 4000,\n                  timerProgressBar: true,\n                  width: '300px'\n                });\n                Toast.fire({\n                  icon: 'info',\n                  title: 'No hay usuarios por favor Agregue uno'\n                });\n              } else if (error.status === 500) {\n                const Toast = Swal.mixin({\n                  toast: true,\n                  position: 'center',\n                  showConfirmButton: false,\n                  timer: 4000,\n                  timerProgressBar: true,\n                  width: '300px'\n                });\n                Toast.fire({\n                  icon: 'error',\n                  title: body.message\n                });\n              } else if (error.status === 0) {\n                const Toast = Swal.mixin({\n                  toast: true,\n                  position: 'center',\n                  showConfirmButton: false,\n                  timer: 4000,\n                  timerProgressBar: true,\n                  width: '300px'\n                });\n                Toast.fire({\n                  icon: 'error',\n                  title: 'Por favor compruebe su conexión de internet'\n                });\n              }\n            }\n          });\n        });\n      }\n    }\n\n    onGetElementosInspeccionados() {\n      this._activatedRoute.params.subscribe(params => {\n        const {\n          orden_id,\n          informe_id\n        } = params;\n\n        this._particulasMagneticas.getElementosInspeccionados(orden_id, informe_id).subscribe(res => {\n          this.ElementosInspeccionadosId = res.body._id;\n          this.ElementosInspeccionados.patchValue(res.body);\n          this.ElementosInspeccionadosBtnSave = false;\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              this.NormasStatus = false;\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      });\n    }\n\n    onSubmitElementosInspeccionados() {\n      this._activatedRoute.params.subscribe(params => {\n        const {\n          orden_id,\n          informe_id\n        } = params;\n        let data = Object.assign(Object.assign({}, this.ElementosInspeccionados.value), {\n          orden_id: orden_id,\n          informe_id: informe_id\n        });\n\n        this._particulasMagneticas.postElementosInspeccionados(data).subscribe(res => {\n          this.onGetElementosInspeccionados();\n          this.ElementosInspeccionados.reset();\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'info',\n                title: body.message\n              });\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      });\n    }\n\n    onEditarElementosInspeccionados() {\n      if (this.ElementosInspeccionados.value.actividad == '') {} else {\n        this._particulasMagneticas.putElementosInspeccionados(this.ElementosInspeccionados.value, this.ElementosInspeccionadosId).subscribe(res => {\n          this.ElementosInspeccionados.reset();\n          this.onGetElementosInspeccionados();\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'info',\n                title: body.message\n              });\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      }\n    }\n\n    onGetResultados() {\n      this._activatedRoute.params.subscribe(params => {\n        const {\n          orden_id,\n          informe_id\n        } = params;\n\n        this._particulasMagneticas.getResultados(orden_id, informe_id).subscribe(data => {\n          this.Resultado = data.body;\n          console.log(this.Resultado);\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              this.ResultadosStatus = false;\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      });\n    }\n\n    onClickEditResultados(data) {\n      this.ResultadosId = data._id;\n      this.ResultadosStatus = true;\n      this.Resultado.splice(data.actividad, 1);\n      this.Resultados.patchValue(data);\n    }\n\n    cancelarEditResultados() {\n      this.onGetResultados();\n      this.Resultados.reset();\n      this.ResultadosStatus = false;\n    }\n\n    onSubmitResultados() {\n      this._activatedRoute.params.subscribe(params => {\n        const {\n          orden_id,\n          informe_id\n        } = params;\n        let data = Object.assign(Object.assign({}, this.Resultados.value), {\n          orden_id: orden_id,\n          informe_id: informe_id\n        });\n\n        this._particulasMagneticas.postResultados(data).subscribe(res => {\n          this.onGetResultados();\n          this.Resultados.reset();\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'info',\n                title: body.message\n              });\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      });\n    }\n\n    onEditarResultados() {\n      if (this.Resultados.value.actividad == '') {} else {\n        this._particulasMagneticas.putResultados(this.Resultados.value, this.ResultadosId).subscribe(res => {\n          this.Resultados.reset();\n          this.onGetResultados();\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'info',\n                title: body.message\n              });\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      }\n    }\n\n    onGetObservaciones() {\n      this._activatedRoute.params.subscribe(params => {\n        const {\n          orden_id,\n          informe_id\n        } = params;\n\n        this._particulasMagneticas.getObservaciones(orden_id, informe_id).subscribe(res => {\n          this.ObservacionesId = res.body._id;\n          this.Observaciones.patchValue(res.body);\n          this.ObservacionesStatus = false;\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              this.ObservacionesStatus = false;\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      });\n    }\n\n    onSubmitObservaciones() {\n      this._activatedRoute.params.subscribe(params => {\n        const {\n          orden_id,\n          informe_id\n        } = params;\n        let data = Object.assign(Object.assign({}, this.Observaciones.value), {\n          orden_id: orden_id,\n          informe_id: informe_id\n        });\n\n        this._particulasMagneticas.postObservaciones(data).subscribe(res => {\n          this.onGetObservaciones();\n          this.Observaciones.reset();\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'info',\n                title: body.message\n              });\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      });\n    }\n\n    onEditarObservaciones() {\n      if (this.Observaciones.value.actividad == '') {} else {\n        this._particulasMagneticas.putObservaciones(this.Observaciones.value, this.ObservacionesId).subscribe(res => {\n          this.Observaciones.reset();\n          this.onGetObservaciones();\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'info',\n                title: body.message\n              });\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      }\n    } //REGISTRO FOTOGRÁFICO\n\n\n    onPhotoSelectedRegistroFotos(event) {\n      if (event.target.files && event.target.files[0]) {\n        this.fileRegistroFotos = event.target.files[0];\n      }\n    }\n\n    onSubmitRegistroFotos() {\n      this._activatedRoute.params.subscribe(params => {\n        const {\n          orden_id,\n          informe_id\n        } = params;\n        const title = this.RegistroFotosForm.get('title').value;\n        const data = {\n          orden_id,\n          informe_id,\n          title\n        };\n\n        this._particulasMagneticas.postRegistroFotos(data, this.fileRegistroFotos).subscribe(res => {\n          this.onGetRegistroFotos();\n          this.RegistroFotosForm.reset();\n          this.myInputVariableRegistroFotos.nativeElement.value = \"\";\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'info',\n                title: body.message\n              });\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      });\n    }\n\n    onGetRegistroFotos() {\n      this._activatedRoute.params.subscribe(params => {\n        const {\n          orden_id,\n          informe_id\n        } = params;\n\n        this._particulasMagneticas.getRegistroFotografico(orden_id, informe_id).subscribe(res => {\n          this.RegistroFotos = res.body;\n          res.body.map(item => {\n            const data = {\n              image: `${this.url}/img-uploads/${item.image}`,\n              title: item.title\n            };\n            this.imageObjectRegistroFotos.push(data);\n          });\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {\n              this.ResultadosStatus = false;\n            } else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      });\n    }\n\n    showLightboxRegistroFotos(index) {\n      this.selectedImageIndexRegistroFotos = index;\n      this.showFlagRegistroFotos = true;\n    }\n\n    closeEventHandlerRegistroFotos() {\n      this.showFlagRegistroFotos = false;\n      this.selectedImageIndexRegistroFotos = -1;\n    } //FIRMAS\n\n\n    getFirmaElaboro() {\n      this._activatedRoute.params.subscribe(params => {\n        const {\n          orden_id,\n          informe_id\n        } = params;\n\n        this._particulasMagneticas.getFirmaElboro(orden_id, informe_id).subscribe(res => {\n          this.firmaElaboroImg = res.body[0].firma;\n          this.firmaElaboroStatus = true;\n          console.log(res.body);\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {} else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      });\n    }\n\n    getFirmaReviso() {\n      this._activatedRoute.params.subscribe(params => {\n        const {\n          orden_id,\n          informe_id\n        } = params;\n\n        this._particulasMagneticas.getFirmaReviso(orden_id, informe_id).subscribe(res => {\n          this.firmaRevisaImg = res.body[0].firma;\n          this.firmaRevisoStatus = true;\n        }, error => {\n          var errorMessage = error;\n\n          if (errorMessage != null) {\n            var body = error.error;\n\n            if (error.status === 404) {} else if (error.status === 500) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: body.message\n              });\n            } else if (error.status === 0) {\n              const Toast = Swal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 4000,\n                timerProgressBar: true,\n                width: '300px'\n              });\n              Toast.fire({\n                icon: 'error',\n                title: 'Por favor compruebe su conexión de internet'\n              });\n            }\n          }\n        });\n      });\n    }\n\n    windowOnloadCanvasElaboro() {\n      if (this.autoSaveIndex) {\n        setTimeout(() => {\n          var canvasElaboro = document.getElementById('firmaElaboro');\n          var ctxElaboro = canvasElaboro.getContext('2d');\n          $('#btn-finalizar-firma-elaboro').on('click', () => {\n            var dataUrl = canvasElaboro.toDataURL();\n\n            this._activatedRoute.params.subscribe(params => {\n              const {\n                orden_id,\n                informe_id\n              } = params;\n              let data = {\n                firma: dataUrl,\n                orden_id,\n                informe_id\n              };\n\n              this._particulasMagneticas.postFirmaElaboro(data).subscribe(res => {\n                this.getFirmaElaboro();\n              }, error => {\n                var errorMessage = error;\n\n                if (errorMessage != null) {\n                  var body = error.error;\n\n                  if (error.status === 404) {\n                    const Toast = Swal.mixin({\n                      toast: true,\n                      position: 'center',\n                      showConfirmButton: false,\n                      timer: 4000,\n                      timerProgressBar: true,\n                      width: '300px'\n                    });\n                    Toast.fire({\n                      icon: 'info',\n                      title: body.message\n                    });\n                  } else if (error.status === 500) {\n                    const Toast = Swal.mixin({\n                      toast: true,\n                      position: 'center',\n                      showConfirmButton: false,\n                      timer: 4000,\n                      timerProgressBar: true,\n                      width: '300px'\n                    });\n                    Toast.fire({\n                      icon: 'error',\n                      title: body.message\n                    });\n                  } else if (error.status === 0) {\n                    const Toast = Swal.mixin({\n                      toast: true,\n                      position: 'center',\n                      showConfirmButton: false,\n                      timer: 4000,\n                      timerProgressBar: true,\n                      width: '300px'\n                    });\n                    Toast.fire({\n                      icon: 'error',\n                      title: 'Por favor compruebe su conexión de internet'\n                    });\n                  }\n                }\n              });\n            });\n          });\n          $('#draw-clearBtn-firma-elaboro').on('click', () => {\n            ctxElaboro === null || ctxElaboro === void 0 ? void 0 : ctxElaboro.clearRect(0, 0, canvasElaboro.width, canvasElaboro.height);\n          });\n          /*     $('.guardarControlIngreso').on('click', () => {\n                this.statusImgSign = false\n                ctx.clearRect(0, 0, canvas.width, canvas.height)\n              }) */\n          // Activamos MouseEvent para nuestra pagina\n\n          var drawing = false;\n          var mousePos = {\n            x: 0,\n            y: 0\n          };\n          var lastPos = mousePos;\n          canvasElaboro.addEventListener(\"mousedown\", function (e) {\n            /*\n              Mas alla de solo llamar a una funcion, usamos function (e){...}\n              para mas versatilidad cuando ocurre un evento\n            */\n            drawing = true;\n            lastPos = getMousePos(canvasElaboro, e);\n          }, false);\n          canvasElaboro.addEventListener(\"mouseup\", function (e) {\n            drawing = false;\n          }, false);\n          canvasElaboro.addEventListener(\"mousemove\", function (e) {\n            mousePos = getMousePos(canvasElaboro, e);\n          }, false); // Activamos touchEvent para nuestra pagina\n\n          canvasElaboro.addEventListener(\"touchstart\", function (e) {\n            mousePos = getTouchPos(canvasElaboro, e);\n            e.preventDefault(); // Prevent scrolling when touching the canvasElaboro\n\n            var touch = e.touches[0];\n            var mouseEvent = new MouseEvent(\"mousedown\", {\n              clientX: touch.clientX,\n              clientY: touch.clientY\n            });\n            canvasElaboro.dispatchEvent(mouseEvent);\n          }, false);\n          canvasElaboro.addEventListener(\"touchend\", function (e) {\n            e.preventDefault(); // Prevent scrolling when touching the canvasElaboro\n\n            var mouseEvent = new MouseEvent(\"mouseup\", {});\n            canvasElaboro.dispatchEvent(mouseEvent);\n          }, false);\n          canvasElaboro.addEventListener(\"touchleave\", function (e) {\n            // Realiza el mismo proceso que touchend en caso de que el dedo se deslice fuera del canvasElaboro\n            e.preventDefault(); // Prevent scrolling when touching the canvasElaboro\n\n            var mouseEvent = new MouseEvent(\"mouseup\", {});\n            canvasElaboro.dispatchEvent(mouseEvent);\n          }, false);\n          canvasElaboro.addEventListener(\"touchmove\", function (e) {\n            e.preventDefault(); // Prevent scrolling when touching the canvasElaboro\n\n            var touch = e.touches[0];\n            var mouseEvent = new MouseEvent(\"mousemove\", {\n              clientX: touch.clientX,\n              clientY: touch.clientY\n            });\n            canvasElaboro.dispatchEvent(mouseEvent);\n          }, false); // Get the position of the mouse relative to the canvasElaboro\n\n          function getMousePos(canvasDom, mouseEvent) {\n            var rect = canvasDom.getBoundingClientRect();\n            /*\n              Devuelve el tamaño de un elemento y su posición relativa respecto\n              a la ventana de visualización (viewport).\n            */\n\n            return {\n              x: mouseEvent.clientX - rect.left,\n              y: mouseEvent.clientY - rect.top\n            };\n          } // Get the position of a touch relative to the canvas\n\n\n          function getTouchPos(canvasDom, touchEvent) {\n            var rect = canvasDom.getBoundingClientRect();\n            /*\n              Devuelve el tamaño de un elemento y su posición relativa respecto\n              a la ventana de visualización (viewport).\n            */\n\n            return {\n              x: touchEvent.touches[0].clientX - rect.left,\n              y: touchEvent.touches[0].clientY - rect.top\n            };\n          } // Draw to the canvas\n\n\n          function renderCanvas() {\n            if (drawing) {\n              var tint = '#000000';\n              var punta = 3;\n              ctxElaboro.strokeStyle = tint;\n              ctxElaboro.beginPath();\n              ctxElaboro.moveTo(lastPos.x, lastPos.y);\n              ctxElaboro.lineTo(mousePos.x, mousePos.y);\n              ctxElaboro.lineWidth = punta;\n              ctxElaboro.stroke();\n              ctxElaboro.closePath();\n              lastPos = mousePos;\n            }\n          } // Allow for animation\n\n\n          (function drawLoop() {\n            requestAnimationFrame(drawLoop);\n            renderCanvas();\n          })();\n        }, 2);\n      }\n    }\n\n    windowOnloadCanvasReviso() {\n      if (this.autoSaveIndex) {\n        setTimeout(() => {\n          var firmaReviso = document.getElementById('firmaReviso');\n          var ctxReviso = firmaReviso.getContext('2d');\n          $('#btn-finalizar-firma-reviso').on('click', () => {\n            var dataUrl = firmaReviso.toDataURL();\n\n            this._activatedRoute.params.subscribe(params => {\n              const {\n                orden_id,\n                informe_id\n              } = params;\n              let data = {\n                firma: dataUrl,\n                orden_id,\n                informe_id\n              };\n\n              this._particulasMagneticas.postFirmaReviso(data).subscribe(res => {\n                this.getFirmaReviso();\n              }, error => {\n                var errorMessage = error;\n\n                if (errorMessage != null) {\n                  var body = error.error;\n\n                  if (error.status === 404) {\n                    const Toast = Swal.mixin({\n                      toast: true,\n                      position: 'center',\n                      showConfirmButton: false,\n                      timer: 4000,\n                      timerProgressBar: true,\n                      width: '300px'\n                    });\n                    Toast.fire({\n                      icon: 'info',\n                      title: body.message\n                    });\n                  } else if (error.status === 500) {\n                    const Toast = Swal.mixin({\n                      toast: true,\n                      position: 'center',\n                      showConfirmButton: false,\n                      timer: 4000,\n                      timerProgressBar: true,\n                      width: '300px'\n                    });\n                    Toast.fire({\n                      icon: 'error',\n                      title: body.message\n                    });\n                  } else if (error.status === 0) {\n                    const Toast = Swal.mixin({\n                      toast: true,\n                      position: 'center',\n                      showConfirmButton: false,\n                      timer: 4000,\n                      timerProgressBar: true,\n                      width: '300px'\n                    });\n                    Toast.fire({\n                      icon: 'error',\n                      title: 'Por favor compruebe su conexión de internet'\n                    });\n                  }\n                }\n              });\n            });\n          });\n          $('#draw-clearBtn-firma-reviso').on('click', () => {\n            ctxReviso === null || ctxReviso === void 0 ? void 0 : ctxReviso.clearRect(0, 0, firmaReviso.width, firmaReviso.height);\n          });\n          /*     $('.guardarControlIngreso').on('click', () => {\n                this.statusImgSign = false\n                ctx.clearRect(0, 0, canvas.width, canvas.height)\n              }) */\n          // Activamos MouseEvent para nuestra pagina\n\n          var drawing = false;\n          var mousePos = {\n            x: 0,\n            y: 0\n          };\n          var lastPos = mousePos;\n          firmaReviso.addEventListener(\"mousedown\", function (e) {\n            /*\n              Mas alla de solo llamar a una funcion, usamos function (e){...}\n              para mas versatilidad cuando ocurre un evento\n            */\n            drawing = true;\n            lastPos = getMousePos(firmaReviso, e);\n          }, false);\n          firmaReviso.addEventListener(\"mouseup\", function (e) {\n            drawing = false;\n          }, false);\n          firmaReviso.addEventListener(\"mousemove\", function (e) {\n            mousePos = getMousePos(firmaReviso, e);\n          }, false); // Activamos touchEvent para nuestra pagina\n\n          firmaReviso.addEventListener(\"touchstart\", function (e) {\n            mousePos = getTouchPos(firmaReviso, e);\n            e.preventDefault(); // Prevent scrolling when touching the firmaReviso\n\n            var touch = e.touches[0];\n            var mouseEvent = new MouseEvent(\"mousedown\", {\n              clientX: touch.clientX,\n              clientY: touch.clientY\n            });\n            firmaReviso.dispatchEvent(mouseEvent);\n          }, false);\n          firmaReviso.addEventListener(\"touchend\", function (e) {\n            e.preventDefault(); // Prevent scrolling when touching the firmaReviso\n\n            var mouseEvent = new MouseEvent(\"mouseup\", {});\n            firmaReviso.dispatchEvent(mouseEvent);\n          }, false);\n          firmaReviso.addEventListener(\"touchleave\", function (e) {\n            // Realiza el mismo proceso que touchend en caso de que el dedo se deslice fuera del firmaReviso\n            e.preventDefault(); // Prevent scrolling when touching the firmaReviso\n\n            var mouseEvent = new MouseEvent(\"mouseup\", {});\n            firmaReviso.dispatchEvent(mouseEvent);\n          }, false);\n          firmaReviso.addEventListener(\"touchmove\", function (e) {\n            e.preventDefault(); // Prevent scrolling when touching the firmaReviso\n\n            var touch = e.touches[0];\n            var mouseEvent = new MouseEvent(\"mousemove\", {\n              clientX: touch.clientX,\n              clientY: touch.clientY\n            });\n            firmaReviso.dispatchEvent(mouseEvent);\n          }, false); // Get the position of the mouse relative to the firmaReviso\n\n          function getMousePos(canvasDom, mouseEvent) {\n            var rect = canvasDom.getBoundingClientRect();\n            /*\n              Devuelve el tamaño de un elemento y su posición relativa respecto\n              a la ventana de visualización (viewport).\n            */\n\n            return {\n              x: mouseEvent.clientX - rect.left,\n              y: mouseEvent.clientY - rect.top\n            };\n          } // Get the position of a touch relative to the canvas\n\n\n          function getTouchPos(canvasDom, touchEvent) {\n            var rect = canvasDom.getBoundingClientRect();\n            /*\n              Devuelve el tamaño de un elemento y su posición relativa respecto\n              a la ventana de visualización (viewport).\n            */\n\n            return {\n              x: touchEvent.touches[0].clientX - rect.left,\n              y: touchEvent.touches[0].clientY - rect.top\n            };\n          } // Draw to the canvas\n\n\n          function renderCanvas() {\n            if (drawing) {\n              var tint = '#000000';\n              var punta = 3;\n              ctxReviso.strokeStyle = tint;\n              ctxReviso.beginPath();\n              ctxReviso.moveTo(lastPos.x, lastPos.y);\n              ctxReviso.lineTo(mousePos.x, mousePos.y);\n              ctxReviso.lineWidth = punta;\n              ctxReviso.stroke();\n              ctxReviso.closePath();\n              lastPos = mousePos;\n            }\n          } // Allow for animation\n\n\n          (function drawLoop() {\n            requestAnimationFrame(drawLoop);\n            renderCanvas();\n          })();\n        }, 2);\n      }\n    }\n\n  }\n\n  ParticulasMagneticasComponent.ɵfac = function ParticulasMagneticasComponent_Factory(t) {\n    return new (t || ParticulasMagneticasComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.OrdenesService), i0.ɵɵdirectiveInject(i4.ParticulasMagneticasService), i0.ɵɵdirectiveInject(i5.InformesRutasService));\n  };\n\n  ParticulasMagneticasComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ParticulasMagneticasComponent,\n    selectors: [[\"app-particulas-magneticas\"]],\n    viewQuery: function ParticulasMagneticasComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.myInputVariableRegistroFotos = _t.first);\n      }\n    },\n    decls: 249,\n    vars: 90,\n    consts: [[1, \"flex\", \"items-start\", \"justify-between\"], [\"class\", \"grid grid-cols-2 gap-x-4 gap-y-1\", 4, \"ngIf\"], [1, \"projects-section-header\"], [1, \"flex\", \"sm\", \"items-start\", \"sm:items-center\", \"sm:justify-between\", \"py-8\", \"px-6\", \"px-8\"], [1, \"text-3xl\", \"font-extrabold\", \"tracking-tight\", \"leading-none\"], [1, \"p-3\", \"bg-card\", \"shadow\", \"rounded\", \"overflow-hidden\", 3, \"formGroup\"], [\"orientation\", \"vertical\", 3, \"selectionChange\"], [\"stepper\", \"\"], [3, \"stepControl\"], [3, \"formGroup\"], [\"matStepLabel\", \"\"], [1, \"flex\"], [\"appearance\", \"outline\", 1, \"flex-auto\"], [\"matInput\", \"\", \"autocomplete\", \"off\", \"required\", \"\", 3, \"placeholder\", \"formControlName\"], [1, \"flex\", \"justify-end\", \"mt-8\", \"ng-star-inserted\"], [\"type\", \"submit\", \"mat-button\", \"\", \"matStepperNext\", \"\", 1, \"mat-focus-indicator\", \"mat-stepper-next\", \"px-8\", \"mat-flat-button\", \"mat-button-base\", \"mat-primary\", \"next-save\", 3, \"disabled\", \"click\"], [1, \"mat-button-wrapper\"], [\"matripple\", \"\", 1, \"mat-ripple\", \"mat-button-ripple\"], [1, \"mat-button-focus-overlay\"], [1, \"content-inputs\", \"flex\"], [\"matInput\", \"\", \"autocomplete\", \"off\", \"required\", \"\", 3, \"formControlName\", \"placeholder\"], [1, \"flex\", \"justify-end\"], [\"class\", \"mat-focus-indicator mat-stepper-next px-8 mat-flat-button mat-button-base mat-primary back mr-2\", \"mat-flat-button\", \"\", \"type\", \"button\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"submit\", \"mat-flat-button\", \"\", \"type\", \"button\", 1, \"mat-focus-indicator\", \"mat-stepper-next\", \"px-8\", \"mat-flat-button\", \"mat-button-base\", \"btn\", \"btn-success\", 3, \"disabled\", \"click\"], [1, \"table\", \"table-hover\"], [3, \"click\", 4, \"ngFor\", \"ngForOf\"], [\"mat-flat-button\", \"\", \"type\", \"button\", \"matStepperPrevious\", \"\", 1, \"mat-focus-indicator\", \"mat-stepper-next\", \"px-8\", \"mat-flat-button\", \"mat-button-base\", \"mat-primary\", \"back\", \"mr-2\"], [\"type\", \"button\", \"mat-flat-button\", \"\", \"type\", \"button\", \"matStepperNext\", \"\", 1, \"mat-focus-indicator\", \"mat-stepper-next\", \"px-8\", \"mat-flat-button\", \"mat-button-base\", \"mat-primary\", \"next-save\"], [1, \"my-6\", \"font-medium\"], [\"type\", \"submit\", \"mat-button\", \"\", \"matStepperNext\", \"\", \"matStepperNext\", \"\", 1, \"mat-focus-indicator\", \"mat-stepper-next\", \"px-8\", \"mat-flat-button\", \"mat-button-base\", \"mat-primary\", \"next-save\", 3, \"disabled\", \"click\"], [\"placeholder\", \"Elementos Inspeccionados\", 3, \"formControlName\", \"modules\"], [1, \"flex\", \"justify-end\", \"mt-3\"], [3, \"formControlName\"], [3, \"value\"], [\"placeholder\", \"Observaciones\", 3, \"formControlName\", \"modules\"], [\"matPrefix\", \"\", 1, \"icon-size-5\", \"icon-form\"], [1, \"content-inputs\"], [1, \"mb-3\"], [\"for\", \"formFileSm\", 1, \"form-label\"], [\"id\", \"formFileSmRegistroFotos\", \"type\", \"file\", \"accept\", \"image/x-png,image/jpeg,image/jpg\", 1, \"form-control\", \"form-control-sm\", 3, \"change\"], [\"formFileSmRegistroFotos\", \"\"], [1, \"flex\", \"justify-end\", \"mb-3\"], [\"type\", \"submit\", \"mat-flat-button\", \"\", \"type\", \"submit\", 1, \"mat-focus-indicator\", \"mat-stepper-next\", \"px-8\", \"mat-flat-button\", \"mat-button-base\", \"btn\", \"btn-success\", \"bt-m\", 3, \"click\"], [1, \"marging\", \"row-img\"], [1, \"column-img\"], [\"cols\", \"2\", \"rowHeight\", \"2:1\"], [4, \"ngFor\", \"ngForOf\"], [3, \"images\", \"imageIndex\", \"show\", \"close\"], [1, \"grid\", \"grid-cols-2\", \"gap-x-4\", \"gap-y-1\"], [1, \"text-4xl\", \"tracking-tight\", \"text-secondary\"], [1, \"text-4xl\"], [1, \"font-medium\", \"tracking-tight\", \"text-secondary\"], [1, \"font-medium\"], [\"mat-flat-button\", \"\", \"type\", \"button\", 1, \"mat-focus-indicator\", \"mat-stepper-next\", \"px-8\", \"mat-flat-button\", \"mat-button-base\", \"mat-primary\", \"back\", \"mr-2\", 3, \"click\"], [3, \"click\"], [1, \"mat-step-custom-click\"], [1, \"mat-step-custom-click\", 3, \"click\"], [\"mat-card-image\", \"\", 1, \"img\", 3, \"src\", \"alt\", \"click\"], [\"mat-line\", \"\"], [\"mat-mini-fab\", \"\", \"color\", \"warn\"]],\n    template: function ParticulasMagneticasComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, ParticulasMagneticasComponent_div_1_Template, 22, 8, \"div\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\");\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵtext(6, \"Informe inspecci\\u00F3n de part\\u00EDculas magn\\u00E9ticas\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"form\", 5);\n        i0.ɵɵelementStart(8, \"mat-stepper\", 6, 7);\n        i0.ɵɵlistener(\"selectionChange\", function ParticulasMagneticasComponent_Template_mat_stepper_selectionChange_8_listener($event) {\n          return ctx.setIndex($event);\n        });\n        i0.ɵɵelementStart(10, \"mat-step\", 8);\n        i0.ɵɵelementStart(11, \"form\", 9);\n        i0.ɵɵtemplate(12, ParticulasMagneticasComponent_ng_template_12_Template, 1, 0, \"ng-template\", 10);\n        i0.ɵɵelementStart(13, \"div\", 11);\n        i0.ɵɵelementStart(14, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(15, \"mat-label\");\n        i0.ɵɵtext(16, \"Normas para el criterio de evaluaci\\u00F3n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"textarea\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 11);\n        i0.ɵɵelementStart(19, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(20, \"mat-label\");\n        i0.ɵɵtext(21, \"Equipos utilizados\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(22, \"textarea\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"div\", 14);\n        i0.ɵɵelementStart(24, \"button\", 15);\n        i0.ɵɵlistener(\"click\", function ParticulasMagneticasComponent_Template_button_click_24_listener() {\n          return ctx.NormasId ? ctx.onEditNormas() : ctx.onSubmitNormas();\n        });\n        i0.ɵɵelementStart(25, \"span\", 16);\n        i0.ɵɵtext(26, \" Siguiente \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(27, \"span\", 17);\n        i0.ɵɵelement(28, \"span\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"mat-step\", 8);\n        i0.ɵɵelementStart(30, \"form\", 9);\n        i0.ɵɵtemplate(31, ParticulasMagneticasComponent_ng_template_31_Template, 1, 0, \"ng-template\", 10);\n        i0.ɵɵelement(32, \"br\");\n        i0.ɵɵelementStart(33, \"div\", 19);\n        i0.ɵɵelementStart(34, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(35, \"mat-label\");\n        i0.ɵɵtext(36, \"Detalles\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(37, \"input\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(39, \"mat-label\");\n        i0.ɵɵtext(40, \"Fabricante\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(41, \"input\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(42, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(43, \"mat-label\");\n        i0.ɵɵtext(44, \"Referencia comercial\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(45, \"input\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(46, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(47, \"mat-label\");\n        i0.ɵɵtext(48, \"Lote N\\u00B0\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(49, \"input\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(50, \"div\", 21);\n        i0.ɵɵtemplate(51, ParticulasMagneticasComponent_button_51_Template, 2, 0, \"button\", 22);\n        i0.ɵɵelementStart(52, \"button\", 23);\n        i0.ɵɵlistener(\"click\", function ParticulasMagneticasComponent_Template_button_click_52_listener() {\n          return ctx.MaterialesUtilizadosStatus == false ? ctx.onSubmitMaterialesUtilizados() : ctx.onEditarMaterialesUtilizados();\n        });\n        i0.ɵɵtext(53);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(54, \"table\", 24);\n        i0.ɵɵelementStart(55, \"tbody\");\n        i0.ɵɵtemplate(56, ParticulasMagneticasComponent_tr_56_Template, 9, 4, \"tr\", 25);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(57, \"div\", 21);\n        i0.ɵɵelementStart(58, \"button\", 26);\n        i0.ɵɵtext(59, \" Atras \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(60, \"button\", 27);\n        i0.ɵɵtext(61, \" Siguiente \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(62, \"mat-step\", 8);\n        i0.ɵɵelementStart(63, \"form\", 9);\n        i0.ɵɵtemplate(64, ParticulasMagneticasComponent_ng_template_64_Template, 1, 0, \"ng-template\", 10);\n        i0.ɵɵelementStart(65, \"div\", 11);\n        i0.ɵɵelementStart(66, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(67, \"mat-label\");\n        i0.ɵɵtext(68, \"Normas para los procedimientos y m\\u00E9todos de aplicaci\\u00F3n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(69, \"textarea\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(70, \"p\", 28);\n        i0.ɵɵtext(71, \"Tipo y m\\u00E9todo: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(72, \"div\", 19);\n        i0.ɵɵelementStart(73, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(74, \"mat-label\");\n        i0.ɵɵtext(75, \"Tipo\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(76, \"input\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(77, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(78, \"mat-label\");\n        i0.ɵɵtext(79, \"M\\u00E9todo\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(80, \"input\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(81, \"div\", 11);\n        i0.ɵɵelementStart(82, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(83, \"mat-label\");\n        i0.ɵɵtext(84, \"Procedimiento\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(85, \"textarea\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(86, \"div\", 21);\n        i0.ɵɵelementStart(87, \"button\", 26);\n        i0.ɵɵtext(88, \" Atras \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(89, \"button\", 29);\n        i0.ɵɵlistener(\"click\", function ParticulasMagneticasComponent_Template_button_click_89_listener() {\n          return ctx.NormasProceId ? ctx.onEditNormasProce() : ctx.onSubmitNormasProce();\n        });\n        i0.ɵɵelementStart(90, \"span\", 16);\n        i0.ɵɵtext(91, \" Siguiente \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(92, \"span\", 17);\n        i0.ɵɵelement(93, \"span\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(94, \"mat-step\", 8);\n        i0.ɵɵelementStart(95, \"form\", 9);\n        i0.ɵɵtemplate(96, ParticulasMagneticasComponent_ng_template_96_Template, 1, 0, \"ng-template\", 10);\n        i0.ɵɵelement(97, \"br\");\n        i0.ɵɵelementStart(98, \"div\", 11);\n        i0.ɵɵelementStart(99, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(100, \"mat-label\");\n        i0.ɵɵtext(101, \"Actividad\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(102, \"input\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(103, \"div\", 11);\n        i0.ɵɵelementStart(104, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(105, \"mat-label\");\n        i0.ɵɵtext(106, \"Distancia\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(107, \"input\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(108, \"div\", 11);\n        i0.ɵɵelementStart(109, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(110, \"mat-label\");\n        i0.ɵɵtext(111, \"Aplicaci\\u00F3n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(112, \"input\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(113, \"div\", 11);\n        i0.ɵɵelementStart(114, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(115, \"mat-label\");\n        i0.ɵɵtext(116, \"Iluminaci\\u00F3n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(117, \"input\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(118, \"div\", 21);\n        i0.ɵɵtemplate(119, ParticulasMagneticasComponent_button_119_Template, 2, 0, \"button\", 22);\n        i0.ɵɵelementStart(120, \"button\", 23);\n        i0.ɵɵlistener(\"click\", function ParticulasMagneticasComponent_Template_button_click_120_listener() {\n          return ctx.ParametrosOpStatus == false ? ctx.onSubmitParametrosOp() : ctx.onEditarParametrosOp();\n        });\n        i0.ɵɵtext(121);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(122, \"table\", 24);\n        i0.ɵɵelementStart(123, \"tbody\");\n        i0.ɵɵtemplate(124, ParticulasMagneticasComponent_tr_124_Template, 11, 5, \"tr\", 25);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(125, \"div\", 21);\n        i0.ɵɵelementStart(126, \"button\", 26);\n        i0.ɵɵtext(127, \" Atras \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(128, \"button\", 27);\n        i0.ɵɵtext(129, \" Siguiente \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(130, \"mat-step\", 8);\n        i0.ɵɵelementStart(131, \"form\", 9);\n        i0.ɵɵtemplate(132, ParticulasMagneticasComponent_ng_template_132_Template, 1, 0, \"ng-template\", 10);\n        i0.ɵɵelement(133, \"br\");\n        i0.ɵɵelementStart(134, \"div\", 19);\n        i0.ɵɵelementStart(135, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(136, \"mat-label\");\n        i0.ɵɵtext(137, \"Proceso de magnetizaci\\u00F3n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(138, \"input\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(139, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(140, \"mat-label\");\n        i0.ɵɵtext(141, \"Corriente de magnetizaci\\u00F3n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(142, \"input\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(143, \"div\", 21);\n        i0.ɵɵelementStart(144, \"button\", 26);\n        i0.ɵɵtext(145, \" Atras \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(146, \"button\", 29);\n        i0.ɵɵlistener(\"click\", function ParticulasMagneticasComponent_Template_button_click_146_listener() {\n          return ctx.ProcesoId ? ctx.onEditProceso() : ctx.onSubmitProceso();\n        });\n        i0.ɵɵelementStart(147, \"span\", 16);\n        i0.ɵɵtext(148, \" Siguiente \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(149, \"span\", 17);\n        i0.ɵɵelement(150, \"span\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(151, \"mat-step\", 8);\n        i0.ɵɵelementStart(152, \"form\", 9);\n        i0.ɵɵtemplate(153, ParticulasMagneticasComponent_ng_template_153_Template, 2, 0, \"ng-template\", 10);\n        i0.ɵɵelement(154, \"quill-editor\", 30);\n        i0.ɵɵelementStart(155, \"div\", 31);\n        i0.ɵɵelementStart(156, \"button\", 26);\n        i0.ɵɵtext(157, \" Atras \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(158, \"button\", 29);\n        i0.ɵɵlistener(\"click\", function ParticulasMagneticasComponent_Template_button_click_158_listener() {\n          return ctx.ElementosInspeccionadosId ? ctx.onEditarElementosInspeccionados() : ctx.onSubmitElementosInspeccionados();\n        });\n        i0.ɵɵelementStart(159, \"span\", 16);\n        i0.ɵɵtext(160, \" Siguiente \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(161, \"span\", 17);\n        i0.ɵɵelement(162, \"span\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(163, \"mat-step\", 8);\n        i0.ɵɵelementStart(164, \"form\", 9);\n        i0.ɵɵtemplate(165, ParticulasMagneticasComponent_ng_template_165_Template, 1, 0, \"ng-template\", 10);\n        i0.ɵɵelement(166, \"br\");\n        i0.ɵɵelementStart(167, \"div\", 11);\n        i0.ɵɵelementStart(168, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(169, \"mat-label\");\n        i0.ɵɵtext(170, \"Elemento\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(171, \"input\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(172, \"div\", 11);\n        i0.ɵɵelementStart(173, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(174, \"mat-label\");\n        i0.ɵɵtext(175, \"Indicaci\\u00F3n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(176, \"input\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(177, \"div\", 11);\n        i0.ɵɵelementStart(178, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(179, \"mat-label\");\n        i0.ɵɵtext(180, \"Calificaci\\u00F3n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(181, \"mat-select\", 32);\n        i0.ɵɵelementStart(182, \"mat-option\", 33);\n        i0.ɵɵtext(183, \"Conforme\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(184, \"mat-option\", 33);\n        i0.ɵɵtext(185, \"Conforme luego x Reparaci\\u00F3n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(186, \"mat-option\", 33);\n        i0.ɵɵtext(187, \"No conforme\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(188, \"mat-option\", 33);\n        i0.ɵɵtext(189, \"Inspeccionar\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(190, \"div\", 11);\n        i0.ɵɵelementStart(191, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(192, \"mat-label\");\n        i0.ɵɵtext(193, \"Observaciones\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(194, \"input\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(195, \"div\", 21);\n        i0.ɵɵtemplate(196, ParticulasMagneticasComponent_button_196_Template, 2, 0, \"button\", 22);\n        i0.ɵɵelementStart(197, \"button\", 23);\n        i0.ɵɵlistener(\"click\", function ParticulasMagneticasComponent_Template_button_click_197_listener() {\n          return ctx.ResultadosStatus == false ? ctx.onSubmitResultados() : ctx.onEditarResultados();\n        });\n        i0.ɵɵtext(198);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(199, \"table\", 24);\n        i0.ɵɵelementStart(200, \"tbody\");\n        i0.ɵɵtemplate(201, ParticulasMagneticasComponent_tr_201_Template, 11, 5, \"tr\", 25);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(202, \"div\", 21);\n        i0.ɵɵelementStart(203, \"button\", 26);\n        i0.ɵɵtext(204, \" Atras \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(205, \"button\", 27);\n        i0.ɵɵtext(206, \" Siguiente \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(207, \"mat-step\", 8);\n        i0.ɵɵelementStart(208, \"form\", 9);\n        i0.ɵɵtemplate(209, ParticulasMagneticasComponent_ng_template_209_Template, 2, 0, \"ng-template\", 10);\n        i0.ɵɵelement(210, \"quill-editor\", 34);\n        i0.ɵɵelementStart(211, \"div\", 31);\n        i0.ɵɵelementStart(212, \"button\", 26);\n        i0.ɵɵtext(213, \" Atras \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(214, \"button\", 15);\n        i0.ɵɵlistener(\"click\", function ParticulasMagneticasComponent_Template_button_click_214_listener() {\n          return ctx.ObservacionesId ? ctx.onEditarObservaciones() : ctx.onSubmitObservaciones();\n        });\n        i0.ɵɵelementStart(215, \"span\", 16);\n        i0.ɵɵtext(216, \" Siguiente \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(217, \"span\", 17);\n        i0.ɵɵelement(218, \"span\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(219, \"mat-step\", 8);\n        i0.ɵɵelementStart(220, \"form\", 9);\n        i0.ɵɵtemplate(221, ParticulasMagneticasComponent_ng_template_221_Template, 2, 0, \"ng-template\", 10);\n        i0.ɵɵelement(222, \"br\");\n        i0.ɵɵelementStart(223, \"div\", 11);\n        i0.ɵɵelementStart(224, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(225, \"mat-label\");\n        i0.ɵɵtext(226, \"Titulo\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(227, \"input\", 20);\n        i0.ɵɵelementStart(228, \"mat-icon\", 35);\n        i0.ɵɵtext(229, \"title\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(230, \"div\", 36);\n        i0.ɵɵelementStart(231, \"div\", 37);\n        i0.ɵɵelementStart(232, \"label\", 38);\n        i0.ɵɵtext(233, \"Seleccion las imagenes\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(234, \"input\", 39, 40);\n        i0.ɵɵlistener(\"change\", function ParticulasMagneticasComponent_Template_input_change_234_listener($event) {\n          return ctx.onPhotoSelectedRegistroFotos($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(236, \"div\", 41);\n        i0.ɵɵelementStart(237, \"button\", 42);\n        i0.ɵɵlistener(\"click\", function ParticulasMagneticasComponent_Template_button_click_237_listener() {\n          return ctx.onSubmitRegistroFotos();\n        });\n        i0.ɵɵtext(238, \" A\\u00F1adir \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(239, \"div\", 43);\n        i0.ɵɵelementStart(240, \"div\", 44);\n        i0.ɵɵelementStart(241, \"mat-grid-list\", 45);\n        i0.ɵɵtemplate(242, ParticulasMagneticasComponent_mat_grid_tile_242_Template, 10, 4, \"mat-grid-tile\", 46);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(243, \"ng-image-fullscreen-view\", 47);\n        i0.ɵɵlistener(\"close\", function ParticulasMagneticasComponent_Template_ng_image_fullscreen_view_close_243_listener() {\n          return ctx.closeEventHandlerRegistroFotos();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(244, \"div\", 21);\n        i0.ɵɵelementStart(245, \"button\", 26);\n        i0.ɵɵtext(246, \" Atras \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(247, \"button\", 27);\n        i0.ɵɵtext(248, \" Siguiente \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.detallesOrden);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"formGroup\", ctx.Normas);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"stepControl\", ctx.Normas);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.Normas);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"placeholder\", \"Normas para el criterio de evaluaci\\u00F3n\")(\"formControlName\", \"norma\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"placeholder\", \"Equipos utilizados\")(\"formControlName\", \"equipos_utilizados\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.Normas.invalid);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"stepControl\", ctx.Materiales_Utilizados);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.Materiales_Utilizados);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"formControlName\", \"detalles\")(\"placeholder\", \"Detalles\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formControlName\", \"fabricante\")(\"placeholder\", \"Fabricante\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formControlName\", \"ref_comercial\")(\"placeholder\", \"Referencia comercial\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formControlName\", \"lotes_n\")(\"placeholder\", \"Lote N\\u00B0\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.MaterialesUtilizadosStatus);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.Materiales_Utilizados.status != \"VALID\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.MaterialesUtilizadosStatus == false ? \"A\\u00F1adir\" : \"Editar\", \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.MaterialesUtilizados);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"stepControl\", ctx.Normas_Proce);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.Normas_Proce);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"placeholder\", \"Normas para los procedimientos y m\\u00E9todos de aplicaci\\u00F3n\")(\"formControlName\", \"normas_process\");\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"placeholder\", \"Tipo\")(\"formControlName\", \"tipo\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"placeholder\", \"M\\u00E9todo\")(\"formControlName\", \"metodo\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"placeholder\", \"Procedimiento\")(\"formControlName\", \"procedimiento\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", ctx.Normas_Proce.invalid);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"stepControl\", ctx.Parametros_operacion);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.Parametros_operacion);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"formControlName\", \"actividad\")(\"placeholder\", \"Actividad\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formControlName\", \"distancia\")(\"placeholder\", \"Distancia\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formControlName\", \"aplicacion\")(\"placeholder\", \"Aplicaci\\u00F3n\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formControlName\", \"iluminacion\")(\"placeholder\", \"Iluminaci\\u00F3n\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.MaterialesUtilizadosStatus);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.Parametros_operacion.status != \"VALID\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.ParametrosOpStatus == false ? \"A\\u00F1adir\" : \"Editar\", \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.ParametrosOp);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"stepControl\", ctx.Proceso);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.Proceso);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"formControlName\", \"proceso_magnetizacion\")(\"placeholder\", \"Proceso magnetizaci\\u00F3n\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formControlName\", \"corriente_magnetizacion\")(\"placeholder\", \"Corriente magnetizaci\\u00F3n\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", ctx.Proceso.invalid);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"stepControl\", ctx.ElementosInspeccionados);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.ElementosInspeccionados);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formControlName\", \"elemento_inspeccionado\")(\"modules\", ctx.quillModules);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", ctx.ElementosInspeccionados.invalid);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"stepControl\", ctx.Resultados);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.Resultados);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"formControlName\", \"elemento\")(\"placeholder\", \"Elemento\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formControlName\", \"indicacion\")(\"placeholder\", \"Indicaci\\u00F3n\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formControlName\", \"calificacion\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", \"C\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", \"C(xR)\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", \"NC\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", \"I\");\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"formControlName\", \"observaciones\")(\"placeholder\", \"Observaciones\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.MaterialesUtilizadosStatus);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.Resultados.status != \"VALID\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.ResultadosStatus == false ? \"A\\u00F1adir\" : \"Editar\", \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.Resultado);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"stepControl\", ctx.Observaciones);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.Observaciones);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formControlName\", \"observaciones\")(\"modules\", ctx.quillModules);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", ctx.Observaciones.invalid);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"stepControl\", ctx.RegistroFotosForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.RegistroFotosForm);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"formControlName\", \"title\")(\"placeholder\", \"Titulo\");\n        i0.ɵɵadvance(15);\n        i0.ɵɵproperty(\"ngForOf\", ctx.RegistroFotos);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"images\", ctx.imageObjectRegistroFotos)(\"imageIndex\", ctx.selectedImageIndexRegistroFotos)(\"show\", ctx.showFlagRegistroFotos);\n      }\n    },\n    directives: [i6.NgIf, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i7.MatStepper, i7.MatStep, i7.MatStepLabel, i8.MatFormField, i8.MatLabel, i9.MatInput, i1.DefaultValueAccessor, i1.RequiredValidator, i1.NgControlStatus, i1.FormControlName, i10.MatButton, i7.MatStepperNext, i6.NgForOf, i7.MatStepperPrevious, i11.QuillEditorComponent, i12.MatSelect, i13.MatOption, i14.MatIcon, i8.MatPrefix, i15.MatGridList, i16.NgImageFullscreenViewComponent, i15.MatGridTile, i17.MatCardImage, i15.MatGridTileText, i15.MatGridTileFooterCssMatStyler, i13.MatLine],\n    pipes: [i6.DatePipe],\n    styles: [\".gap-y-1[_ngcontent-%COMP%] {\\n    grid-row-gap: 0.25rem !important;\\n    row-gap: 0.25rem !important;\\n  }\\n\\n  .gap-x-4[_ngcontent-%COMP%] {\\n    grid-column-gap: 1rem !important;\\n    column-gap: 1rem !important;\\n  }\\n\\n  .grid-cols-2[_ngcontent-%COMP%] {\\n    grid-template-columns: repeat(2, minmax(0, 1fr)) !important;\\n  }\\n\\n  .grid[_ngcontent-%COMP%] {\\n    display: grid !important;\\n  }\\n\\n  @media (min-width: 600px) {\\n    .sm\\\\:justify-between[_ngcontent-%COMP%] {\\n      justify-content: space-between !important;\\n    }\\n  }\\n\\n  @media (min-width: 600px) {\\n    .sm[_ngcontent-%COMP%] {\\n      align-items: center !important;\\n    }\\n  }\\n\\n  @media (min-width: 600px) {\\n    .sm[_ngcontent-%COMP%] {\\n      flex-direction: row !important;\\n    }\\n  }\\n\\n  @media (min-width: 960px) {\\n    .px-8[_ngcontent-%COMP%] {\\n      padding-left: 2rem !important;\\n      padding-right: 2rem !important;\\n    }\\n  }\\n\\n  .tracking-tight[_ngcontent-%COMP%] {\\n    letter-spacing: -0.025em !important;\\n  }\\n\\n  .leading-none[_ngcontent-%COMP%] {\\n    line-height: 1 !important;\\n  }\\n\\n  .font-extrabold[_ngcontent-%COMP%] {\\n    font-weight: 800 !important;\\n  }\\n\\n  .text-4xl[_ngcontent-%COMP%] {\\n    font-size: 2rem !important;\\n  }\\n\\n  @media (min-width: 600px) {\\n    .sm\\\\:mt-0[_ngcontent-%COMP%] {\\n      margin-top: 0 !important;\\n    }\\n  }\\n\\n  .mat-button[_ngcontent-%COMP%], .mat-flat-button[_ngcontent-%COMP%], .mat-raised-button[_ngcontent-%COMP%], .mat-stroked-button[_ngcontent-%COMP%] {\\n    padding: 0 20px !important;\\n    border-radius: 9999px !important;\\n  }\\n\\n  .mt-4[_ngcontent-%COMP%] {\\n    margin-top: 1rem !important;\\n  }\\n\\n  .py-8[_ngcontent-%COMP%] {\\n    padding-top: 2rem !important;\\n    padding-bottom: 2rem !important;\\n  }\\n\\n  .px-6[_ngcontent-%COMP%] {\\n    padding-left: 1.5rem !important;\\n    padding-right: 1.5rem !important;\\n  }\\n\\n  .items-start[_ngcontent-%COMP%] {\\n    align-items: flex-start !important;\\n  }\\n\\n  .flex-col[_ngcontent-%COMP%] {\\n    flex-direction: column !important;\\n  }\\n\\n  .divide-y[_ngcontent-%COMP%] {\\n    border: calc(1px * calc(1 - 0)) rgba(0, 0, 0, 0.125) solid !important;\\n    border-radius: 10px;\\n  }\\n\\n  .select-none[_ngcontent-%COMP%] {\\n    -webkit-user-select: none !important;\\n    user-select: none !important;\\n  }\\n\\n  .w-full[_ngcontent-%COMP%] {\\n    width: 100% !important;\\n  }\\n\\n  .h-16[_ngcontent-%COMP%] {\\n    height: 4rem !important;\\n  }\\n\\n  .pl-10[_ngcontent-%COMP%] {\\n    padding-left: 2.5rem !important;\\n  }\\n\\n  .items-center[_ngcontent-%COMP%] {\\n    align-items: center !important;\\n  }\\n\\n  .h-full[_ngcontent-%COMP%] {\\n    height: 100% !important;\\n  }\\n\\n  .flex[_ngcontent-%COMP%] {\\n    display: flex !important;\\n  }\\n\\n  .relative[_ngcontent-%COMP%] {\\n    position: relative !important;\\n  }\\n\\n  .bg-primary[_ngcontent-%COMP%] {\\n    --tw-bg-opacity: 1 !important;\\n    background-color: (rgba(79, 70, 229), var(--tw-bg-opacity)) !important;\\n  }\\n\\n  .flex-0[_ngcontent-%COMP%] {\\n    flex: 0 0 auto !important;\\n  }\\n\\n  .w-1[_ngcontent-%COMP%] {\\n    width: 0.25rem !important;\\n  }\\n\\n  .z-10[_ngcontent-%COMP%] {\\n    z-index: 10 !important;\\n  }\\n\\n  .-bottom-px[_ngcontent-%COMP%] {\\n    bottom: -1px !important;\\n  }\\n\\n  .-top-px[_ngcontent-%COMP%] {\\n    top: -1px !important;\\n  }\\n\\n  .right-0[_ngcontent-%COMP%] {\\n    right: 0px !important;\\n  }\\n\\n  .absolute[_ngcontent-%COMP%], .\\\\!absolute[_ngcontent-%COMP%] {\\n    position: absolute !important;\\n  }\\n\\n  .items-center[_ngcontent-%COMP%] {\\n    align-items: center !important;\\n  }\\n\\n  .cursor-move[_ngcontent-%COMP%] {\\n    cursor: move !important;\\n  }\\n\\n  .w-8[_ngcontent-%COMP%] {\\n    width: 2rem !important;\\n  }\\n\\n  .left-0[_ngcontent-%COMP%] {\\n    left: 0px !important;\\n  }\\n\\n  .inset-y-0[_ngcontent-%COMP%] {\\n    top: 0px !important;\\n    bottom: 0px !important;\\n  }\\n\\n  .icon-size-5[_ngcontent-%COMP%] {\\n    width: 1.25rem !important;\\n    height: 1.25rem !important;\\n    min-width: 1.25rem !important;\\n    min-height: 1.25rem !important;\\n    font-size: 1.25rem !important;\\n    line-height: 1.25rem !important;\\n  }\\n\\n  .mat-icon[_ngcontent-%COMP%] {\\n    display: inline-flex !important;\\n    align-items: center;\\n    justify-content: center;\\n    width: 24px;\\n    min-width: 24px;\\n    height: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n    -webkit-appearance: none !important;\\n  }\\n\\n  .text-hint[_ngcontent-%COMP%] {\\n    --tw-text-opacity: 1 !important;\\n    color: rgba(148, 163, 184, var(--tw-text-opacity)) !important;\\n  }\\n\\n  .bg-gray-100[_ngcontent-%COMP%]:hover {\\n    background-color: rgb(241 245 249);\\n  }\\n\\n  .leading-none[_ngcontent-%COMP%] {\\n    line-height: 1 !important;\\n  }\\n\\n  .-ml-2\\\\.5[_ngcontent-%COMP%] {\\n    margin-left: -0.625rem !important;\\n  }\\n\\n  .mr-2[_ngcontent-%COMP%] {\\n    margin-right: 0.5rem !important;\\n  }\\n\\n  .mat-button[_ngcontent-%COMP%]   .mat-button-wrapper[_ngcontent-%COMP%], .mat-fab[_ngcontent-%COMP%]   .mat-button-wrapper[_ngcontent-%COMP%], .mat-flat-button[_ngcontent-%COMP%]   .mat-button-wrapper[_ngcontent-%COMP%], .mat-icon-button[_ngcontent-%COMP%]   .mat-button-wrapper[_ngcontent-%COMP%], .mat-mini-fab[_ngcontent-%COMP%]   .mat-button-wrapper[_ngcontent-%COMP%], .mat-raised-button[_ngcontent-%COMP%]   .mat-button-wrapper[_ngcontent-%COMP%], .mat-stroked-button[_ngcontent-%COMP%]   .mat-button-wrapper[_ngcontent-%COMP%] {\\n    position: relative;\\n    display: inline-flex !important;\\n    align-items: center;\\n    justify-content: center;\\n    height: 100%;\\n    z-index: 2;\\n  }\\n\\n  .pr-7[_ngcontent-%COMP%] {\\n    padding-right: 1.75rem !important;\\n  }\\n\\n  .items-center[_ngcontent-%COMP%] {\\n    align-items: center !important;\\n  }\\n\\n  .min-w-0[_ngcontent-%COMP%] {\\n    min-width: 0px !important;\\n  }\\n\\n  .h-full[_ngcontent-%COMP%] {\\n    height: 100% !important;\\n  }\\n\\n  .link-informe[_ngcontent-%COMP%] {\\n    color: inherit;\\n    text-decoration: inherit;\\n  }\\n\\n  .truncate[_ngcontent-%COMP%] {\\n    overflow: hidden !important;\\n    text-overflow: ellipsis !important;\\n    white-space: nowrap !important;\\n  }\\n\\n  .w-4[_ngcontent-%COMP%] {\\n    width: 1rem !important;\\n  }\\n\\n  .h-4[_ngcontent-%COMP%] {\\n    height: 1rem !important;\\n  }\\n\\n  .mr-3[_ngcontent-%COMP%] {\\n    margin-right: 0.75rem !important;\\n  }\\n\\n  .text-sm[_ngcontent-%COMP%] {\\n    font-size: 0.75rem !important;\\n  }\\n\\n  .whitespace-nowrap[_ngcontent-%COMP%] {\\n    white-space: nowrap !important;\\n  }\\n\\n  .text-secondary[_ngcontent-%COMP%] {\\n    --tw-text-opacity: 1 !important;\\n    color: rgba(100, 116, 139, var(--tw-text-opacity)) !important;\\n  }\\n\\n  .icon-size-4[_ngcontent-%COMP%] {\\n    width: 1rem !important;\\n    height: 1rem !important;\\n    min-width: 1rem !important;\\n    min-height: 1rem !important;\\n    font-size: 1rem !important;\\n    line-height: 1rem !important;\\n  }\\n\\n  .text-green-600[_ngcontent-%COMP%] {\\n    --tw-text-opacity: 1 !important;\\n    color: rgb(22 163 74 / var(--tw-text-opacity)) !important;\\n  }\\n\\n  .flex-auto[_ngcontent-%COMP%] {\\n    flex: 1 1 auto !important;\\n  }\\n\\n  .bg-primary[_ngcontent-%COMP%] {\\n    --tw-bg-opacity: 1 !important;\\n    background-color: rgba(79, 70, 229, var(--tw-bg-opacity)) !important;\\n  }\\n\\n  .flex-0[_ngcontent-%COMP%] {\\n    flex: 0 0 auto !important;\\n  }\\n\\n  .w-1[_ngcontent-%COMP%] {\\n    width: 0.25rem !important;\\n  }\\n\\n  .z-10[_ngcontent-%COMP%] {\\n    z-index: 10 !important;\\n  }\\n\\n  .-bottom-px[_ngcontent-%COMP%] {\\n    bottom: -1px !important;\\n  }\\n\\n  .-top-px[_ngcontent-%COMP%] {\\n    top: -1px !important;\\n  }\\n\\n  .right-0[_ngcontent-%COMP%] {\\n    right: 0px !important;\\n  }\\n\\n  .indication[_ngcontent-%COMP%] {\\n    display: none;\\n    border-top-right-radius: 10px;\\n    border-bottom-right-radius: 10px;\\n  }\\n\\n  .bg-gray-100[_ngcontent-%COMP%]:hover    + .indication[_ngcontent-%COMP%] {\\n    display: block !important;\\n  }\\n\\n    .mat-form-field-flex > .mat-form-field-infix {\\n    padding: 0.3em 0px !important;\\n  }\\n\\n    .mat-form-field-label-wrapper {\\n    top: -1.5em;\\n  }\\n\\n   \\n    .mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float\\n    .mat-form-field-label {\\n    transform: translateY(-1.1em) scale(0.75);\\n    width: 133.33333%;\\n  }\\n\\n  .icon-form[_ngcontent-%COMP%] {\\n    color: rgba(148, 163, 184, 1) !important;\\n    margin-right: 12px;\\n  }\\n\\n    .mat-step-header .mat-step-icon-selected, .mat-step-header[_ngcontent-%COMP%]   .mat-step-icon-state-done[_ngcontent-%COMP%], .mat-step-header[_ngcontent-%COMP%]   .mat-step-icon-state-edit[_ngcontent-%COMP%] {\\n    background-color: #4f46e5 !important;\\n    color: #ffffff !important;\\n  }\\n\\n  .justify-end[_ngcontent-%COMP%] {\\n    justify-content: flex-end !important;\\n  }\\n\\n  .next-save[_ngcontent-%COMP%] {\\n    background-color: #3e66e9;\\n  }\\n\\n  .back[_ngcontent-%COMP%] {\\n    background-color: #1e293b;\\n  }\\n\\n  .content-inputs[_ngcontent-%COMP%]   .mat-form-field[_ngcontent-%COMP%]    + .mat-form-field[_ngcontent-%COMP%] {\\n    margin-left: 8px;\\n  }\\n\\n  table[_ngcontent-%COMP%] {\\n    width: 100%;\\n    text-align: center;\\n  }\\n\\n  .card[_ngcontent-%COMP%] {\\n    box-shadow: 1px 1px 16px rgb(202, 202, 202);\\n    z-index: 100 !important;\\n  }\\n\\n  .projects-section-header[_ngcontent-%COMP%] {\\n    margin-top: -20px;\\n    margin-bottom: 50px;\\n  }\\n\\n  .btn-close[_ngcontent-%COMP%] {\\n    width: 5px !important;\\n    height: 5px !important;\\n    background-color: rgb(233, 65, 61);\\n    border-radius: 50%;\\n  }\\n\\n  .status[_ngcontent-%COMP%] {\\n    border-radius: 4px;\\n    align-items: center;\\n    padding: 4px 8px;\\n    font-size: 12px;\\n  }\\n\\n  .status[_ngcontent-%COMP%]:before {\\n    content: \\\"\\\";\\n    width: 4px;\\n    height: 4px;\\n    border-radius: 50%;\\n    margin-right: 4px;\\n  }\\n\\n  .status.active[_ngcontent-%COMP%] {\\n    color: #2ba972;\\n    background-color: rgba(43, 169, 114, 0.2);\\n  }\\n\\n  .status.active[_ngcontent-%COMP%]:before {\\n    background-color: #2ba972;\\n  }\\n\\n  .status.disabled-btn[_ngcontent-%COMP%] {\\n    color: #59719d;\\n    background-color: rgba(89, 113, 157, 0.2);\\n  }\\n\\n  .status.disabled-btn[_ngcontent-%COMP%]:before {\\n    background-color: #59719d;\\n  }\\n\\n  .img-user[_ngcontent-%COMP%] {\\n    width: 40px;\\n    height: 40px;\\n    object-fit: cover;\\n    border-radius: 50%;\\n    margin-right: 4 px;\\n    float: left;\\n  }\\n\\n  .alert-danger[_ngcontent-%COMP%] {\\n    margin-top: 15px;\\n    padding: 10px;\\n  }\\n\\n  .content[_ngcontent-%COMP%] {\\n    flex: 2;\\n    background-color: #fff;\\n    border-radius: 32px;\\n    padding: 32px 32px 10px 32px;\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    flex-direction: column;\\n  }\\n\\n  .table[_ngcontent-%COMP%] {\\n    border-spacing: 0 0.85rem !important;\\n    border-collapse: separate !important;\\n  }\\n\\n  .table[_ngcontent-%COMP%]   .dropdown[_ngcontent-%COMP%] {\\n    display: inline-block;\\n  }\\n\\n  .table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%], .table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\\n    vertical-align: middle;\\n    margin-bottom: 10px;\\n    border: none;\\n  }\\n\\n  .table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%], .table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\\n    border: none;\\n    font-size: 12px;\\n    letter-spacing: 1px;\\n    text-transform: uppercase;\\n    background: transparent;\\n  }\\n\\n  .table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\\n    background: #fff;\\n  }\\n\\n  .table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:first-child {\\n    border-top-left-radius: 10px;\\n    border-bottom-left-radius: 10px;\\n  }\\n\\n  .table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\\n    border-top-right-radius: 10px;\\n    border-bottom-right-radius: 10px;\\n  }\\n\\n  tr[_ngcontent-%COMP%] {\\n    box-shadow: 1px 1px 16px rgb(202, 202, 202);\\n    border-radius: 20px;\\n  }\\n\\n  table.dataTable.dtr-inline.collapsed[_ngcontent-%COMP%]    > tbody[_ngcontent-%COMP%]    > tr[role=\\\"row\\\"][_ngcontent-%COMP%]    > td[_ngcontent-%COMP%]:first-child:before, table.dataTable.dtr-inline.collapsed[_ngcontent-%COMP%]    > tbody[_ngcontent-%COMP%]    > tr[role=\\\"row\\\"][_ngcontent-%COMP%]    > th[_ngcontent-%COMP%]:first-child:before {\\n    top: 28px;\\n    left: 14px;\\n    border: none;\\n    box-shadow: none;\\n  }\\n\\n  table.dataTable.dtr-inline.collapsed[_ngcontent-%COMP%]    > tbody[_ngcontent-%COMP%]    > tr[role=\\\"row\\\"][_ngcontent-%COMP%]    > td[_ngcontent-%COMP%]:first-child, table.dataTable.dtr-inline.collapsed[_ngcontent-%COMP%]    > tbody[_ngcontent-%COMP%]    > tr[role=\\\"row\\\"][_ngcontent-%COMP%]    > th[_ngcontent-%COMP%]:first-child {\\n    padding-left: 48px;\\n  }\\n\\n  table.dataTable[_ngcontent-%COMP%]    > tbody[_ngcontent-%COMP%]    > tr.child[_ngcontent-%COMP%]   ul.dtr-details[_ngcontent-%COMP%] {\\n    width: 100%;\\n  }\\n\\n  table.dataTable[_ngcontent-%COMP%]    > tbody[_ngcontent-%COMP%]    > tr.child[_ngcontent-%COMP%]   span.dtr-title[_ngcontent-%COMP%] {\\n    min-width: 50%;\\n  }\\n\\n  table.dataTable.dtr-inline.collapsed[_ngcontent-%COMP%]    > tbody[_ngcontent-%COMP%]    > tr[_ngcontent-%COMP%]    > td.child[_ngcontent-%COMP%], table.dataTable.dtr-inline.collapsed[_ngcontent-%COMP%]    > tbody[_ngcontent-%COMP%]    > tr[_ngcontent-%COMP%]    > th.child[_ngcontent-%COMP%], table.dataTable.dtr-inline.collapsed[_ngcontent-%COMP%]    > tbody[_ngcontent-%COMP%]    > tr[_ngcontent-%COMP%]    > td.dataTables_empty[_ngcontent-%COMP%] {\\n    padding: 0.75rem 1rem 0.125rem;\\n  }\\n\\n  div.dataTables_wrapper[_ngcontent-%COMP%]   div.dataTables_length[_ngcontent-%COMP%]   label[_ngcontent-%COMP%], div.dataTables_wrapper[_ngcontent-%COMP%]   div.dataTables_filter[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\\n    margin-bottom: 0;\\n  }\\n\\n  @media (max-width: 767px) {\\n    div.dataTables_wrapper[_ngcontent-%COMP%]   div.dataTables_paginate[_ngcontent-%COMP%]   ul.pagination[_ngcontent-%COMP%] {\\n      justify-content: center !important;\\n      margin-top: 1rem;\\n    }\\n    .table-responsive[_ngcontent-%COMP%] {\\n      overflow-x: auto !important;\\n    }\\n  }\\n\\n  @media (min-width: 767px) {\\n    .table-responsive[_ngcontent-%COMP%] {\\n      overflow-x: initial !important;\\n    }\\n  }\\n\\n  @media (max-width: 420px) {\\n    .projects-section-header[_ngcontent-%COMP%] {\\n      margin-top: 10px !important;\\n      margin-bottom: 50px;\\n    }\\n  }\\n\\n  .dropdown-menu[_ngcontent-%COMP%] {\\n    padding: 0.25rem 0;\\n  }\\n\\n  .dropdown-item[_ngcontent-%COMP%] {\\n    padding: 0.5rem 1rem;\\n  }\\n\\n  .table[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\\n    color: #212529;\\n  }\\n\\n  .table[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover, .table[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:focus {\\n    text-decoration: none;\\n  }\\n\\n  table.dataTable[_ngcontent-%COMP%] {\\n    margin-top: 12px !important;\\n  }\\n\\n  .icon[_ngcontent-%COMP%]    > .bx[_ngcontent-%COMP%] {\\n    display: block;\\n    min-width: 1.5em;\\n    min-height: 1.5em;\\n    text-align: center;\\n    font-size: 1.0625rem;\\n  }\\n\\n  .click-table-edit[_ngcontent-%COMP%] {\\n    cursor: pointer;\\n  }\\n\\n  .mat-step-custom-click[_ngcontent-%COMP%] {\\n    top: 0;\\n    left: 0;\\n    width: 130px;\\n    height: 72px;\\n    position: absolute;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n  }\\n\\n  .example-card[_ngcontent-%COMP%] {\\n    box-sizing: border-box;\\n    max-width: 30%;\\n    margin: 8px;\\n  }\\n\\n  .img[_ngcontent-%COMP%] {\\n    cursor: pointer;\\n  }\\n\\n  .example-full-width[_ngcontent-%COMP%] {\\n    width: 100%;\\n    margin-top: 10px;\\n  }\\n\\n  .btn-m[_ngcontent-%COMP%] {\\n    margin-top: 10px;\\n    margin-bottom: 10px;\\n  }\\n\\n  .row-img[_ngcontent-%COMP%] {\\n    display: flex !important;\\n    flex-direction: row !important;\\n    flex-wrap: wrap !important;\\n    width: 100% !important;\\n  }\\n\\n  .column-img[_ngcontent-%COMP%] {\\n    display: flex !important;\\n    flex-direction: column !important;\\n    flex-basis: 100% !important;\\n    flex: 1 !important;\\n  }\\n\\n  .my-grid-tile[_ngcontent-%COMP%] {\\n    margin: 10px !important;\\n  }\\n\\n  .firma[_ngcontent-%COMP%] {\\n    border: 2px dotted #CCCCCC;\\n    border-radius: 5px;\\n    cursor: crosshair;\\n  }\\n\\n  #multiplicar[_ngcontent-%COMP%]{\\n    width: 70px;\\n    margin-right: 10px;\\n  }\"]\n  });\n  return ParticulasMagneticasComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}