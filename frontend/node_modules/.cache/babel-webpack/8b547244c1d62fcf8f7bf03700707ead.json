{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Type, TemplateRef, ComponentRef, ChangeDetectorRef, InjectionToken, Injectable, Optional, Directive, Input, ViewContainerRef, Component, ViewChild, EventEmitter, ChangeDetectionStrategy, Output, ContentChildren, Inject, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { AbstractControl, FormGroup, FormArray, FormControl, Validators } from '@angular/forms';\nimport { isObservable, merge, of, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, startWith, debounceTime, filter, switchMap, take, tap, map } from 'rxjs/operators';\nimport * as i2$1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i1 from '@angular/platform-browser';\nconst _c0 = [\"container\"];\n\nfunction FormlyField_ng_template_0_Template(rf, ctx) {}\n\nfunction FormlyGroup_formly_field_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"formly-field\", 1);\n  }\n\n  if (rf & 2) {\n    const f_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"field\", f_r1);\n  }\n}\n\nconst _c1 = [\"*\"];\nconst _c2 = [\"fieldComponent\"];\n\nfunction disableTreeValidityCall(form, callback) {\n  const _updateTreeValidity = form._updateTreeValidity.bind(form);\n\n  form._updateTreeValidity = () => {};\n\n  callback();\n  form._updateTreeValidity = _updateTreeValidity;\n}\n\nfunction getFieldId(formId, field, index) {\n  if (field.id) {\n    return field.id;\n  }\n\n  let type = field.type;\n\n  if (!type && field.template) {\n    type = 'template';\n  }\n\n  if (type instanceof Type) {\n    type = type.prototype.constructor.name;\n  }\n\n  return [formId, type, field.key, index].join('_');\n}\n\nfunction hasKey(field) {\n  return !isNil(field.key) && field.key !== '';\n}\n\nfunction getKeyPath(field) {\n  if (!hasKey(field)) {\n    return [];\n  }\n  /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n\n\n  if (field._keyPath?.key !== field.key) {\n    let path = [];\n\n    if (typeof field.key === 'string') {\n      const key = field.key.indexOf('[') === -1 ? field.key : field.key.replace(/\\[(\\w+)\\]/g, '.$1');\n      path = key.indexOf('.') !== -1 ? key.split('.') : [key];\n    } else if (Array.isArray(field.key)) {\n      path = field.key.slice(0);\n    } else {\n      path = [`${field.key}`];\n    }\n\n    defineHiddenProp(field, '_keyPath', {\n      key: field.key,\n      path\n    });\n  }\n\n  return field._keyPath.path.slice(0);\n}\n\nconst FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\n\nfunction assignFieldValue(field, value) {\n  let paths = getKeyPath(field);\n\n  if (paths.length === 0) {\n    return;\n  }\n\n  let root = field;\n\n  while (root.parent) {\n    root = root.parent;\n    paths = [...getKeyPath(root), ...paths];\n  }\n\n  if (value === undefined && field.resetOnHide) {\n    const k = paths.pop();\n    const m = paths.reduce((model, path) => model[path] || {}, root.model);\n    delete m[k];\n    return;\n  }\n\n  assignModelValue(root.model, paths, value);\n}\n\nfunction assignModelValue(model, paths, value) {\n  for (let i = 0; i < paths.length - 1; i++) {\n    const path = paths[i];\n\n    if (!model[path] || !isObject(model[path])) {\n      model[path] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n    }\n\n    model = model[path];\n  }\n\n  model[paths[paths.length - 1]] = clone(value);\n}\n\nfunction getFieldValue(field) {\n  let model = field.parent ? field.parent.model : field.model;\n\n  for (const path of getKeyPath(field)) {\n    if (!model) {\n      return model;\n    }\n\n    model = model[path];\n  }\n\n  return model;\n}\n\nfunction reverseDeepMerge(dest, ...args) {\n  args.forEach(src => {\n    for (const srcArg in src) {\n      if (isNil(dest[srcArg]) || isBlankString(dest[srcArg])) {\n        dest[srcArg] = clone(src[srcArg]);\n      } else if (objAndSameType(dest[srcArg], src[srcArg])) {\n        reverseDeepMerge(dest[srcArg], src[srcArg]);\n      }\n    }\n  });\n  return dest;\n} // check a value is null or undefined\n\n\nfunction isNil(value) {\n  return value == null;\n}\n\nfunction isUndefined(value) {\n  return value === undefined;\n}\n\nfunction isBlankString(value) {\n  return value === '';\n}\n\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n\nfunction objAndSameType(obj1, obj2) {\n  return isObject(obj1) && isObject(obj2) && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2) && !(Array.isArray(obj1) || Array.isArray(obj2));\n}\n\nfunction isObject(x) {\n  return x != null && typeof x === 'object';\n}\n\nfunction isPromise(obj) {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction clone(value) {\n  if (!isObject(value) || isObservable(value) || value instanceof TemplateRef ||\n  /* instanceof SafeHtmlImpl */\n  value.changingThisBreaksApplicationSecurity || ['RegExp', 'FileList', 'File', 'Blob'].indexOf(value.constructor.name) !== -1) {\n    return value;\n  }\n\n  if (value instanceof Set) {\n    return new Set(value);\n  }\n\n  if (value instanceof Map) {\n    return new Map(value);\n  } // https://github.com/moment/moment/blob/master/moment.js#L252\n\n\n  if (value._isAMomentObject && isFunction(value.clone)) {\n    return value.clone();\n  }\n\n  if (value instanceof AbstractControl) {\n    return null;\n  }\n\n  if (value instanceof Date) {\n    return new Date(value.getTime());\n  }\n\n  if (Array.isArray(value)) {\n    return value.slice(0).map(v => clone(v));\n  } // best way to clone a js object maybe\n  // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance\n\n\n  const proto = Object.getPrototypeOf(value);\n  let c = Object.create(proto);\n  c = Object.setPrototypeOf(c, proto); // need to make a deep copy so we dont use Object.assign\n  // also Object.assign wont copy property descriptor exactly\n\n  return Object.keys(value).reduce((newVal, prop) => {\n    const propDesc = Object.getOwnPropertyDescriptor(value, prop);\n\n    if (propDesc.get) {\n      Object.defineProperty(newVal, prop, propDesc);\n    } else {\n      newVal[prop] = clone(value[prop]);\n    }\n\n    return newVal;\n  }, c);\n}\n\nfunction defineHiddenProp(field, prop, defaultValue) {\n  Object.defineProperty(field, prop, {\n    enumerable: false,\n    writable: true,\n    configurable: true\n  });\n  field[prop] = defaultValue;\n}\n\nfunction observeDeep(source, paths, setFn) {\n  let observers = [];\n\n  const unsubscribe = () => {\n    observers.forEach(observer => observer());\n    observers = [];\n  };\n\n  const observer = observe(source, paths, ({\n    firstChange,\n    currentValue\n  }) => {\n    !firstChange && setFn();\n    unsubscribe();\n\n    if (isObject(currentValue) && currentValue.constructor.name === 'Object') {\n      Object.keys(currentValue).forEach(prop => {\n        observers.push(observeDeep(source, [...paths, prop], setFn));\n      });\n    }\n  });\n  return () => {\n    observer.unsubscribe();\n    unsubscribe();\n  };\n}\n\nfunction observe(o, paths, setFn) {\n  if (!o._observers) {\n    defineHiddenProp(o, '_observers', {});\n  }\n\n  let target = o;\n\n  for (let i = 0; i < paths.length - 1; i++) {\n    if (!target[paths[i]] || !isObject(target[paths[i]])) {\n      target[paths[i]] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n    }\n\n    target = target[paths[i]];\n  }\n\n  const key = paths[paths.length - 1];\n  const prop = paths.join('.');\n\n  if (!o._observers[prop]) {\n    o._observers[prop] = {\n      value: target[key],\n      onChange: []\n    };\n  }\n\n  const state = o._observers[prop];\n\n  if (target[key] !== state.value) {\n    state.value = target[key];\n  }\n\n  if (state.onChange.indexOf(setFn) === -1) {\n    state.onChange.push(setFn);\n    setFn({\n      currentValue: state.value,\n      firstChange: true\n    });\n\n    if (state.onChange.length >= 1) {\n      const {\n        enumerable\n      } = Object.getOwnPropertyDescriptor(target, key) || {\n        enumerable: true\n      };\n      Object.defineProperty(target, key, {\n        enumerable,\n        configurable: true,\n        get: () => state.value,\n        set: currentValue => {\n          if (currentValue !== state.value) {\n            const previousValue = state.value;\n            state.value = currentValue;\n            state.onChange.forEach(changeFn => changeFn({\n              previousValue,\n              currentValue,\n              firstChange: false\n            }));\n          }\n        }\n      });\n    }\n  }\n\n  return {\n    setValue(value) {\n      state.value = value;\n    },\n\n    unsubscribe() {\n      state.onChange = state.onChange.filter(changeFn => changeFn !== setFn);\n\n      if (state.onChange.length === 0) {\n        delete o._observers[prop];\n      }\n    }\n\n  };\n}\n\nfunction getField(f, key) {\n  key = Array.isArray(key) ? key.join('.') : key;\n\n  if (!f.fieldGroup) {\n    return undefined;\n  }\n\n  for (let i = 0, len = f.fieldGroup.length; i < len; i++) {\n    const c = f.fieldGroup[i];\n    const k = Array.isArray(c.key) ? c.key.join('.') : c.key;\n\n    if (k === key) {\n      return c;\n    }\n\n    if (c.fieldGroup && (isNil(k) || key.indexOf(`${k}.`) === 0)) {\n      const field = getField(c, isNil(k) ? key : key.slice(k.length + 1));\n\n      if (field) {\n        return field;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction markFieldForCheck(field) {\n  field._componentRefs?.forEach(ref => {\n    // NOTE: we cannot use ref.changeDetectorRef, see https://github.com/ngx-formly/ngx-formly/issues/2191\n    if (ref instanceof ComponentRef) {\n      const changeDetectorRef = ref.injector.get(ChangeDetectorRef);\n      changeDetectorRef.markForCheck();\n    } else {\n      ref.markForCheck();\n    }\n  });\n}\n/**\n * An InjectionToken for registering additional formly config options (types, wrappers ...).\n */\n\n\nconst FORMLY_CONFIG = new InjectionToken('FORMLY_CONFIG');\n/**\n * Maintains list of formly config options. This can be used to register new field type.\n */\n\nclass FormlyConfig {\n  constructor() {\n    this.types = {};\n    this.validators = {};\n    this.wrappers = {};\n    this.messages = {};\n    this.extras = {\n      checkExpressionOn: 'modelChange',\n      lazyRender: true,\n      resetFieldOnHide: true,\n      renderFormlyFieldElement: true,\n\n      showError(field) {\n        return field.formControl?.invalid && (field.formControl?.touched || field.options.parentForm?.submitted || !!field.field.validation?.show);\n      }\n\n    };\n    this.extensions = {};\n    this.presets = {};\n    this.extensionsByPriority = {};\n  }\n\n  addConfig(config) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n\n    if (config.extensions) {\n      this.setSortedExtensions(config.extensions);\n    }\n\n    if (config.extras) {\n      this.extras = { ...this.extras,\n        ...config.extras\n      };\n    }\n\n    if (config.presets) {\n      this.presets = { ...this.presets,\n        ...config.presets.reduce((acc, curr) => ({ ...acc,\n          [curr.name]: curr.config\n        }), {})\n      };\n    }\n  }\n  /**\n   * Allows you to specify a custom type which you can use in your field configuration.\n   * You can pass an object of options, or an array of objects of options.\n   */\n\n\n  setType(options) {\n    if (Array.isArray(options)) {\n      options.forEach(option => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = {\n          name: options.name\n        };\n      }\n\n      ['component', 'extends', 'defaultOptions', 'wrappers'].forEach(prop => {\n        if (options.hasOwnProperty(prop)) {\n          this.types[options.name][prop] = options[prop];\n        }\n      });\n    }\n  }\n\n  getType(name, throwIfNotFound = false) {\n    if (name instanceof Type) {\n      return {\n        component: name,\n        name: name.prototype.constructor.name\n      };\n    }\n\n    if (!this.types[name]) {\n      if (throwIfNotFound) {\n        throw new Error(`[Formly Error] The type \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n      }\n\n      return null;\n    }\n\n    this.mergeExtendedType(name);\n    return this.types[name];\n  }\n  /** @ignore */\n\n\n  getMergedField(field = {}) {\n    const type = this.getType(field.type);\n\n    if (!type) {\n      return;\n    }\n\n    if (type.defaultOptions) {\n      reverseDeepMerge(field, type.defaultOptions);\n    }\n\n    const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;\n\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field?.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        const defaultOptions = this.getType(option).defaultOptions;\n\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    const componentRef = this.resolveFieldTypeRef(field);\n\n    if (componentRef?.instance?.defaultOptions) {\n      reverseDeepMerge(field, componentRef.instance.defaultOptions);\n    }\n\n    if (!field.wrappers && type.wrappers) {\n      field.wrappers = [...type.wrappers];\n    }\n  }\n  /** @ignore @internal */\n\n\n  resolveFieldTypeRef(field = {}) {\n    const type = this.getType(field.type);\n\n    if (!type) {\n      return null;\n    }\n\n    if (!type.component || type._componentRef) {\n      return type._componentRef;\n    }\n\n    const {\n      _viewContainerRef,\n      _injector\n    } = field.options;\n\n    if (!_viewContainerRef || !_injector) {\n      return null;\n    }\n\n    const componentRef = _viewContainerRef.createComponent(type.component, {\n      injector: _injector\n    });\n\n    defineHiddenProp(type, '_componentRef', componentRef);\n\n    try {\n      componentRef.destroy();\n    } catch (e) {\n      console.error(`An error occurred while destroying the Formly component type \"${field.type}\"`, e);\n    }\n\n    return type._componentRef;\n  }\n\n  setWrapper(options) {\n    this.wrappers[options.name] = options;\n\n    if (options.types) {\n      options.types.forEach(type => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name) {\n    if (name instanceof Type) {\n      return {\n        component: name,\n        name: name.prototype.constructor.name\n      };\n    }\n\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] The wrapper \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n    }\n\n    return this.wrappers[name];\n  }\n  /** @ignore */\n\n\n  setTypeWrapper(type, name) {\n    if (!this.types[type]) {\n      this.types[type] = {};\n    }\n\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n\n    if (this.types[type].wrappers.indexOf(name) === -1) {\n      this.types[type].wrappers.push(name);\n    }\n  }\n\n  setValidator(options) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name) {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] The validator \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name, message) {\n    this.messages[name] = message;\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const deprecated = {\n        minlength: 'minLength',\n        maxlength: 'maxLength'\n      };\n\n      if (deprecated[name]) {\n        console.warn(`Formly deprecation: passing validation messages key '${name}' is deprecated since v6.0, use '${deprecated[name]}' instead.`);\n        this.messages[deprecated[name]] = message;\n      }\n    }\n  }\n\n  getValidatorMessage(name) {\n    return this.messages[name];\n  }\n\n  setSortedExtensions(extensionOptions) {\n    // insert new extensions, grouped by priority\n    extensionOptions.forEach(extensionOption => {\n      const priority = extensionOption.priority ?? 1;\n      this.extensionsByPriority[priority] = { ...this.extensionsByPriority[priority],\n        [extensionOption.name]: extensionOption.extension\n      };\n    }); // flatten extensions object with sorted keys\n\n    this.extensions = Object.keys(this.extensionsByPriority).map(Number).sort((a, b) => a - b).reduce((acc, prio) => ({ ...acc,\n      ...this.extensionsByPriority[prio]\n    }), {});\n  }\n\n  mergeExtendedType(name) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n\n}\n\nFormlyConfig.ɵfac = function FormlyConfig_Factory(t) {\n  return new (t || FormlyConfig)();\n};\n\nFormlyConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FormlyConfig,\n  factory: FormlyConfig.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyConfig, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nclass FormlyFormBuilder {\n  constructor(config, injector, viewContainerRef, parentForm) {\n    this.config = config;\n    this.injector = injector;\n    this.viewContainerRef = viewContainerRef;\n    this.parentForm = parentForm;\n  }\n\n  buildForm(form, fieldGroup = [], model, options) {\n    this.build({\n      fieldGroup,\n      model,\n      form,\n      options\n    });\n  }\n\n  build(field) {\n    if (!this.config.extensions.core) {\n      throw new Error('NgxFormly: missing `forRoot()` call. use `forRoot()` when registering the `FormlyModule`.');\n    }\n\n    if (!field.parent) {\n      this._setOptions(field);\n\n      disableTreeValidityCall(field.form, () => {\n        this._build(field);\n\n        const options = field.options;\n        options.checkExpressions?.(field, true);\n        options.detectChanges?.(field);\n      });\n    } else {\n      this._build(field);\n    }\n  }\n\n  _build(field) {\n    if (!field) {\n      return;\n    }\n\n    const extensions = Object.values(this.config.extensions);\n    extensions.forEach(extension => extension.prePopulate?.(field));\n    extensions.forEach(extension => extension.onPopulate?.(field));\n    field.fieldGroup?.forEach(f => this._build(f));\n    extensions.forEach(extension => extension.postPopulate?.(field));\n  }\n\n  _setOptions(field) {\n    field.form = field.form || new FormGroup({});\n    field.model = field.model || {};\n    field.options = field.options || {};\n    const options = field.options;\n\n    if (!options._viewContainerRef) {\n      defineHiddenProp(options, '_viewContainerRef', this.viewContainerRef);\n    }\n\n    if (!options._injector) {\n      defineHiddenProp(options, '_injector', this.injector);\n    }\n\n    if (!options.build) {\n      options._buildForm = () => {\n        console.warn(`Formly: 'options._buildForm' is deprecated since v6.0, use 'options.build' instead.`);\n        this.build(field);\n      };\n\n      options.build = (f = field) => {\n        this.build(f);\n        return f;\n      };\n    }\n\n    if (!options.parentForm && this.parentForm) {\n      defineHiddenProp(options, 'parentForm', this.parentForm);\n      observe(options, ['parentForm', 'submitted'], ({\n        firstChange\n      }) => {\n        if (!firstChange) {\n          options.checkExpressions(field);\n          options.detectChanges(field);\n        }\n      });\n    }\n  }\n\n}\n\nFormlyFormBuilder.ɵfac = function FormlyFormBuilder_Factory(t) {\n  return new (t || FormlyFormBuilder)(i0.ɵɵinject(FormlyConfig), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i0.ViewContainerRef, 8), i0.ɵɵinject(i2.FormGroupDirective, 8));\n};\n\nFormlyFormBuilder.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FormlyFormBuilder,\n  factory: FormlyFormBuilder.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyFormBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: FormlyConfig\n    }, {\n      type: i0.Injector\n    }, {\n      type: i0.ViewContainerRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nfunction unregisterControl(field, emitEvent = false) {\n  const control = field.formControl;\n  const fieldIndex = control._fields ? control._fields.indexOf(field) : -1;\n\n  if (fieldIndex !== -1) {\n    control._fields.splice(fieldIndex, 1);\n  }\n\n  const form = control.parent;\n\n  if (!form) {\n    return;\n  }\n\n  const opts = {\n    emitEvent\n  };\n\n  if (form instanceof FormArray) {\n    const key = form.controls.findIndex(c => c === control);\n\n    if (key !== -1) {\n      form.removeAt(key, opts);\n    }\n  } else if (form instanceof FormGroup) {\n    const paths = getKeyPath(field);\n    const key = paths[paths.length - 1];\n\n    if (form.get([key]) === control) {\n      form.removeControl(key, opts);\n    }\n  }\n\n  control.setParent(null);\n}\n\nfunction findControl(field) {\n  if (field.formControl) {\n    return field.formControl;\n  }\n\n  if (field.shareFormControl === false) {\n    return null;\n  }\n\n  return field.form?.get(getKeyPath(field));\n}\n\nfunction registerControl(field, control, emitEvent = false) {\n  control = control || field.formControl;\n\n  if (!control._fields) {\n    defineHiddenProp(control, '_fields', []);\n  }\n\n  if (control._fields.indexOf(field) === -1) {\n    control._fields.push(field);\n  }\n\n  if (!field.formControl && control) {\n    defineHiddenProp(field, 'formControl', control);\n    control.setValidators(null);\n    control.setAsyncValidators(null);\n    field.props.disabled = !!field.props.disabled;\n    const disabledObserver = observe(field, ['props', 'disabled'], ({\n      firstChange,\n      currentValue\n    }) => {\n      if (!firstChange) {\n        currentValue ? field.formControl.disable() : field.formControl.enable();\n      }\n    });\n\n    if (control instanceof FormControl) {\n      control.registerOnDisabledChange(disabledObserver.setValue);\n    }\n  }\n\n  if (!field.form || !hasKey(field)) {\n    return;\n  }\n\n  let form = field.form;\n  const paths = getKeyPath(field);\n  const value = getFieldValue(field);\n\n  if (!(isNil(control.value) && isNil(value)) && control.value !== value && control instanceof FormControl) {\n    control.patchValue(value);\n  }\n\n  for (let i = 0; i < paths.length - 1; i++) {\n    const path = paths[i];\n\n    if (!form.get([path])) {\n      form.setControl(path, new FormGroup({}), {\n        emitEvent\n      });\n    }\n\n    form = form.get([path]);\n  }\n\n  const key = paths[paths.length - 1];\n\n  if (!field._hide && form.get([key]) !== control) {\n    form.setControl(key, control, {\n      emitEvent\n    });\n  }\n}\n\nfunction updateValidity(c, onlySelf = false) {\n  const status = c.status;\n  const value = c.value;\n  c.updateValueAndValidity({\n    emitEvent: false,\n    onlySelf\n  });\n\n  if (status !== c.status) {\n    c.statusChanges.emit(c.status);\n  }\n\n  if (value !== c.value) {\n    c.valueChanges.emit(c.value);\n  }\n}\n\nfunction clearControl(form) {\n  delete form?._fields;\n  form.setValidators(null);\n  form.setAsyncValidators(null);\n\n  if (form instanceof FormGroup || form instanceof FormArray) {\n    Object.values(form.controls).forEach(c => clearControl(c));\n  }\n}\n\nclass FormlyTemplate {\n  constructor(ref) {\n    this.ref = ref;\n  }\n\n  ngOnChanges() {\n    this.name = this.name || 'formly-group';\n  }\n\n}\n\nFormlyTemplate.ɵfac = function FormlyTemplate_Factory(t) {\n  return new (t || FormlyTemplate)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nFormlyTemplate.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: FormlyTemplate,\n  selectors: [[\"\", \"formlyTemplate\", \"\"]],\n  inputs: {\n    name: [\"formlyTemplate\", \"name\"]\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyTemplate, [{\n    type: Directive,\n    args: [{\n      selector: '[formlyTemplate]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, {\n    name: [{\n      type: Input,\n      args: ['formlyTemplate']\n    }]\n  });\n})(); // workarround for https://github.com/angular/angular/issues/43227#issuecomment-904173738\n\n\nclass FormlyFieldTemplates {}\n\nFormlyFieldTemplates.ɵfac = function FormlyFieldTemplates_Factory(t) {\n  return new (t || FormlyFieldTemplates)();\n};\n\nFormlyFieldTemplates.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FormlyFieldTemplates,\n  factory: FormlyFieldTemplates.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyFieldTemplates, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * The `<formly-field>` component is used to render the UI widget (layout + type) of a given `field`.\n */\n\n\nclass FormlyField {\n  constructor(config, renderer, _elementRef, hostContainerRef, form) {\n    this.config = config;\n    this.renderer = renderer;\n    this._elementRef = _elementRef;\n    this.hostContainerRef = hostContainerRef;\n    this.form = form;\n    this.hostObservers = [];\n    this.componentRefs = [];\n    this.hooksObservers = [];\n    this.detectFieldBuild = false;\n\n    this.valueChangesUnsubscribe = () => {};\n  }\n\n  get containerRef() {\n    return this.config.extras.renderFormlyFieldElement ? this.viewContainerRef : this.hostContainerRef;\n  }\n\n  get elementRef() {\n    if (this.config.extras.renderFormlyFieldElement) {\n      return this._elementRef;\n    }\n\n    if (this.componentRefs?.[0] instanceof ComponentRef) {\n      return this.componentRefs[0].location;\n    }\n\n    return null;\n  }\n\n  ngAfterContentInit() {\n    this.triggerHook('afterContentInit');\n  }\n\n  ngAfterViewInit() {\n    this.triggerHook('afterViewInit');\n  }\n\n  ngDoCheck() {\n    if (this.detectFieldBuild && this.field && this.field.options) {\n      this.render();\n    }\n  }\n\n  ngOnInit() {\n    this.triggerHook('onInit');\n  }\n\n  ngOnChanges(changes) {\n    this.triggerHook('onChanges', changes);\n  }\n\n  ngOnDestroy() {\n    this.resetRefs(this.field);\n    this.hostObservers.forEach(hostObserver => hostObserver.unsubscribe());\n    this.hooksObservers.forEach(unsubscribe => unsubscribe());\n    this.valueChangesUnsubscribe();\n    this.triggerHook('onDestroy');\n  }\n\n  renderField(containerRef, f, wrappers = []) {\n    if (this.containerRef === containerRef) {\n      this.resetRefs(this.field);\n      this.containerRef.clear();\n      wrappers = this.field?.wrappers;\n    }\n\n    if (wrappers?.length > 0) {\n      const [wrapper, ...wps] = wrappers;\n      const {\n        component\n      } = this.config.getWrapper(wrapper);\n      const ref = containerRef.createComponent(component);\n      this.attachComponentRef(ref, f);\n      observe(ref.instance, ['fieldComponent'], ({\n        currentValue,\n        previousValue,\n        firstChange\n      }) => {\n        if (currentValue) {\n          if (previousValue && previousValue._lContainer === currentValue._lContainer) {\n            return;\n          }\n\n          const viewRef = previousValue ? previousValue.detach() : null;\n\n          if (viewRef && !viewRef.destroyed) {\n            currentValue.insert(viewRef);\n          } else {\n            this.renderField(currentValue, f, wps);\n          }\n\n          !firstChange && ref.changeDetectorRef.detectChanges();\n        }\n      });\n    } else if (f?.type) {\n      const inlineType = this.form?.templates?.find(ref => ref.name === f.type);\n      let ref;\n\n      if (inlineType) {\n        ref = containerRef.createEmbeddedView(inlineType.ref, {\n          $implicit: f\n        });\n      } else {\n        const {\n          component\n        } = this.config.getType(f.type, true);\n        ref = containerRef.createComponent(component);\n      }\n\n      this.attachComponentRef(ref, f);\n    }\n  }\n\n  triggerHook(name, changes) {\n    if (name === 'onInit' || name === 'onChanges' && changes.field && !changes.field.firstChange) {\n      this.valueChangesUnsubscribe = this.fieldChanges(this.field);\n    }\n\n    if (this.field?.hooks?.[name]) {\n      if (!changes || changes.field) {\n        const r = this.field.hooks[name](this.field);\n\n        if (isObservable(r) && ['onInit', 'afterContentInit', 'afterViewInit'].indexOf(name) !== -1) {\n          const sub = r.subscribe();\n          this.hooksObservers.push(() => sub.unsubscribe());\n        }\n      }\n    }\n\n    if (name === 'onChanges' && changes.field) {\n      this.resetRefs(changes.field.previousValue);\n      this.render();\n    }\n  }\n\n  attachComponentRef(ref, field) {\n    this.componentRefs.push(ref);\n\n    field._componentRefs.push(ref);\n\n    if (ref instanceof ComponentRef) {\n      Object.assign(ref.instance, {\n        field\n      });\n    }\n  }\n\n  render() {\n    if (!this.field) {\n      return;\n    } // require Formly build\n\n\n    if (!this.field.options) {\n      this.detectFieldBuild = true;\n      return;\n    }\n\n    this.detectFieldBuild = false;\n    this.hostObservers.forEach(hostObserver => hostObserver.unsubscribe());\n    this.hostObservers = [observe(this.field, ['hide'], ({\n      firstChange,\n      currentValue\n    }) => {\n      const containerRef = this.containerRef;\n\n      if (this.config.extras.lazyRender === false) {\n        firstChange && this.renderField(containerRef, this.field);\n\n        if (!firstChange || firstChange && currentValue) {\n          this.elementRef && this.renderer.setStyle(this.elementRef.nativeElement, 'display', currentValue ? 'none' : '');\n        }\n      } else {\n        if (currentValue) {\n          containerRef.clear();\n\n          if (this.field.className) {\n            this.renderer.removeAttribute(this.elementRef.nativeElement, 'class');\n          }\n        } else {\n          this.renderField(containerRef, this.field);\n\n          if (this.field.className) {\n            this.renderer.setAttribute(this.elementRef.nativeElement, 'class', this.field.className);\n          }\n        }\n      }\n\n      !firstChange && this.field.options.detectChanges(this.field);\n    }), observe(this.field, ['className'], ({\n      firstChange,\n      currentValue\n    }) => {\n      if ((!firstChange || firstChange && currentValue) && (!this.config.extras.lazyRender || this.field.hide !== true)) {\n        this.elementRef && this.renderer.setAttribute(this.elementRef.nativeElement, 'class', currentValue);\n      }\n    }), ...['touched', 'pristine', 'status'].map(prop => observe(this.field, ['formControl', prop], ({\n      firstChange\n    }) => !firstChange && markFieldForCheck(this.field)))];\n  }\n\n  resetRefs(field) {\n    if (field) {\n      if (field._componentRefs) {\n        field._componentRefs = field._componentRefs.filter(ref => this.componentRefs.indexOf(ref) === -1);\n      } else {\n        defineHiddenProp(this.field, '_componentRefs', []);\n      }\n    }\n\n    this.componentRefs = [];\n  }\n\n  fieldChanges(field) {\n    this.valueChangesUnsubscribe();\n\n    if (!field) {\n      return () => {};\n    }\n\n    const subscribes = [observeDeep(field, ['props'], () => field.options.detectChanges(field)), observeDeep(field.options, ['formState'], () => field.options.detectChanges(field))];\n\n    for (const key of Object.keys(field._expressions || {})) {\n      const expressionObserver = observe(field, ['_expressions', key], ({\n        currentValue,\n        previousValue\n      }) => {\n        if (previousValue?.subscription) {\n          previousValue.subscription.unsubscribe();\n          previousValue.subscription = null;\n        }\n\n        if (isObservable(currentValue.value$)) {\n          currentValue.subscription = currentValue.value$.subscribe();\n        }\n      });\n      subscribes.push(() => {\n        if (field._expressions[key]?.subscription) {\n          field._expressions[key].subscription.unsubscribe();\n        }\n\n        expressionObserver.unsubscribe();\n      });\n    }\n\n    for (const path of [['template'], ['fieldGroupClassName'], ['validation', 'show']]) {\n      const fieldObserver = observe(field, path, ({\n        firstChange\n      }) => !firstChange && field.options.detectChanges(field));\n      subscribes.push(() => fieldObserver.unsubscribe());\n    }\n\n    if (field.formControl && !field.fieldGroup) {\n      const control = field.formControl;\n      let valueChanges = control.valueChanges.pipe(distinctUntilChanged((x, y) => {\n        if (x !== y || Array.isArray(x) || isObject(x)) {\n          return false;\n        }\n\n        return true;\n      }));\n\n      if (control.value !== getFieldValue(field)) {\n        valueChanges = valueChanges.pipe(startWith(control.value));\n      }\n\n      const {\n        updateOn,\n        debounce\n      } = field.modelOptions;\n\n      if ((!updateOn || updateOn === 'change') && debounce?.default > 0) {\n        valueChanges = control.valueChanges.pipe(debounceTime(debounce.default));\n      }\n\n      const sub = valueChanges.subscribe(value => {\n        // workaround for https://github.com/angular/angular/issues/13792\n        if (control._fields?.length > 1 && control instanceof FormControl) {\n          control.patchValue(value, {\n            emitEvent: false,\n            onlySelf: true\n          });\n        }\n\n        field.parsers?.forEach(parserFn => value = parserFn(value));\n\n        if (value !== field.formControl.value) {\n          field.formControl.setValue(value);\n          return;\n        }\n\n        if (hasKey(field)) {\n          assignFieldValue(field, value);\n        }\n\n        field.options.fieldChanges.next({\n          value,\n          field,\n          type: 'valueChanges'\n        });\n      });\n      subscribes.push(() => sub.unsubscribe());\n    }\n\n    return () => subscribes.forEach(subscribe => subscribe());\n  }\n\n}\n\nFormlyField.ɵfac = function FormlyField_Factory(t) {\n  return new (t || FormlyField)(i0.ɵɵdirectiveInject(FormlyConfig), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(FormlyFieldTemplates, 8));\n};\n\nFormlyField.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: FormlyField,\n  selectors: [[\"formly-field\"]],\n  viewQuery: function FormlyField_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7, ViewContainerRef);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.viewContainerRef = _t.first);\n    }\n  },\n  inputs: {\n    field: \"field\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[\"container\", \"\"]],\n  template: function FormlyField_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, FormlyField_ng_template_0_Template, 0, 0, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n    }\n  },\n  styles: [\"[_nghost-%COMP%]:empty{display:none}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyField, [{\n    type: Component,\n    args: [{\n      selector: 'formly-field',\n      template: '<ng-template #container></ng-template>',\n      styles: [\":host:empty{display:none}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: FormlyConfig\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: FormlyFieldTemplates,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    field: [{\n      type: Input\n    }],\n    viewContainerRef: [{\n      type: ViewChild,\n      args: ['container', {\n        read: ViewContainerRef,\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * The `<form-form>` component is the main container of the form,\n * which takes care of managing the form state\n * and delegates the rendering of each field to `<formly-field>` component.\n */\n\n\nclass FormlyForm {\n  constructor(builder, config, ngZone, fieldTemplates) {\n    this.builder = builder;\n    this.config = config;\n    this.ngZone = ngZone;\n    this.fieldTemplates = fieldTemplates;\n    /** Event that is emitted when the model value is changed */\n\n    this.modelChange = new EventEmitter();\n    this.field = {\n      type: 'formly-group'\n    };\n    this._modelChangeValue = {};\n\n    this.valueChangesUnsubscribe = () => {};\n  }\n  /** The form instance which allow to track model value and validation status. */\n\n\n  set form(form) {\n    this.field.form = form;\n  }\n\n  get form() {\n    return this.field.form;\n  }\n  /** The model to be represented by the form. */\n\n\n  set model(model) {\n    if (this.config.extras.immutable && this._modelChangeValue === model) {\n      return;\n    }\n\n    this.setField({\n      model\n    });\n  }\n\n  get model() {\n    return this.field.model;\n  }\n  /** The field configurations for building the form. */\n\n\n  set fields(fieldGroup) {\n    this.setField({\n      fieldGroup\n    });\n  }\n\n  get fields() {\n    return this.field.fieldGroup;\n  }\n  /** Options for the form. */\n\n\n  set options(options) {\n    this.setField({\n      options\n    });\n  }\n\n  get options() {\n    return this.field.options;\n  }\n\n  set templates(templates) {\n    this.fieldTemplates.templates = templates;\n  }\n\n  ngDoCheck() {\n    if (this.config.extras.checkExpressionOn === 'changeDetectionCheck') {\n      this.checkExpressionChange();\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (changes.fields && this.form) {\n      clearControl(this.form);\n    }\n\n    if (changes.fields || changes.form || changes.model && this._modelChangeValue !== changes.model.currentValue) {\n      this.valueChangesUnsubscribe();\n      this.builder.build(this.field);\n      this.valueChangesUnsubscribe = this.valueChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this.valueChangesUnsubscribe();\n  }\n\n  checkExpressionChange() {\n    this.field.options.checkExpressions?.(this.field);\n  }\n\n  valueChanges() {\n    this.valueChangesUnsubscribe();\n    const sub = this.field.options.fieldChanges.pipe(filter(({\n      field,\n      type\n    }) => hasKey(field) && type === 'valueChanges'), switchMap(() => this.ngZone.onStable.asObservable().pipe(take(1)))).subscribe(() => this.ngZone.runGuarded(() => {\n      // runGuarded is used to keep in sync the expression changes\n      // https://github.com/ngx-formly/ngx-formly/issues/2095\n      this.checkExpressionChange();\n      this.modelChange.emit(this._modelChangeValue = clone(this.model));\n    }));\n    return () => sub.unsubscribe();\n  }\n\n  setField(field) {\n    if (this.config.extras.immutable) {\n      this.field = { ...this.field,\n        ...clone(field)\n      };\n    } else {\n      Object.keys(field).forEach(p => this.field[p] = field[p]);\n    }\n  }\n\n}\n\nFormlyForm.ɵfac = function FormlyForm_Factory(t) {\n  return new (t || FormlyForm)(i0.ɵɵdirectiveInject(FormlyFormBuilder), i0.ɵɵdirectiveInject(FormlyConfig), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(FormlyFieldTemplates));\n};\n\nFormlyForm.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: FormlyForm,\n  selectors: [[\"formly-form\"]],\n  contentQueries: function FormlyForm_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, FormlyTemplate, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n    }\n  },\n  inputs: {\n    form: \"form\",\n    model: \"model\",\n    fields: \"fields\",\n    options: \"options\"\n  },\n  outputs: {\n    modelChange: \"modelChange\"\n  },\n  features: [i0.ɵɵProvidersFeature([FormlyFormBuilder, FormlyFieldTemplates]), i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"field\"]],\n  template: function FormlyForm_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"formly-field\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"field\", ctx.field);\n    }\n  },\n  directives: [FormlyField],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyForm, [{\n    type: Component,\n    args: [{\n      selector: 'formly-form',\n      template: '<formly-field [field]=\"field\"></formly-field>',\n      providers: [FormlyFormBuilder, FormlyFieldTemplates],\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: FormlyFormBuilder\n    }, {\n      type: FormlyConfig\n    }, {\n      type: i0.NgZone\n    }, {\n      type: FormlyFieldTemplates\n    }];\n  }, {\n    form: [{\n      type: Input\n    }],\n    model: [{\n      type: Input\n    }],\n    fields: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    modelChange: [{\n      type: Output\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [FormlyTemplate]\n    }]\n  });\n})();\n/**\n * Allow to link the `field` HTML attributes (`id`, `name` ...) and Event attributes (`focus`, `blur` ...) to an element in the DOM.\n */\n\n\nclass FormlyAttributes {\n  constructor(renderer, elementRef, _document) {\n    this.renderer = renderer;\n    this.elementRef = elementRef;\n    this.uiAttributesCache = {};\n    /**\n     * HostBinding doesn't register listeners conditionally which may produce some perf issues.\n     *\n     * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1991\n     */\n\n    this.uiEvents = {\n      listeners: [],\n      events: ['click', 'keyup', 'keydown', 'keypress', 'focus', 'blur', 'change'],\n      callback: (eventName, $event) => {\n        switch (eventName) {\n          case 'focus':\n            return this.onFocus($event);\n\n          case 'blur':\n            return this.onBlur($event);\n\n          case 'change':\n            return this.onChange($event);\n\n          default:\n            return this.props[eventName](this.field, $event);\n        }\n      }\n    };\n    this.document = _document;\n  }\n\n  get props() {\n    return this.field.props || {};\n  }\n\n  get fieldAttrElements() {\n    return this.field?.['_elementRefs'] || [];\n  }\n\n  ngOnChanges(changes) {\n    if (changes.field) {\n      this.field.name && this.setAttribute('name', this.field.name);\n      this.uiEvents.listeners.forEach(listener => listener());\n      this.uiEvents.events.forEach(eventName => {\n        if (this.props?.[eventName] || ['focus', 'blur', 'change'].indexOf(eventName) !== -1) {\n          this.uiEvents.listeners.push(this.renderer.listen(this.elementRef.nativeElement, eventName, e => this.uiEvents.callback(eventName, e)));\n        }\n      });\n\n      if (this.props?.attributes) {\n        observe(this.field, ['props', 'attributes'], ({\n          currentValue,\n          previousValue\n        }) => {\n          if (previousValue) {\n            Object.keys(previousValue).forEach(attr => this.removeAttribute(attr));\n          }\n\n          if (currentValue) {\n            Object.keys(currentValue).forEach(attr => {\n              if (currentValue[attr] != null) {\n                this.setAttribute(attr, currentValue[attr]);\n              }\n            });\n          }\n        });\n      }\n\n      this.detachElementRef(changes.field.previousValue);\n      this.attachElementRef(changes.field.currentValue);\n\n      if (this.fieldAttrElements.length === 1) {\n        !this.id && this.field.id && this.setAttribute('id', this.field.id);\n        this.focusObserver = observe(this.field, ['focus'], ({\n          currentValue\n        }) => {\n          this.toggleFocus(currentValue);\n        });\n      }\n    }\n\n    if (changes.id) {\n      this.setAttribute('id', this.id);\n    }\n  }\n  /**\n   * We need to re-evaluate all the attributes on every change detection cycle, because\n   * by using a HostBinding we run into certain edge cases. This means that whatever logic\n   * is in here has to be super lean or we risk seriously damaging or destroying the performance.\n   *\n   * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317\n   * Material issue: https://github.com/angular/components/issues/14024\n   */\n\n\n  ngDoCheck() {\n    if (!this.uiAttributes) {\n      const element = this.elementRef.nativeElement;\n      this.uiAttributes = [...FORMLY_VALIDATORS, 'tabindex', 'placeholder', 'readonly', 'disabled', 'step'].filter(attr => !element.hasAttribute || !element.hasAttribute(attr));\n    }\n\n    this.uiAttributes.forEach(attr => {\n      const value = this.props[attr];\n\n      if (this.uiAttributesCache[attr] !== value && (!this.props.attributes || !this.props.attributes.hasOwnProperty(attr.toLowerCase()))) {\n        this.uiAttributesCache[attr] = value;\n\n        if (value || value === 0) {\n          this.setAttribute(attr, value === true ? attr : `${value}`);\n        } else {\n          this.removeAttribute(attr);\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.uiEvents.listeners.forEach(listener => listener());\n    this.detachElementRef(this.field);\n    this.focusObserver?.unsubscribe();\n  }\n\n  toggleFocus(value) {\n    const element = this.fieldAttrElements ? this.fieldAttrElements[0] : null;\n\n    if (!element || !element.nativeElement.focus) {\n      return;\n    }\n\n    const isFocused = !!this.document.activeElement && this.fieldAttrElements.some(({\n      nativeElement\n    }) => this.document.activeElement === nativeElement || nativeElement.contains(this.document.activeElement));\n\n    if (value && !isFocused) {\n      Promise.resolve().then(() => element.nativeElement.focus());\n    } else if (!value && isFocused) {\n      Promise.resolve().then(() => element.nativeElement.blur());\n    }\n  }\n\n  onFocus($event) {\n    this.focusObserver?.setValue(true);\n    this.props.focus?.(this.field, $event);\n  }\n\n  onBlur($event) {\n    this.focusObserver?.setValue(false);\n    this.props.blur?.(this.field, $event);\n  } // handle custom `change` event, for regular ones rely on DOM listener\n\n\n  onHostChange($event) {\n    if ($event instanceof Event) {\n      return;\n    }\n\n    this.onChange($event);\n  }\n\n  onChange($event) {\n    this.props.change?.(this.field, $event);\n    this.field.formControl?.markAsDirty();\n  }\n\n  attachElementRef(f) {\n    if (!f) {\n      return;\n    }\n\n    if (f['_elementRefs']?.indexOf(this.elementRef) === -1) {\n      f['_elementRefs'].push(this.elementRef);\n    } else {\n      defineHiddenProp(f, '_elementRefs', [this.elementRef]);\n    }\n  }\n\n  detachElementRef(f) {\n    const index = f?.['_elementRefs'] ? this.fieldAttrElements.indexOf(this.elementRef) : -1;\n\n    if (index !== -1) {\n      f['_elementRefs'].splice(index, 1);\n    }\n  }\n\n  setAttribute(attr, value) {\n    this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);\n  }\n\n  removeAttribute(attr) {\n    this.renderer.removeAttribute(this.elementRef.nativeElement, attr);\n  }\n\n}\n\nFormlyAttributes.ɵfac = function FormlyAttributes_Factory(t) {\n  return new (t || FormlyAttributes)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nFormlyAttributes.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: FormlyAttributes,\n  selectors: [[\"\", \"formlyAttributes\", \"\"]],\n  hostBindings: function FormlyAttributes_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"change\", function FormlyAttributes_change_HostBindingHandler($event) {\n        return ctx.onHostChange($event);\n      });\n    }\n  },\n  inputs: {\n    field: [\"formlyAttributes\", \"field\"],\n    id: \"id\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyAttributes, [{\n    type: Directive,\n    args: [{\n      selector: '[formlyAttributes]',\n      host: {\n        '(change)': 'onHostChange($event)'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    field: [{\n      type: Input,\n      args: ['formlyAttributes']\n    }],\n    id: [{\n      type: Input\n    }]\n  });\n})();\n\nclass FieldType {\n  get model() {\n    return this.field.model;\n  }\n\n  get form() {\n    return this.field.form;\n  }\n\n  get options() {\n    return this.field.options;\n  }\n\n  get key() {\n    return this.field.key;\n  }\n\n  get formControl() {\n    return this.field.formControl;\n  }\n\n  get props() {\n    return this.field.props || {};\n  }\n  /** @deprecated Use `props` instead. */\n\n\n  get to() {\n    return this.props;\n  }\n\n  get showError() {\n    return this.options.showError(this);\n  }\n\n  get id() {\n    return this.field.id;\n  }\n\n  get formState() {\n    return this.options.formState || {};\n  }\n\n}\n\nFieldType.ɵfac = function FieldType_Factory(t) {\n  return new (t || FieldType)();\n};\n\nFieldType.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: FieldType,\n  inputs: {\n    field: \"field\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FieldType, [{\n    type: Directive\n  }], null, {\n    field: [{\n      type: Input\n    }]\n  });\n})();\n/** @ignore */\n\n\nclass FormlyGroup extends FieldType {}\n\nFormlyGroup.ɵfac = /* @__PURE__ */function () {\n  let ɵFormlyGroup_BaseFactory;\n  return function FormlyGroup_Factory(t) {\n    return (ɵFormlyGroup_BaseFactory || (ɵFormlyGroup_BaseFactory = i0.ɵɵgetInheritedFactory(FormlyGroup)))(t || FormlyGroup);\n  };\n}();\n\nFormlyGroup.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: FormlyGroup,\n  selectors: [[\"formly-group\"]],\n  hostVars: 2,\n  hostBindings: function FormlyGroup_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.field.fieldGroupClassName || \"\");\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 2,\n  vars: 1,\n  consts: [[3, \"field\", 4, \"ngFor\", \"ngForOf\"], [3, \"field\"]],\n  template: function FormlyGroup_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵtemplate(0, FormlyGroup_formly_field_0_Template, 1, 1, \"formly-field\", 0);\n      i0.ɵɵprojection(1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.field.fieldGroup);\n    }\n  },\n  directives: [i2$1.NgForOf, FormlyField],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyGroup, [{\n    type: Component,\n    args: [{\n      selector: 'formly-group',\n      template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `,\n      host: {\n        '[class]': 'field.fieldGroupClassName || \"\"'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, null);\n})();\n/**\n * The `<formly-validation-message>` component renders the error message of a given `field`.\n */\n\n\nclass FormlyValidationMessage {\n  constructor(config) {\n    this.config = config;\n  }\n\n  ngOnChanges() {\n    const EXPR_VALIDATORS = FORMLY_VALIDATORS.map(v => `templateOptions.${v}`);\n    this.errorMessage$ = merge(this.field.formControl.statusChanges, !this.field.options ? of(null) : this.field.options.fieldChanges.pipe(filter(({\n      field,\n      type,\n      property\n    }) => {\n      return field === this.field && type === 'expressionChanges' && (property.indexOf('validation') !== -1 || EXPR_VALIDATORS.indexOf(property) !== -1);\n    }))).pipe(startWith(null), switchMap(() => isObservable(this.errorMessage) ? this.errorMessage : of(this.errorMessage)));\n  }\n\n  get errorMessage() {\n    const fieldForm = this.field.formControl;\n\n    for (const error in fieldForm.errors) {\n      if (fieldForm.errors.hasOwnProperty(error)) {\n        let message = this.config.getValidatorMessage(error);\n\n        if (isObject(fieldForm.errors[error])) {\n          if (fieldForm.errors[error].errorPath) {\n            return undefined;\n          }\n\n          if (fieldForm.errors[error].message) {\n            message = fieldForm.errors[error].message;\n          }\n        }\n\n        if (this.field.validation?.messages?.[error]) {\n          message = this.field.validation.messages[error];\n        }\n\n        if (this.field.validators?.[error]?.message) {\n          message = this.field.validators[error].message;\n        }\n\n        if (this.field.asyncValidators?.[error]?.message) {\n          message = this.field.asyncValidators[error].message;\n        }\n\n        if (typeof message === 'function') {\n          return message(fieldForm.errors[error], this.field);\n        }\n\n        return message;\n      }\n    }\n\n    return undefined;\n  }\n\n}\n\nFormlyValidationMessage.ɵfac = function FormlyValidationMessage_Factory(t) {\n  return new (t || FormlyValidationMessage)(i0.ɵɵdirectiveInject(FormlyConfig));\n};\n\nFormlyValidationMessage.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: FormlyValidationMessage,\n  selectors: [[\"formly-validation-message\"]],\n  inputs: {\n    field: \"field\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 3,\n  template: function FormlyValidationMessage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtext(0);\n      i0.ɵɵpipe(1, \"async\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(1, 1, ctx.errorMessage$));\n    }\n  },\n  pipes: [i2$1.AsyncPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyValidationMessage, [{\n    type: Component,\n    args: [{\n      selector: 'formly-validation-message',\n      template: '{{ errorMessage$ | async }}',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: FormlyConfig\n    }];\n  }, {\n    field: [{\n      type: Input\n    }]\n  });\n})();\n\nclass FieldArrayType extends FieldType {\n  onPopulate(field) {\n    if (!field.formControl && hasKey(field)) {\n      const control = findControl(field);\n      registerControl(field, control ? control : new FormArray([], {\n        updateOn: field.modelOptions.updateOn\n      }));\n    }\n\n    field.fieldGroup = field.fieldGroup || [];\n    const length = Array.isArray(field.model) ? field.model.length : 0;\n\n    if (field.fieldGroup.length > length) {\n      for (let i = field.fieldGroup.length - 1; i >= length; --i) {\n        unregisterControl(field.fieldGroup[i], true);\n        field.fieldGroup.splice(i, 1);\n      }\n    }\n\n    for (let i = field.fieldGroup.length; i < length; i++) {\n      const f = { ...clone(typeof field.fieldArray === 'function' ? field.fieldArray(field) : field.fieldArray),\n        key: `${i}`\n      };\n      field.fieldGroup.push(f);\n    }\n  }\n\n  add(i, initialModel, {\n    markAsDirty\n  } = {\n    markAsDirty: true\n  }) {\n    i = i == null ? this.field.fieldGroup.length : i;\n\n    if (!this.model) {\n      assignFieldValue(this.field, []);\n    }\n\n    this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n\n    this._build();\n\n    markAsDirty && this.formControl.markAsDirty();\n  }\n\n  remove(i, {\n    markAsDirty\n  } = {\n    markAsDirty: true\n  }) {\n    this.model.splice(i, 1);\n    const field = this.field.fieldGroup[i];\n    this.field.fieldGroup.splice(i, 1);\n    this.field.fieldGroup.forEach((f, key) => f.key = `${key}`);\n    unregisterControl(field, true);\n\n    this._build();\n\n    markAsDirty && this.formControl.markAsDirty();\n  }\n\n  _build() {\n    const fields = this.field.formControl._fields ?? [this.field];\n    fields.forEach(f => this.options.build(f));\n    this.options.fieldChanges.next({\n      field: this.field,\n      value: getFieldValue(this.field),\n      type: 'valueChanges'\n    });\n  }\n\n}\n\nFieldArrayType.ɵfac = /* @__PURE__ */function () {\n  let ɵFieldArrayType_BaseFactory;\n  return function FieldArrayType_Factory(t) {\n    return (ɵFieldArrayType_BaseFactory || (ɵFieldArrayType_BaseFactory = i0.ɵɵgetInheritedFactory(FieldArrayType)))(t || FieldArrayType);\n  };\n}();\n\nFieldArrayType.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: FieldArrayType,\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FieldArrayType, [{\n    type: Directive\n  }], null, null);\n})();\n\nclass FieldWrapper extends FieldType {\n  set _staticContent(content) {\n    this.fieldComponent = content;\n  }\n\n}\n\nFieldWrapper.ɵfac = /* @__PURE__ */function () {\n  let ɵFieldWrapper_BaseFactory;\n  return function FieldWrapper_Factory(t) {\n    return (ɵFieldWrapper_BaseFactory || (ɵFieldWrapper_BaseFactory = i0.ɵɵgetInheritedFactory(FieldWrapper)))(t || FieldWrapper);\n  };\n}();\n\nFieldWrapper.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: FieldWrapper,\n  viewQuery: function FieldWrapper_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c2, 5, ViewContainerRef);\n      i0.ɵɵviewQuery(_c2, 7, ViewContainerRef);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fieldComponent = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._staticContent = _t.first);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FieldWrapper, [{\n    type: Directive\n  }], null, {\n    fieldComponent: [{\n      type: ViewChild,\n      args: ['fieldComponent', {\n        read: ViewContainerRef\n      }]\n    }],\n    _staticContent: [{\n      type: ViewChild,\n      args: ['fieldComponent', {\n        read: ViewContainerRef,\n        static: true\n      }]\n    }]\n  });\n})();\n/** @ignore */\n\n\nclass FormlyTemplateType extends FieldType {\n  constructor(sanitizer) {\n    super();\n    this.sanitizer = sanitizer;\n    this.innerHtml = {};\n  }\n\n  get template() {\n    if (this.field && this.field.template !== this.innerHtml.template) {\n      this.innerHtml = {\n        template: this.field.template,\n        content: this.props.safeHtml ? this.sanitizer.bypassSecurityTrustHtml(this.field.template) : this.field.template\n      };\n    }\n\n    return this.innerHtml.content;\n  }\n\n}\n\nFormlyTemplateType.ɵfac = function FormlyTemplateType_Factory(t) {\n  return new (t || FormlyTemplateType)(i0.ɵɵdirectiveInject(i1.DomSanitizer));\n};\n\nFormlyTemplateType.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: FormlyTemplateType,\n  selectors: [[\"formly-template\"]],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"innerHtml\"]],\n  template: function FormlyTemplateType_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"innerHtml\", ctx.template, i0.ɵɵsanitizeHtml);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyTemplateType, [{\n    type: Component,\n    args: [{\n      selector: 'formly-template',\n      template: `<div [innerHtml]=\"template\"></div>`,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i1.DomSanitizer\n    }];\n  }, null);\n})();\n\nfunction evalStringExpression(expression, argNames) {\n  try {\n    return Function(...argNames, `return ${expression};`);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nfunction evalExpression(expression, thisArg, argVal) {\n  if (typeof expression === 'function') {\n    return expression.apply(thisArg, argVal);\n  } else {\n    return expression ? true : false;\n  }\n}\n\nclass FieldExpressionExtension {\n  onPopulate(field) {\n    if (field._expressions) {\n      return;\n    } // cache built expression\n\n\n    defineHiddenProp(field, '_expressions', {});\n    observe(field, ['hide'], ({\n      currentValue,\n      firstChange\n    }) => {\n      defineHiddenProp(field, '_hide', !!currentValue);\n\n      if (!firstChange || firstChange && currentValue === true) {\n        field.props.hidden = currentValue;\n\n        field.options._hiddenFieldsForCheck.push(field);\n      }\n    });\n\n    if (field.hideExpression) {\n      observe(field, ['hideExpression'], ({\n        currentValue: expr\n      }) => {\n        field._expressions.hide = this.parseExpressions(field, 'hide', typeof expr === 'boolean' ? () => expr : expr);\n      });\n    }\n\n    const evalExpr = (key, expr) => {\n      if (typeof expr === 'string' || isFunction(expr)) {\n        field._expressions[key] = this.parseExpressions(field, key, expr);\n      } else if (expr instanceof Observable) {\n        field._expressions[key] = {\n          value$: expr.pipe(tap(v => {\n            this.evalExpr(field, key, v);\n            field.options.detectChanges(field);\n          }))\n        };\n      }\n    };\n\n    field.expressions = field.expressions || {};\n\n    for (const key of Object.keys(field.expressions)) {\n      observe(field, ['expressions', key], ({\n        currentValue: expr\n      }) => {\n        evalExpr(key, isFunction(expr) ? (...args) => expr(field, args[3]) : expr);\n      });\n    }\n\n    field.expressionProperties = field.expressionProperties || {};\n\n    for (const key of Object.keys(field.expressionProperties)) {\n      observe(field, ['expressionProperties', key], ({\n        currentValue\n      }) => evalExpr(key, currentValue));\n    }\n  }\n\n  postPopulate(field) {\n    if (field.parent) {\n      return;\n    }\n\n    if (!field.options.checkExpressions) {\n      let checkLocked = false;\n\n      field.options.checkExpressions = (f, ignoreCache) => {\n        if (checkLocked) {\n          return;\n        }\n\n        checkLocked = true;\n        const fieldChanged = this.checkExpressions(f, ignoreCache);\n        const options = field.options;\n\n        options._hiddenFieldsForCheck.sort(f => f.hide ? -1 : 1).forEach(f => this.changeHideState(f, f.hide, !ignoreCache));\n\n        options._hiddenFieldsForCheck = [];\n\n        if (fieldChanged) {\n          this.checkExpressions(field);\n\n          if (field.options && field.options.detectChanges) {\n            field.options.detectChanges(field);\n          }\n        }\n\n        checkLocked = false;\n      };\n\n      field.options._checkField = (f, ignoreCache) => {\n        console.warn(`Formly: 'options._checkField' is deprecated since v6.0, use 'options.checkExpressions' instead.`);\n        field.options.checkExpressions(f, ignoreCache);\n      };\n    }\n  }\n\n  parseExpressions(field, path, expr) {\n    let parentExpression;\n\n    if (field.parent && ['hide', 'props.disabled'].includes(path)) {\n      const rootValue = f => {\n        return path === 'hide' ? f.hide : f.props.disabled;\n      };\n\n      parentExpression = () => {\n        let root = field.parent;\n\n        while (root.parent && !rootValue(root)) {\n          root = root.parent;\n        }\n\n        return rootValue(root);\n      };\n    }\n\n    expr = expr || (() => false);\n\n    if (typeof expr === 'string') {\n      expr = evalStringExpression(expr, ['model', 'formState', 'field']);\n    }\n\n    let currentValue;\n    return {\n      callback: ignoreCache => {\n        try {\n          const exprValue = evalExpression(parentExpression ? (...args) => parentExpression(field) || expr(...args) : expr, {\n            field\n          }, [field.model, field.options.formState, field, ignoreCache]);\n\n          if (ignoreCache || currentValue !== exprValue && (!isObject(exprValue) || isObservable(exprValue) || JSON.stringify(exprValue) !== JSON.stringify(currentValue))) {\n            currentValue = exprValue;\n            this.evalExpr(field, path, exprValue);\n            return true;\n          }\n\n          return false;\n        } catch (error) {\n          error.message = `[Formly Error] [Expression \"${path}\"] ${error.message}`;\n          throw error;\n        }\n      }\n    };\n  }\n\n  checkExpressions(field, ignoreCache = false) {\n    if (!field) {\n      return false;\n    }\n\n    let fieldChanged = false;\n\n    if (field._expressions) {\n      for (const key of Object.keys(field._expressions)) {\n        field._expressions[key].callback?.(ignoreCache) && (fieldChanged = true);\n      }\n    }\n\n    field.fieldGroup?.forEach(f => this.checkExpressions(f, ignoreCache) && (fieldChanged = true));\n    return fieldChanged;\n  }\n\n  changeDisabledState(field, value) {\n    if (field.fieldGroup) {\n      field.fieldGroup.filter(f => !f._expressions.hasOwnProperty('props.disabled')).forEach(f => this.changeDisabledState(f, value));\n    }\n\n    if (hasKey(field) && field.props.disabled !== value) {\n      field.props.disabled = value;\n    }\n  }\n\n  changeHideState(field, hide, resetOnHide) {\n    if (field.fieldGroup) {\n      field.fieldGroup.filter(f => !f._expressions.hide).forEach(f => this.changeHideState(f, hide, resetOnHide));\n    }\n\n    if (field.formControl && hasKey(field)) {\n      defineHiddenProp(field, '_hide', !!(hide || field.hide));\n      const c = field.formControl;\n\n      if (c._fields?.length > 1) {\n        updateValidity(c);\n      }\n\n      if (hide === true && (!c._fields || c._fields.every(f => !!f._hide))) {\n        unregisterControl(field, true);\n\n        if (resetOnHide && field.resetOnHide) {\n          assignFieldValue(field, undefined);\n          field.formControl.reset({\n            value: undefined,\n            disabled: field.formControl.disabled\n          });\n          field.options.fieldChanges.next({\n            value: undefined,\n            field,\n            type: 'valueChanges'\n          });\n\n          if (field.fieldGroup && field.formControl instanceof FormArray) {\n            field.fieldGroup.length = 0;\n          }\n        }\n      } else if (hide === false) {\n        if (field.resetOnHide && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n          assignFieldValue(field, field.defaultValue);\n        }\n\n        registerControl(field, undefined, true);\n\n        if (field.resetOnHide && field.fieldArray && field.fieldGroup?.length !== field.model?.length) {\n          field.options.build(field);\n        }\n      }\n    }\n\n    if (field.options.fieldChanges) {\n      field.options.fieldChanges.next({\n        field,\n        type: 'hidden',\n        value: hide\n      });\n    }\n  }\n\n  evalExpr(field, prop, value) {\n    try {\n      let target = field;\n\n      const paths = this._evalExpressionPath(field, prop);\n\n      const lastIndex = paths.length - 1;\n\n      for (let i = 0; i < lastIndex; i++) {\n        target = target[paths[i]];\n      }\n\n      target[paths[lastIndex]] = value;\n    } catch (error) {\n      error.message = `[Formly Error] [Expression \"${prop}\"] ${error.message}`;\n      throw error;\n    }\n\n    if (['templateOptions.disabled', 'props.disabled'].includes(prop) && hasKey(field)) {\n      this.changeDisabledState(field, value);\n    }\n\n    if (prop.indexOf('model.') === 0) {\n      const key = prop.replace(/^model\\./, ''),\n            control = field?.key === key ? field.formControl : field.form.get(key);\n\n      if (control && !(isNil(control.value) && isNil(value)) && control.value !== value) {\n        control.patchValue(value);\n      }\n    }\n\n    this.emitExpressionChanges(field, prop, value);\n  }\n\n  emitExpressionChanges(field, property, value) {\n    if (!field.options.fieldChanges) {\n      return;\n    }\n\n    field.options.fieldChanges.next({\n      field,\n      type: 'expressionChanges',\n      property,\n      value\n    });\n  }\n\n  _evalExpressionPath(field, prop) {\n    if (field._expressions[prop] && field._expressions[prop].paths) {\n      return field._expressions[prop].paths;\n    }\n\n    let paths = [];\n\n    if (prop.indexOf('[') === -1) {\n      paths = prop.split('.');\n    } else {\n      prop.split(/[[\\]]{1,2}/) // https://stackoverflow.com/a/20198206\n      .filter(p => p).forEach(path => {\n        const arrayPath = path.match(/['|\"](.*?)['|\"]/);\n\n        if (arrayPath) {\n          paths.push(arrayPath[1]);\n        } else {\n          paths.push(...path.split('.').filter(p => p));\n        }\n      });\n    }\n\n    if (field._expressions[prop]) {\n      field._expressions[prop].paths = paths;\n    }\n\n    return paths;\n  }\n\n}\n\nclass FieldValidationExtension {\n  constructor(config) {\n    this.config = config;\n  }\n\n  onPopulate(field) {\n    this.initFieldValidation(field, 'validators');\n    this.initFieldValidation(field, 'asyncValidators');\n  }\n\n  initFieldValidation(field, type) {\n    const validators = [];\n\n    if (type === 'validators' && !(field.hasOwnProperty('fieldGroup') && !hasKey(field))) {\n      validators.push(this.getPredefinedFieldValidation(field));\n    }\n\n    if (field[type]) {\n      for (const validatorName of Object.keys(field[type])) {\n        validatorName === 'validation' ? validators.push(...field[type].validation.map(v => this.wrapNgValidatorFn(field, v))) : validators.push(this.wrapNgValidatorFn(field, field[type][validatorName], validatorName));\n      }\n    }\n\n    defineHiddenProp(field, '_' + type, validators);\n  }\n\n  getPredefinedFieldValidation(field) {\n    let VALIDATORS = [];\n    FORMLY_VALIDATORS.forEach(opt => observe(field, ['props', opt], ({\n      currentValue,\n      firstChange\n    }) => {\n      VALIDATORS = VALIDATORS.filter(o => o !== opt);\n\n      if (currentValue != null && currentValue !== false) {\n        VALIDATORS.push(opt);\n      }\n\n      if (!firstChange && field.formControl) {\n        updateValidity(field.formControl);\n      }\n    }));\n    return control => {\n      if (VALIDATORS.length === 0) {\n        return null;\n      }\n\n      return Validators.compose(VALIDATORS.map(opt => () => {\n        const value = field.props[opt];\n\n        switch (opt) {\n          case 'required':\n            return Validators.required(control);\n\n          case 'pattern':\n            return Validators.pattern(value)(control);\n\n          case 'minLength':\n            const minLengthResult = Validators.minLength(value)(control);\n            const minLengthKey = this.config.getValidatorMessage('minlength') || field.validation?.messages?.minlength ? 'minlength' : 'minLength';\n            return minLengthResult ? {\n              [minLengthKey]: minLengthResult.minlength\n            } : null;\n\n          case 'maxLength':\n            const maxLengthResult = Validators.maxLength(value)(control);\n            const maxLengthKey = this.config.getValidatorMessage('maxlength') || field.validation?.messages?.maxlength ? 'maxlength' : 'maxLength';\n            return maxLengthResult ? {\n              [maxLengthKey]: maxLengthResult.maxlength\n            } : null;\n\n          case 'min':\n            return Validators.min(value)(control);\n\n          case 'max':\n            return Validators.max(value)(control);\n\n          default:\n            return null;\n        }\n      }))(control);\n    };\n  }\n\n  wrapNgValidatorFn(field, validator, validatorName) {\n    let validatorOption;\n\n    if (typeof validator === 'string') {\n      validatorOption = clone(this.config.getValidator(validator));\n    }\n\n    if (typeof validator === 'object' && validator.name) {\n      validatorOption = clone(this.config.getValidator(validator.name));\n\n      if (validator.options) {\n        validatorOption.options = validator.options;\n      }\n    }\n\n    if (typeof validator === 'object' && validator.expression) {\n      const {\n        expression,\n        ...options\n      } = validator;\n      validatorOption = {\n        name: validatorName,\n        validation: expression,\n        options: Object.keys(options).length > 0 ? options : null\n      };\n    }\n\n    if (typeof validator === 'function') {\n      validatorOption = {\n        name: validatorName,\n        validation: validator\n      };\n    }\n\n    return control => {\n      const errors = validatorOption.validation(control, field, validatorOption.options);\n\n      if (isPromise(errors)) {\n        return errors.then(v => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption));\n      }\n\n      if (isObservable(errors)) {\n        return errors.pipe(map(v => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption)));\n      }\n\n      return this.handleResult(field, validatorName ? !!errors : errors, validatorOption);\n    };\n  }\n\n  handleAsyncResult(field, errors, options) {\n    // workaround for https://github.com/angular/angular/issues/13200\n    field.options.detectChanges(field);\n    return this.handleResult(field, errors, options);\n  }\n\n  handleResult(field, errors, {\n    name,\n    options\n  }) {\n    if (typeof errors === 'boolean') {\n      errors = errors ? null : {\n        [name]: options ? options : true\n      };\n    }\n\n    const ctrl = field.formControl;\n    ctrl?._childrenErrors?.[name]?.();\n\n    if (isObject(errors)) {\n      Object.keys(errors).forEach(name => {\n        const errorPath = errors[name].errorPath ? errors[name].errorPath : options?.errorPath;\n        const childCtrl = errorPath ? field.formControl.get(errorPath) : null;\n\n        if (childCtrl) {\n          const {\n            errorPath: _errorPath,\n            ...opts\n          } = errors[name];\n          childCtrl.setErrors({ ...(childCtrl.errors || {}),\n            [name]: opts\n          });\n          !ctrl._childrenErrors && defineHiddenProp(ctrl, '_childrenErrors', {});\n\n          ctrl._childrenErrors[name] = () => {\n            const {\n              [name]: _toDelete,\n              ...childErrors\n            } = childCtrl.errors || {};\n            childCtrl.setErrors(Object.keys(childErrors).length === 0 ? null : childErrors);\n          };\n        }\n      });\n    }\n\n    return errors;\n  }\n\n}\n\nclass FieldFormExtension {\n  prePopulate(field) {\n    if (!this.root) {\n      this.root = field;\n    }\n\n    if (field.parent) {\n      Object.defineProperty(field, 'form', {\n        get: () => field.parent.formControl,\n        configurable: true\n      });\n    }\n  }\n\n  onPopulate(field) {\n    if (field.hasOwnProperty('fieldGroup') && !hasKey(field)) {\n      defineHiddenProp(field, 'formControl', field.form);\n    } else {\n      this.addFormControl(field);\n    }\n  }\n\n  postPopulate(field) {\n    if (this.root !== field) {\n      return;\n    }\n\n    this.root = null;\n    const markForCheck = this.setValidators(field);\n\n    if (markForCheck && field.parent) {\n      let parent = field.parent;\n\n      while (parent) {\n        if (hasKey(parent) || !parent.parent) {\n          updateValidity(parent.formControl, true);\n        }\n\n        parent = parent.parent;\n      }\n    }\n  }\n\n  addFormControl(field) {\n    let control = findControl(field);\n\n    if (!control) {\n      const controlOptions = {\n        updateOn: field.modelOptions.updateOn\n      };\n\n      if (field.fieldGroup) {\n        control = new FormGroup({}, controlOptions);\n      } else {\n        const value = hasKey(field) ? getFieldValue(field) : field.defaultValue;\n        control = new FormControl({\n          value,\n          disabled: false\n        }, { ...controlOptions,\n          initialValueIsDefault: true\n        });\n      }\n    }\n\n    registerControl(field, control);\n  }\n\n  setValidators(field, disabled = false) {\n    if (disabled === false && hasKey(field) && field.props?.disabled) {\n      disabled = true;\n    }\n\n    let markForCheck = false;\n    field.fieldGroup?.forEach(f => f && this.setValidators(f, disabled) && (markForCheck = true));\n\n    if (hasKey(field) || !field.parent || !hasKey(field) && !field.fieldGroup) {\n      const {\n        formControl: c\n      } = field;\n\n      if (c) {\n        if (hasKey(field) && c instanceof FormControl) {\n          if (disabled && c.enabled) {\n            c.disable({\n              emitEvent: false,\n              onlySelf: true\n            });\n            markForCheck = true;\n          }\n\n          if (!disabled && c.disabled) {\n            c.enable({\n              emitEvent: false,\n              onlySelf: true\n            });\n            markForCheck = true;\n          }\n        }\n\n        if (null === c.validator || null === c.asyncValidator) {\n          c.setValidators(() => {\n            const v = Validators.compose(this.mergeValidators(field, '_validators'));\n            return v ? v(c) : null;\n          });\n          c.setAsyncValidators(() => {\n            const v = Validators.composeAsync(this.mergeValidators(field, '_asyncValidators'));\n            return v ? v(c) : of(null);\n          });\n          markForCheck = true;\n        }\n\n        if (markForCheck) {\n          updateValidity(c, true); // update validity of `FormGroup` instance created by field with nested key.\n\n          let parent = c.parent;\n\n          for (let i = 1; i < getKeyPath(field).length; i++) {\n            if (parent) {\n              updateValidity(parent, true);\n              parent = parent.parent;\n            }\n          }\n        }\n      }\n    }\n\n    return markForCheck;\n  }\n\n  mergeValidators(field, type) {\n    const validators = [];\n    const c = field.formControl;\n\n    if (c?._fields?.length > 1) {\n      c._fields.filter(f => !f._hide).forEach(f => validators.push(...f[type]));\n    } else if (field[type]) {\n      validators.push(...field[type]);\n    }\n\n    if (field.fieldGroup) {\n      field.fieldGroup.filter(f => f?.fieldGroup && !hasKey(f)).forEach(f => validators.push(...this.mergeValidators(f, type)));\n    }\n\n    return validators;\n  }\n\n}\n\nclass CoreExtension {\n  constructor(config) {\n    this.config = config;\n    this.formId = 0;\n  }\n\n  prePopulate(field) {\n    const root = field.parent;\n    this.initRootOptions(field);\n    this.initFieldProps(field);\n\n    if (root) {\n      Object.defineProperty(field, 'options', {\n        get: () => root.options,\n        configurable: true\n      });\n      Object.defineProperty(field, 'model', {\n        get: () => hasKey(field) && field.fieldGroup ? getFieldValue(field) : root.model,\n        configurable: true\n      });\n    }\n\n    Object.defineProperty(field, 'get', {\n      value: key => getField(field, key),\n      configurable: true\n    });\n    this.getFieldComponentInstance(field).prePopulate?.(field);\n  }\n\n  onPopulate(field) {\n    this.initFieldOptions(field);\n    this.getFieldComponentInstance(field).onPopulate?.(field);\n\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f, index) => {\n        if (f) {\n          Object.defineProperty(f, 'parent', {\n            get: () => field,\n            configurable: true\n          });\n          Object.defineProperty(f, 'index', {\n            get: () => index,\n            configurable: true\n          });\n        }\n\n        this.formId++;\n      });\n    }\n  }\n\n  postPopulate(field) {\n    this.getFieldComponentInstance(field).postPopulate?.(field);\n  }\n\n  initFieldProps(field) {\n    field.props ?? (field.props = field.templateOptions);\n    Object.defineProperty(field, 'templateOptions', {\n      get: () => field.props,\n      set: props => field.props = props,\n      configurable: true\n    });\n  }\n\n  initRootOptions(field) {\n    if (field.parent) {\n      return;\n    }\n\n    const options = field.options;\n    field.options.formState = field.options.formState || {};\n\n    if (!options.showError) {\n      options.showError = this.config.extras.showError;\n    }\n\n    if (!options.fieldChanges) {\n      defineHiddenProp(options, 'fieldChanges', new Subject());\n    }\n\n    if (!options._hiddenFieldsForCheck) {\n      options._hiddenFieldsForCheck = [];\n    }\n\n    options._markForCheck = f => {\n      console.warn(`Formly: 'options._markForCheck' is deprecated since v6.0, use 'options.detectChanges' instead.`);\n      options.detectChanges(f);\n    };\n\n    options.detectChanges = f => {\n      if (f._componentRefs) {\n        f.options.checkExpressions(f);\n        markFieldForCheck(f);\n      }\n\n      f.fieldGroup?.forEach(f => f && options.detectChanges(f));\n    };\n\n    options.resetModel = model => {\n      model = clone(model ?? options._initialModel);\n\n      if (field.model) {\n        Object.keys(field.model).forEach(k => delete field.model[k]);\n        Object.assign(field.model, model || {});\n      }\n\n      options.build(field);\n      field.form.reset(field.model);\n\n      if (options.parentForm && options.parentForm.control === field.formControl) {\n        options.parentForm.submitted = false;\n      }\n    };\n\n    options.updateInitialValue = model => options._initialModel = clone(model ?? field.model);\n\n    field.options.updateInitialValue();\n  }\n\n  initFieldOptions(field) {\n    reverseDeepMerge(field, {\n      id: getFieldId(`formly_${this.formId}`, field, field.index),\n      hooks: {},\n      modelOptions: {},\n      validation: {\n        messages: {}\n      },\n      props: !field.type || !hasKey(field) ? {} : {\n        label: '',\n        placeholder: '',\n        disabled: false\n      }\n    });\n\n    if (this.config.extras.resetFieldOnHide && field.resetOnHide !== false) {\n      field.resetOnHide = true;\n    }\n\n    if (field.type !== 'formly-template' && (field.template || field.expressions?.template || field.expressionProperties?.template)) {\n      field.type = 'formly-template';\n    }\n\n    if (!field.type && field.fieldGroup) {\n      field.type = 'formly-group';\n    }\n\n    if (field.type) {\n      this.config.getMergedField(field);\n    }\n\n    if (hasKey(field) && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n      const isHidden = f => f.hide || f.expressions?.hide || f.hideExpression;\n\n      let setDefaultValue = !field.resetOnHide || !isHidden(field);\n\n      if (!isHidden(field) && field.resetOnHide) {\n        let parent = field.parent;\n\n        while (parent && !isHidden(parent)) {\n          parent = parent.parent;\n        }\n\n        setDefaultValue = !parent || !isHidden(parent);\n      }\n\n      if (setDefaultValue) {\n        assignFieldValue(field, field.defaultValue);\n      }\n    }\n\n    field.wrappers = field.wrappers || [];\n  }\n\n  getFieldComponentInstance(field) {\n    const componentRefInstance = () => {\n      let componentRef = this.config.resolveFieldTypeRef(field);\n      const fieldComponentRef = field._componentRefs?.slice(-1)[0];\n\n      if (fieldComponentRef instanceof ComponentRef && fieldComponentRef?.componentType === componentRef?.componentType) {\n        componentRef = fieldComponentRef;\n      }\n\n      return componentRef?.instance;\n    };\n\n    if (!field._proxyInstance) {\n      defineHiddenProp(field, '_proxyInstance', new Proxy({}, {\n        get: (_, prop) => componentRefInstance()?.[prop],\n        set: (_, prop, value) => componentRefInstance()[prop] = value\n      }));\n    }\n\n    return field._proxyInstance;\n  }\n\n}\n\nfunction defaultFormlyConfig(config) {\n  return {\n    types: [{\n      name: 'formly-group',\n      component: FormlyGroup\n    }, {\n      name: 'formly-template',\n      component: FormlyTemplateType\n    }],\n    extensions: [{\n      name: 'core',\n      extension: new CoreExtension(config),\n      priority: -250\n    }, {\n      name: 'field-validation',\n      extension: new FieldValidationExtension(config),\n      priority: -200\n    }, {\n      name: 'field-form',\n      extension: new FieldFormExtension(),\n      priority: -150\n    }, {\n      name: 'field-expression',\n      extension: new FieldExpressionExtension(),\n      priority: -100\n    }]\n  };\n}\n\nclass FormlyModule {\n  constructor(configService, configs = []) {\n    if (!configs) {\n      return;\n    }\n\n    configs.forEach(config => configService.addConfig(config));\n  }\n\n  static forRoot(config = {}) {\n    return {\n      ngModule: FormlyModule,\n      providers: [{\n        provide: FORMLY_CONFIG,\n        multi: true,\n        useFactory: defaultFormlyConfig,\n        deps: [FormlyConfig]\n      }, {\n        provide: FORMLY_CONFIG,\n        useValue: config,\n        multi: true\n      }, FormlyConfig, FormlyFormBuilder]\n    };\n  }\n\n  static forChild(config = {}) {\n    return {\n      ngModule: FormlyModule,\n      providers: [{\n        provide: FORMLY_CONFIG,\n        multi: true,\n        useFactory: defaultFormlyConfig,\n        deps: [FormlyConfig]\n      }, {\n        provide: FORMLY_CONFIG,\n        useValue: config,\n        multi: true\n      }, FormlyFormBuilder]\n    };\n  }\n\n}\n\nFormlyModule.ɵfac = function FormlyModule_Factory(t) {\n  return new (t || FormlyModule)(i0.ɵɵinject(FormlyConfig), i0.ɵɵinject(FORMLY_CONFIG, 8));\n};\n\nFormlyModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: FormlyModule\n});\nFormlyModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [FormlyTemplate, FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage, FormlyTemplateType],\n      exports: [FormlyTemplate, FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n      imports: [CommonModule]\n    }]\n  }], function () {\n    return [{\n      type: FormlyConfig\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FORMLY_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n/*\n * Public API Surface of core\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FORMLY_CONFIG, FieldArrayType, FieldType, FieldWrapper, FormlyConfig, FormlyField, FormlyForm, FormlyFormBuilder, FormlyModule, FormlyAttributes as ɵFormlyAttributes, FormlyGroup as ɵFormlyGroup, FormlyTemplate as ɵFormlyTemplate, FormlyValidationMessage as ɵFormlyValidationMessage, clone as ɵclone, defineHiddenProp as ɵdefineHiddenProp, getFieldValue as ɵgetFieldValue, hasKey as ɵhasKey, observe as ɵobserve, reverseDeepMerge as ɵreverseDeepMerge }; //# sourceMappingURL=ngx-formly-core.mjs.map","map":{"version":3,"sources":["/home/juancamilo/Documentos/Developer/Api WEB/Projecto JYW/JYW/frontend/jyw/node_modules/@ngx-formly/core/fesm2020/ngx-formly-core.mjs"],"names":["i0","Type","TemplateRef","ComponentRef","ChangeDetectorRef","InjectionToken","Injectable","Optional","Directive","Input","ViewContainerRef","Component","ViewChild","EventEmitter","ChangeDetectionStrategy","Output","ContentChildren","Inject","NgModule","i2","AbstractControl","FormGroup","FormArray","FormControl","Validators","isObservable","merge","of","Observable","Subject","distinctUntilChanged","startWith","debounceTime","filter","switchMap","take","tap","map","i2$1","DOCUMENT","CommonModule","i1","disableTreeValidityCall","form","callback","_updateTreeValidity","bind","getFieldId","formId","field","index","id","type","template","prototype","constructor","name","key","join","hasKey","isNil","getKeyPath","_keyPath","path","indexOf","replace","split","Array","isArray","slice","defineHiddenProp","FORMLY_VALIDATORS","assignFieldValue","value","paths","length","root","parent","undefined","resetOnHide","k","pop","m","reduce","model","assignModelValue","i","isObject","test","clone","getFieldValue","reverseDeepMerge","dest","args","forEach","src","srcArg","isBlankString","objAndSameType","isUndefined","isFunction","obj1","obj2","Object","getPrototypeOf","x","isPromise","obj","then","changingThisBreaksApplicationSecurity","Set","Map","_isAMomentObject","Date","getTime","v","proto","c","create","setPrototypeOf","keys","newVal","prop","propDesc","getOwnPropertyDescriptor","get","defineProperty","defaultValue","enumerable","writable","configurable","observeDeep","source","setFn","observers","unsubscribe","observer","observe","firstChange","currentValue","push","o","_observers","target","onChange","state","set","previousValue","changeFn","setValue","getField","f","fieldGroup","len","markFieldForCheck","_componentRefs","ref","changeDetectorRef","injector","markForCheck","FORMLY_CONFIG","FormlyConfig","types","validators","wrappers","messages","extras","checkExpressionOn","lazyRender","resetFieldOnHide","renderFormlyFieldElement","showError","formControl","invalid","touched","options","parentForm","submitted","validation","show","extensions","presets","extensionsByPriority","addConfig","config","setType","validator","setValidator","wrapper","setWrapper","validationMessages","addValidatorMessage","message","setSortedExtensions","acc","curr","option","hasOwnProperty","getType","throwIfNotFound","component","Error","mergeExtendedType","getMergedField","defaultOptions","extendDefaults","extends","optionsTypes","componentRef","resolveFieldTypeRef","instance","_componentRef","_viewContainerRef","_injector","createComponent","destroy","e","console","error","setTypeWrapper","getWrapper","getValidator","ngDevMode","deprecated","minlength","maxlength","warn","getValidatorMessage","extensionOptions","extensionOption","priority","extension","Number","sort","a","b","prio","extendedType","ɵfac","ɵprov","providedIn","FormlyFormBuilder","viewContainerRef","buildForm","build","core","_setOptions","_build","checkExpressions","detectChanges","values","prePopulate","onPopulate","postPopulate","_buildForm","Injector","FormGroupDirective","decorators","unregisterControl","emitEvent","control","fieldIndex","_fields","splice","opts","controls","findIndex","removeAt","removeControl","setParent","findControl","shareFormControl","registerControl","setValidators","setAsyncValidators","props","disabled","disabledObserver","disable","enable","registerOnDisabledChange","patchValue","setControl","_hide","updateValidity","onlySelf","status","updateValueAndValidity","statusChanges","emit","valueChanges","clearControl","FormlyTemplate","ngOnChanges","ɵdir","selector","FormlyFieldTemplates","FormlyField","renderer","_elementRef","hostContainerRef","hostObservers","componentRefs","hooksObservers","detectFieldBuild","valueChangesUnsubscribe","containerRef","elementRef","location","ngAfterContentInit","triggerHook","ngAfterViewInit","ngDoCheck","render","ngOnInit","changes","ngOnDestroy","resetRefs","hostObserver","renderField","clear","wps","attachComponentRef","_lContainer","viewRef","detach","destroyed","insert","inlineType","templates","find","createEmbeddedView","$implicit","fieldChanges","hooks","r","sub","subscribe","assign","setStyle","nativeElement","className","removeAttribute","setAttribute","hide","subscribes","_expressions","expressionObserver","subscription","value$","fieldObserver","pipe","y","updateOn","debounce","modelOptions","default","parsers","parserFn","next","Renderer2","ElementRef","ɵcmp","styles","read","static","FormlyForm","builder","ngZone","fieldTemplates","modelChange","_modelChangeValue","immutable","setField","fields","checkExpressionChange","onStable","asObservable","runGuarded","p","NgZone","providers","changeDetection","OnPush","FormlyAttributes","_document","uiAttributesCache","uiEvents","listeners","events","eventName","$event","onFocus","onBlur","document","fieldAttrElements","listener","listen","attributes","attr","detachElementRef","attachElementRef","focusObserver","toggleFocus","uiAttributes","element","hasAttribute","toLowerCase","focus","isFocused","activeElement","some","contains","Promise","resolve","blur","onHostChange","Event","change","markAsDirty","host","FieldType","to","formState","FormlyGroup","NgForOf","FormlyValidationMessage","EXPR_VALIDATORS","errorMessage$","property","errorMessage","fieldForm","errors","errorPath","asyncValidators","AsyncPipe","FieldArrayType","fieldArray","add","initialModel","remove","FieldWrapper","_staticContent","content","fieldComponent","FormlyTemplateType","sanitizer","innerHtml","safeHtml","bypassSecurityTrustHtml","DomSanitizer","evalStringExpression","expression","argNames","Function","evalExpression","thisArg","argVal","apply","FieldExpressionExtension","hidden","_hiddenFieldsForCheck","hideExpression","expr","parseExpressions","evalExpr","expressions","expressionProperties","checkLocked","ignoreCache","fieldChanged","changeHideState","_checkField","parentExpression","includes","rootValue","exprValue","JSON","stringify","changeDisabledState","every","reset","_evalExpressionPath","lastIndex","emitExpressionChanges","arrayPath","match","FieldValidationExtension","initFieldValidation","getPredefinedFieldValidation","validatorName","wrapNgValidatorFn","VALIDATORS","opt","compose","required","pattern","minLengthResult","minLength","minLengthKey","maxLengthResult","maxLength","maxLengthKey","min","max","validatorOption","handleAsyncResult","handleResult","ctrl","_childrenErrors","childCtrl","_errorPath","setErrors","_toDelete","childErrors","FieldFormExtension","addFormControl","controlOptions","initialValueIsDefault","enabled","asyncValidator","mergeValidators","composeAsync","CoreExtension","initRootOptions","initFieldProps","getFieldComponentInstance","initFieldOptions","templateOptions","_markForCheck","resetModel","_initialModel","updateInitialValue","label","placeholder","isHidden","setDefaultValue","componentRefInstance","fieldComponentRef","componentType","_proxyInstance","Proxy","_","defaultFormlyConfig","FormlyModule","configService","configs","forRoot","ngModule","provide","multi","useFactory","deps","useValue","forChild","ɵmod","ɵinj","declarations","exports","imports","ɵFormlyAttributes","ɵFormlyGroup","ɵFormlyTemplate","ɵFormlyValidationMessage","ɵclone","ɵdefineHiddenProp","ɵgetFieldValue","ɵhasKey","ɵobserve","ɵreverseDeepMerge"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Type, TemplateRef, ComponentRef, ChangeDetectorRef, InjectionToken, Injectable, Optional, Directive, Input, ViewContainerRef, Component, ViewChild, EventEmitter, ChangeDetectionStrategy, Output, ContentChildren, Inject, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { AbstractControl, FormGroup, FormArray, FormControl, Validators } from '@angular/forms';\nimport { isObservable, merge, of, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, startWith, debounceTime, filter, switchMap, take, tap, map } from 'rxjs/operators';\nimport * as i2$1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i1 from '@angular/platform-browser';\n\nfunction disableTreeValidityCall(form, callback) {\n    const _updateTreeValidity = form._updateTreeValidity.bind(form);\n    form._updateTreeValidity = () => { };\n    callback();\n    form._updateTreeValidity = _updateTreeValidity;\n}\nfunction getFieldId(formId, field, index) {\n    if (field.id) {\n        return field.id;\n    }\n    let type = field.type;\n    if (!type && field.template) {\n        type = 'template';\n    }\n    if (type instanceof Type) {\n        type = type.prototype.constructor.name;\n    }\n    return [formId, type, field.key, index].join('_');\n}\nfunction hasKey(field) {\n    return !isNil(field.key) && field.key !== '';\n}\nfunction getKeyPath(field) {\n    if (!hasKey(field)) {\n        return [];\n    }\n    /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n    if (field._keyPath?.key !== field.key) {\n        let path = [];\n        if (typeof field.key === 'string') {\n            const key = field.key.indexOf('[') === -1 ? field.key : field.key.replace(/\\[(\\w+)\\]/g, '.$1');\n            path = key.indexOf('.') !== -1 ? key.split('.') : [key];\n        }\n        else if (Array.isArray(field.key)) {\n            path = field.key.slice(0);\n        }\n        else {\n            path = [`${field.key}`];\n        }\n        defineHiddenProp(field, '_keyPath', { key: field.key, path });\n    }\n    return field._keyPath.path.slice(0);\n}\nconst FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\nfunction assignFieldValue(field, value) {\n    let paths = getKeyPath(field);\n    if (paths.length === 0) {\n        return;\n    }\n    let root = field;\n    while (root.parent) {\n        root = root.parent;\n        paths = [...getKeyPath(root), ...paths];\n    }\n    if (value === undefined && field.resetOnHide) {\n        const k = paths.pop();\n        const m = paths.reduce((model, path) => model[path] || {}, root.model);\n        delete m[k];\n        return;\n    }\n    assignModelValue(root.model, paths, value);\n}\nfunction assignModelValue(model, paths, value) {\n    for (let i = 0; i < paths.length - 1; i++) {\n        const path = paths[i];\n        if (!model[path] || !isObject(model[path])) {\n            model[path] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n        }\n        model = model[path];\n    }\n    model[paths[paths.length - 1]] = clone(value);\n}\nfunction getFieldValue(field) {\n    let model = field.parent ? field.parent.model : field.model;\n    for (const path of getKeyPath(field)) {\n        if (!model) {\n            return model;\n        }\n        model = model[path];\n    }\n    return model;\n}\nfunction reverseDeepMerge(dest, ...args) {\n    args.forEach((src) => {\n        for (const srcArg in src) {\n            if (isNil(dest[srcArg]) || isBlankString(dest[srcArg])) {\n                dest[srcArg] = clone(src[srcArg]);\n            }\n            else if (objAndSameType(dest[srcArg], src[srcArg])) {\n                reverseDeepMerge(dest[srcArg], src[srcArg]);\n            }\n        }\n    });\n    return dest;\n}\n// check a value is null or undefined\nfunction isNil(value) {\n    return value == null;\n}\nfunction isUndefined(value) {\n    return value === undefined;\n}\nfunction isBlankString(value) {\n    return value === '';\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction objAndSameType(obj1, obj2) {\n    return (isObject(obj1) &&\n        isObject(obj2) &&\n        Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2) &&\n        !(Array.isArray(obj1) || Array.isArray(obj2)));\n}\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nfunction isPromise(obj) {\n    return !!obj && typeof obj.then === 'function';\n}\nfunction clone(value) {\n    if (!isObject(value) ||\n        isObservable(value) ||\n        value instanceof TemplateRef ||\n        /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity ||\n        ['RegExp', 'FileList', 'File', 'Blob'].indexOf(value.constructor.name) !== -1) {\n        return value;\n    }\n    if (value instanceof Set) {\n        return new Set(value);\n    }\n    if (value instanceof Map) {\n        return new Map(value);\n    }\n    // https://github.com/moment/moment/blob/master/moment.js#L252\n    if (value._isAMomentObject && isFunction(value.clone)) {\n        return value.clone();\n    }\n    if (value instanceof AbstractControl) {\n        return null;\n    }\n    if (value instanceof Date) {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return value.slice(0).map((v) => clone(v));\n    }\n    // best way to clone a js object maybe\n    // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance\n    const proto = Object.getPrototypeOf(value);\n    let c = Object.create(proto);\n    c = Object.setPrototypeOf(c, proto);\n    // need to make a deep copy so we dont use Object.assign\n    // also Object.assign wont copy property descriptor exactly\n    return Object.keys(value).reduce((newVal, prop) => {\n        const propDesc = Object.getOwnPropertyDescriptor(value, prop);\n        if (propDesc.get) {\n            Object.defineProperty(newVal, prop, propDesc);\n        }\n        else {\n            newVal[prop] = clone(value[prop]);\n        }\n        return newVal;\n    }, c);\n}\nfunction defineHiddenProp(field, prop, defaultValue) {\n    Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });\n    field[prop] = defaultValue;\n}\nfunction observeDeep(source, paths, setFn) {\n    let observers = [];\n    const unsubscribe = () => {\n        observers.forEach((observer) => observer());\n        observers = [];\n    };\n    const observer = observe(source, paths, ({ firstChange, currentValue }) => {\n        !firstChange && setFn();\n        unsubscribe();\n        if (isObject(currentValue) && currentValue.constructor.name === 'Object') {\n            Object.keys(currentValue).forEach((prop) => {\n                observers.push(observeDeep(source, [...paths, prop], setFn));\n            });\n        }\n    });\n    return () => {\n        observer.unsubscribe();\n        unsubscribe();\n    };\n}\nfunction observe(o, paths, setFn) {\n    if (!o._observers) {\n        defineHiddenProp(o, '_observers', {});\n    }\n    let target = o;\n    for (let i = 0; i < paths.length - 1; i++) {\n        if (!target[paths[i]] || !isObject(target[paths[i]])) {\n            target[paths[i]] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n        }\n        target = target[paths[i]];\n    }\n    const key = paths[paths.length - 1];\n    const prop = paths.join('.');\n    if (!o._observers[prop]) {\n        o._observers[prop] = { value: target[key], onChange: [] };\n    }\n    const state = o._observers[prop];\n    if (target[key] !== state.value) {\n        state.value = target[key];\n    }\n    if (state.onChange.indexOf(setFn) === -1) {\n        state.onChange.push(setFn);\n        setFn({ currentValue: state.value, firstChange: true });\n        if (state.onChange.length >= 1) {\n            const { enumerable } = Object.getOwnPropertyDescriptor(target, key) || { enumerable: true };\n            Object.defineProperty(target, key, {\n                enumerable,\n                configurable: true,\n                get: () => state.value,\n                set: (currentValue) => {\n                    if (currentValue !== state.value) {\n                        const previousValue = state.value;\n                        state.value = currentValue;\n                        state.onChange.forEach((changeFn) => changeFn({ previousValue, currentValue, firstChange: false }));\n                    }\n                },\n            });\n        }\n    }\n    return {\n        setValue(value) {\n            state.value = value;\n        },\n        unsubscribe() {\n            state.onChange = state.onChange.filter((changeFn) => changeFn !== setFn);\n            if (state.onChange.length === 0) {\n                delete o._observers[prop];\n            }\n        },\n    };\n}\nfunction getField(f, key) {\n    key = (Array.isArray(key) ? key.join('.') : key);\n    if (!f.fieldGroup) {\n        return undefined;\n    }\n    for (let i = 0, len = f.fieldGroup.length; i < len; i++) {\n        const c = f.fieldGroup[i];\n        const k = (Array.isArray(c.key) ? c.key.join('.') : c.key);\n        if (k === key) {\n            return c;\n        }\n        if (c.fieldGroup && (isNil(k) || key.indexOf(`${k}.`) === 0)) {\n            const field = getField(c, isNil(k) ? key : key.slice(k.length + 1));\n            if (field) {\n                return field;\n            }\n        }\n    }\n    return undefined;\n}\nfunction markFieldForCheck(field) {\n    field._componentRefs?.forEach((ref) => {\n        // NOTE: we cannot use ref.changeDetectorRef, see https://github.com/ngx-formly/ngx-formly/issues/2191\n        if (ref instanceof ComponentRef) {\n            const changeDetectorRef = ref.injector.get(ChangeDetectorRef);\n            changeDetectorRef.markForCheck();\n        }\n        else {\n            ref.markForCheck();\n        }\n    });\n}\n\n/**\n * An InjectionToken for registering additional formly config options (types, wrappers ...).\n */\nconst FORMLY_CONFIG = new InjectionToken('FORMLY_CONFIG');\n/**\n * Maintains list of formly config options. This can be used to register new field type.\n */\nclass FormlyConfig {\n    constructor() {\n        this.types = {};\n        this.validators = {};\n        this.wrappers = {};\n        this.messages = {};\n        this.extras = {\n            checkExpressionOn: 'modelChange',\n            lazyRender: true,\n            resetFieldOnHide: true,\n            renderFormlyFieldElement: true,\n            showError(field) {\n                return (field.formControl?.invalid &&\n                    (field.formControl?.touched || field.options.parentForm?.submitted || !!field.field.validation?.show));\n            },\n        };\n        this.extensions = {};\n        this.presets = {};\n        this.extensionsByPriority = {};\n    }\n    addConfig(config) {\n        if (config.types) {\n            config.types.forEach((type) => this.setType(type));\n        }\n        if (config.validators) {\n            config.validators.forEach((validator) => this.setValidator(validator));\n        }\n        if (config.wrappers) {\n            config.wrappers.forEach((wrapper) => this.setWrapper(wrapper));\n        }\n        if (config.validationMessages) {\n            config.validationMessages.forEach((validation) => this.addValidatorMessage(validation.name, validation.message));\n        }\n        if (config.extensions) {\n            this.setSortedExtensions(config.extensions);\n        }\n        if (config.extras) {\n            this.extras = { ...this.extras, ...config.extras };\n        }\n        if (config.presets) {\n            this.presets = {\n                ...this.presets,\n                ...config.presets.reduce((acc, curr) => ({ ...acc, [curr.name]: curr.config }), {}),\n            };\n        }\n    }\n    /**\n     * Allows you to specify a custom type which you can use in your field configuration.\n     * You can pass an object of options, or an array of objects of options.\n     */\n    setType(options) {\n        if (Array.isArray(options)) {\n            options.forEach((option) => this.setType(option));\n        }\n        else {\n            if (!this.types[options.name]) {\n                this.types[options.name] = { name: options.name };\n            }\n            ['component', 'extends', 'defaultOptions', 'wrappers'].forEach((prop) => {\n                if (options.hasOwnProperty(prop)) {\n                    this.types[options.name][prop] = options[prop];\n                }\n            });\n        }\n    }\n    getType(name, throwIfNotFound = false) {\n        if (name instanceof Type) {\n            return { component: name, name: name.prototype.constructor.name };\n        }\n        if (!this.types[name]) {\n            if (throwIfNotFound) {\n                throw new Error(`[Formly Error] The type \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n            }\n            return null;\n        }\n        this.mergeExtendedType(name);\n        return this.types[name];\n    }\n    /** @ignore */\n    getMergedField(field = {}) {\n        const type = this.getType(field.type);\n        if (!type) {\n            return;\n        }\n        if (type.defaultOptions) {\n            reverseDeepMerge(field, type.defaultOptions);\n        }\n        const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;\n        if (extendDefaults) {\n            reverseDeepMerge(field, extendDefaults);\n        }\n        if (field?.optionsTypes) {\n            field.optionsTypes.forEach((option) => {\n                const defaultOptions = this.getType(option).defaultOptions;\n                if (defaultOptions) {\n                    reverseDeepMerge(field, defaultOptions);\n                }\n            });\n        }\n        const componentRef = this.resolveFieldTypeRef(field);\n        if (componentRef?.instance?.defaultOptions) {\n            reverseDeepMerge(field, componentRef.instance.defaultOptions);\n        }\n        if (!field.wrappers && type.wrappers) {\n            field.wrappers = [...type.wrappers];\n        }\n    }\n    /** @ignore @internal */\n    resolveFieldTypeRef(field = {}) {\n        const type = this.getType(field.type);\n        if (!type) {\n            return null;\n        }\n        if (!type.component || type._componentRef) {\n            return type._componentRef;\n        }\n        const { _viewContainerRef, _injector } = field.options;\n        if (!_viewContainerRef || !_injector) {\n            return null;\n        }\n        const componentRef = _viewContainerRef.createComponent(type.component, { injector: _injector });\n        defineHiddenProp(type, '_componentRef', componentRef);\n        try {\n            componentRef.destroy();\n        }\n        catch (e) {\n            console.error(`An error occurred while destroying the Formly component type \"${field.type}\"`, e);\n        }\n        return type._componentRef;\n    }\n    setWrapper(options) {\n        this.wrappers[options.name] = options;\n        if (options.types) {\n            options.types.forEach((type) => {\n                this.setTypeWrapper(type, options.name);\n            });\n        }\n    }\n    getWrapper(name) {\n        if (name instanceof Type) {\n            return { component: name, name: name.prototype.constructor.name };\n        }\n        if (!this.wrappers[name]) {\n            throw new Error(`[Formly Error] The wrapper \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n        }\n        return this.wrappers[name];\n    }\n    /** @ignore */\n    setTypeWrapper(type, name) {\n        if (!this.types[type]) {\n            this.types[type] = {};\n        }\n        if (!this.types[type].wrappers) {\n            this.types[type].wrappers = [];\n        }\n        if (this.types[type].wrappers.indexOf(name) === -1) {\n            this.types[type].wrappers.push(name);\n        }\n    }\n    setValidator(options) {\n        this.validators[options.name] = options;\n    }\n    getValidator(name) {\n        if (!this.validators[name]) {\n            throw new Error(`[Formly Error] The validator \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n        }\n        return this.validators[name];\n    }\n    addValidatorMessage(name, message) {\n        this.messages[name] = message;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const deprecated = { minlength: 'minLength', maxlength: 'maxLength' };\n            if (deprecated[name]) {\n                console.warn(`Formly deprecation: passing validation messages key '${name}' is deprecated since v6.0, use '${deprecated[name]}' instead.`);\n                this.messages[deprecated[name]] = message;\n            }\n        }\n    }\n    getValidatorMessage(name) {\n        return this.messages[name];\n    }\n    setSortedExtensions(extensionOptions) {\n        // insert new extensions, grouped by priority\n        extensionOptions.forEach((extensionOption) => {\n            const priority = extensionOption.priority ?? 1;\n            this.extensionsByPriority[priority] = {\n                ...this.extensionsByPriority[priority],\n                [extensionOption.name]: extensionOption.extension,\n            };\n        });\n        // flatten extensions object with sorted keys\n        this.extensions = Object.keys(this.extensionsByPriority)\n            .map(Number)\n            .sort((a, b) => a - b)\n            .reduce((acc, prio) => ({\n            ...acc,\n            ...this.extensionsByPriority[prio],\n        }), {});\n    }\n    mergeExtendedType(name) {\n        if (!this.types[name].extends) {\n            return;\n        }\n        const extendedType = this.getType(this.types[name].extends);\n        if (!this.types[name].component) {\n            this.types[name].component = extendedType.component;\n        }\n        if (!this.types[name].wrappers) {\n            this.types[name].wrappers = extendedType.wrappers;\n        }\n    }\n}\nFormlyConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyConfig, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nFormlyConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyConfig, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyConfig, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nclass FormlyFormBuilder {\n    constructor(config, injector, viewContainerRef, parentForm) {\n        this.config = config;\n        this.injector = injector;\n        this.viewContainerRef = viewContainerRef;\n        this.parentForm = parentForm;\n    }\n    buildForm(form, fieldGroup = [], model, options) {\n        this.build({ fieldGroup, model, form, options });\n    }\n    build(field) {\n        if (!this.config.extensions.core) {\n            throw new Error('NgxFormly: missing `forRoot()` call. use `forRoot()` when registering the `FormlyModule`.');\n        }\n        if (!field.parent) {\n            this._setOptions(field);\n            disableTreeValidityCall(field.form, () => {\n                this._build(field);\n                const options = field.options;\n                options.checkExpressions?.(field, true);\n                options.detectChanges?.(field);\n            });\n        }\n        else {\n            this._build(field);\n        }\n    }\n    _build(field) {\n        if (!field) {\n            return;\n        }\n        const extensions = Object.values(this.config.extensions);\n        extensions.forEach((extension) => extension.prePopulate?.(field));\n        extensions.forEach((extension) => extension.onPopulate?.(field));\n        field.fieldGroup?.forEach((f) => this._build(f));\n        extensions.forEach((extension) => extension.postPopulate?.(field));\n    }\n    _setOptions(field) {\n        field.form = field.form || new FormGroup({});\n        field.model = field.model || {};\n        field.options = field.options || {};\n        const options = field.options;\n        if (!options._viewContainerRef) {\n            defineHiddenProp(options, '_viewContainerRef', this.viewContainerRef);\n        }\n        if (!options._injector) {\n            defineHiddenProp(options, '_injector', this.injector);\n        }\n        if (!options.build) {\n            options._buildForm = () => {\n                console.warn(`Formly: 'options._buildForm' is deprecated since v6.0, use 'options.build' instead.`);\n                this.build(field);\n            };\n            options.build = (f = field) => {\n                this.build(f);\n                return f;\n            };\n        }\n        if (!options.parentForm && this.parentForm) {\n            defineHiddenProp(options, 'parentForm', this.parentForm);\n            observe(options, ['parentForm', 'submitted'], ({ firstChange }) => {\n                if (!firstChange) {\n                    options.checkExpressions(field);\n                    options.detectChanges(field);\n                }\n            });\n        }\n    }\n}\nFormlyFormBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFormBuilder, deps: [{ token: FormlyConfig }, { token: i0.Injector }, { token: i0.ViewContainerRef, optional: true }, { token: i2.FormGroupDirective, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nFormlyFormBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFormBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFormBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }, { type: i0.Injector }, { type: i0.ViewContainerRef, decorators: [{\n                    type: Optional\n                }] }, { type: i2.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nfunction unregisterControl(field, emitEvent = false) {\n    const control = field.formControl;\n    const fieldIndex = control._fields ? control._fields.indexOf(field) : -1;\n    if (fieldIndex !== -1) {\n        control._fields.splice(fieldIndex, 1);\n    }\n    const form = control.parent;\n    if (!form) {\n        return;\n    }\n    const opts = { emitEvent };\n    if (form instanceof FormArray) {\n        const key = form.controls.findIndex((c) => c === control);\n        if (key !== -1) {\n            form.removeAt(key, opts);\n        }\n    }\n    else if (form instanceof FormGroup) {\n        const paths = getKeyPath(field);\n        const key = paths[paths.length - 1];\n        if (form.get([key]) === control) {\n            form.removeControl(key, opts);\n        }\n    }\n    control.setParent(null);\n}\nfunction findControl(field) {\n    if (field.formControl) {\n        return field.formControl;\n    }\n    if (field.shareFormControl === false) {\n        return null;\n    }\n    return field.form?.get(getKeyPath(field));\n}\nfunction registerControl(field, control, emitEvent = false) {\n    control = control || field.formControl;\n    if (!control._fields) {\n        defineHiddenProp(control, '_fields', []);\n    }\n    if (control._fields.indexOf(field) === -1) {\n        control._fields.push(field);\n    }\n    if (!field.formControl && control) {\n        defineHiddenProp(field, 'formControl', control);\n        control.setValidators(null);\n        control.setAsyncValidators(null);\n        field.props.disabled = !!field.props.disabled;\n        const disabledObserver = observe(field, ['props', 'disabled'], ({ firstChange, currentValue }) => {\n            if (!firstChange) {\n                currentValue ? field.formControl.disable() : field.formControl.enable();\n            }\n        });\n        if (control instanceof FormControl) {\n            control.registerOnDisabledChange(disabledObserver.setValue);\n        }\n    }\n    if (!field.form || !hasKey(field)) {\n        return;\n    }\n    let form = field.form;\n    const paths = getKeyPath(field);\n    const value = getFieldValue(field);\n    if (!(isNil(control.value) && isNil(value)) && control.value !== value && control instanceof FormControl) {\n        control.patchValue(value);\n    }\n    for (let i = 0; i < paths.length - 1; i++) {\n        const path = paths[i];\n        if (!form.get([path])) {\n            form.setControl(path, new FormGroup({}), { emitEvent });\n        }\n        form = form.get([path]);\n    }\n    const key = paths[paths.length - 1];\n    if (!field._hide && form.get([key]) !== control) {\n        form.setControl(key, control, { emitEvent });\n    }\n}\nfunction updateValidity(c, onlySelf = false) {\n    const status = c.status;\n    const value = c.value;\n    c.updateValueAndValidity({ emitEvent: false, onlySelf });\n    if (status !== c.status) {\n        c.statusChanges.emit(c.status);\n    }\n    if (value !== c.value) {\n        c.valueChanges.emit(c.value);\n    }\n}\nfunction clearControl(form) {\n    delete form?._fields;\n    form.setValidators(null);\n    form.setAsyncValidators(null);\n    if (form instanceof FormGroup || form instanceof FormArray) {\n        Object.values(form.controls).forEach((c) => clearControl(c));\n    }\n}\n\nclass FormlyTemplate {\n    constructor(ref) {\n        this.ref = ref;\n    }\n    ngOnChanges() {\n        this.name = this.name || 'formly-group';\n    }\n}\nFormlyTemplate.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplate, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nFormlyTemplate.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyTemplate, selector: \"[formlyTemplate]\", inputs: { name: [\"formlyTemplate\", \"name\"] }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplate, decorators: [{\n            type: Directive,\n            args: [{ selector: '[formlyTemplate]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { name: [{\n                type: Input,\n                args: ['formlyTemplate']\n            }] } });\n// workarround for https://github.com/angular/angular/issues/43227#issuecomment-904173738\nclass FormlyFieldTemplates {\n}\nFormlyFieldTemplates.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTemplates, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nFormlyFieldTemplates.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTemplates });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTemplates, decorators: [{\n            type: Injectable\n        }] });\n\n/**\n * The `<formly-field>` component is used to render the UI widget (layout + type) of a given `field`.\n */\nclass FormlyField {\n    constructor(config, renderer, _elementRef, hostContainerRef, form) {\n        this.config = config;\n        this.renderer = renderer;\n        this._elementRef = _elementRef;\n        this.hostContainerRef = hostContainerRef;\n        this.form = form;\n        this.hostObservers = [];\n        this.componentRefs = [];\n        this.hooksObservers = [];\n        this.detectFieldBuild = false;\n        this.valueChangesUnsubscribe = () => { };\n    }\n    get containerRef() {\n        return this.config.extras.renderFormlyFieldElement ? this.viewContainerRef : this.hostContainerRef;\n    }\n    get elementRef() {\n        if (this.config.extras.renderFormlyFieldElement) {\n            return this._elementRef;\n        }\n        if (this.componentRefs?.[0] instanceof ComponentRef) {\n            return this.componentRefs[0].location;\n        }\n        return null;\n    }\n    ngAfterContentInit() {\n        this.triggerHook('afterContentInit');\n    }\n    ngAfterViewInit() {\n        this.triggerHook('afterViewInit');\n    }\n    ngDoCheck() {\n        if (this.detectFieldBuild && this.field && this.field.options) {\n            this.render();\n        }\n    }\n    ngOnInit() {\n        this.triggerHook('onInit');\n    }\n    ngOnChanges(changes) {\n        this.triggerHook('onChanges', changes);\n    }\n    ngOnDestroy() {\n        this.resetRefs(this.field);\n        this.hostObservers.forEach((hostObserver) => hostObserver.unsubscribe());\n        this.hooksObservers.forEach((unsubscribe) => unsubscribe());\n        this.valueChangesUnsubscribe();\n        this.triggerHook('onDestroy');\n    }\n    renderField(containerRef, f, wrappers = []) {\n        if (this.containerRef === containerRef) {\n            this.resetRefs(this.field);\n            this.containerRef.clear();\n            wrappers = this.field?.wrappers;\n        }\n        if (wrappers?.length > 0) {\n            const [wrapper, ...wps] = wrappers;\n            const { component } = this.config.getWrapper(wrapper);\n            const ref = containerRef.createComponent(component);\n            this.attachComponentRef(ref, f);\n            observe(ref.instance, ['fieldComponent'], ({ currentValue, previousValue, firstChange }) => {\n                if (currentValue) {\n                    if (previousValue && previousValue._lContainer === currentValue._lContainer) {\n                        return;\n                    }\n                    const viewRef = previousValue ? previousValue.detach() : null;\n                    if (viewRef && !viewRef.destroyed) {\n                        currentValue.insert(viewRef);\n                    }\n                    else {\n                        this.renderField(currentValue, f, wps);\n                    }\n                    !firstChange && ref.changeDetectorRef.detectChanges();\n                }\n            });\n        }\n        else if (f?.type) {\n            const inlineType = this.form?.templates?.find((ref) => ref.name === f.type);\n            let ref;\n            if (inlineType) {\n                ref = containerRef.createEmbeddedView(inlineType.ref, { $implicit: f });\n            }\n            else {\n                const { component } = this.config.getType(f.type, true);\n                ref = containerRef.createComponent(component);\n            }\n            this.attachComponentRef(ref, f);\n        }\n    }\n    triggerHook(name, changes) {\n        if (name === 'onInit' || (name === 'onChanges' && changes.field && !changes.field.firstChange)) {\n            this.valueChangesUnsubscribe = this.fieldChanges(this.field);\n        }\n        if (this.field?.hooks?.[name]) {\n            if (!changes || changes.field) {\n                const r = this.field.hooks[name](this.field);\n                if (isObservable(r) && ['onInit', 'afterContentInit', 'afterViewInit'].indexOf(name) !== -1) {\n                    const sub = r.subscribe();\n                    this.hooksObservers.push(() => sub.unsubscribe());\n                }\n            }\n        }\n        if (name === 'onChanges' && changes.field) {\n            this.resetRefs(changes.field.previousValue);\n            this.render();\n        }\n    }\n    attachComponentRef(ref, field) {\n        this.componentRefs.push(ref);\n        field._componentRefs.push(ref);\n        if (ref instanceof ComponentRef) {\n            Object.assign(ref.instance, { field });\n        }\n    }\n    render() {\n        if (!this.field) {\n            return;\n        }\n        // require Formly build\n        if (!this.field.options) {\n            this.detectFieldBuild = true;\n            return;\n        }\n        this.detectFieldBuild = false;\n        this.hostObservers.forEach((hostObserver) => hostObserver.unsubscribe());\n        this.hostObservers = [\n            observe(this.field, ['hide'], ({ firstChange, currentValue }) => {\n                const containerRef = this.containerRef;\n                if (this.config.extras.lazyRender === false) {\n                    firstChange && this.renderField(containerRef, this.field);\n                    if (!firstChange || (firstChange && currentValue)) {\n                        this.elementRef &&\n                            this.renderer.setStyle(this.elementRef.nativeElement, 'display', currentValue ? 'none' : '');\n                    }\n                }\n                else {\n                    if (currentValue) {\n                        containerRef.clear();\n                        if (this.field.className) {\n                            this.renderer.removeAttribute(this.elementRef.nativeElement, 'class');\n                        }\n                    }\n                    else {\n                        this.renderField(containerRef, this.field);\n                        if (this.field.className) {\n                            this.renderer.setAttribute(this.elementRef.nativeElement, 'class', this.field.className);\n                        }\n                    }\n                }\n                !firstChange && this.field.options.detectChanges(this.field);\n            }),\n            observe(this.field, ['className'], ({ firstChange, currentValue }) => {\n                if ((!firstChange || (firstChange && currentValue)) &&\n                    (!this.config.extras.lazyRender || this.field.hide !== true)) {\n                    this.elementRef && this.renderer.setAttribute(this.elementRef.nativeElement, 'class', currentValue);\n                }\n            }),\n            ...['touched', 'pristine', 'status'].map((prop) => observe(this.field, ['formControl', prop], ({ firstChange }) => !firstChange && markFieldForCheck(this.field))),\n        ];\n    }\n    resetRefs(field) {\n        if (field) {\n            if (field._componentRefs) {\n                field._componentRefs = field._componentRefs.filter((ref) => this.componentRefs.indexOf(ref) === -1);\n            }\n            else {\n                defineHiddenProp(this.field, '_componentRefs', []);\n            }\n        }\n        this.componentRefs = [];\n    }\n    fieldChanges(field) {\n        this.valueChangesUnsubscribe();\n        if (!field) {\n            return () => { };\n        }\n        const subscribes = [\n            observeDeep(field, ['props'], () => field.options.detectChanges(field)),\n            observeDeep(field.options, ['formState'], () => field.options.detectChanges(field)),\n        ];\n        for (const key of Object.keys(field._expressions || {})) {\n            const expressionObserver = observe(field, ['_expressions', key], ({ currentValue, previousValue }) => {\n                if (previousValue?.subscription) {\n                    previousValue.subscription.unsubscribe();\n                    previousValue.subscription = null;\n                }\n                if (isObservable(currentValue.value$)) {\n                    currentValue.subscription = currentValue.value$.subscribe();\n                }\n            });\n            subscribes.push(() => {\n                if (field._expressions[key]?.subscription) {\n                    field._expressions[key].subscription.unsubscribe();\n                }\n                expressionObserver.unsubscribe();\n            });\n        }\n        for (const path of [['template'], ['fieldGroupClassName'], ['validation', 'show']]) {\n            const fieldObserver = observe(field, path, ({ firstChange }) => !firstChange && field.options.detectChanges(field));\n            subscribes.push(() => fieldObserver.unsubscribe());\n        }\n        if (field.formControl && !field.fieldGroup) {\n            const control = field.formControl;\n            let valueChanges = control.valueChanges.pipe(distinctUntilChanged((x, y) => {\n                if (x !== y || Array.isArray(x) || isObject(x)) {\n                    return false;\n                }\n                return true;\n            }));\n            if (control.value !== getFieldValue(field)) {\n                valueChanges = valueChanges.pipe(startWith(control.value));\n            }\n            const { updateOn, debounce } = field.modelOptions;\n            if ((!updateOn || updateOn === 'change') && debounce?.default > 0) {\n                valueChanges = control.valueChanges.pipe(debounceTime(debounce.default));\n            }\n            const sub = valueChanges.subscribe((value) => {\n                // workaround for https://github.com/angular/angular/issues/13792\n                if (control._fields?.length > 1 && control instanceof FormControl) {\n                    control.patchValue(value, { emitEvent: false, onlySelf: true });\n                }\n                field.parsers?.forEach((parserFn) => (value = parserFn(value)));\n                if (value !== field.formControl.value) {\n                    field.formControl.setValue(value);\n                    return;\n                }\n                if (hasKey(field)) {\n                    assignFieldValue(field, value);\n                }\n                field.options.fieldChanges.next({ value, field, type: 'valueChanges' });\n            });\n            subscribes.push(() => sub.unsubscribe());\n        }\n        return () => subscribes.forEach((subscribe) => subscribe());\n    }\n}\nFormlyField.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyField, deps: [{ token: FormlyConfig }, { token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: FormlyFieldTemplates, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nFormlyField.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyField, selector: \"formly-field\", inputs: { field: \"field\" }, viewQueries: [{ propertyName: \"viewContainerRef\", first: true, predicate: [\"container\"], descendants: true, read: ViewContainerRef, static: true }], usesOnChanges: true, ngImport: i0, template: '<ng-template #container></ng-template>', isInline: true, styles: [\":host:empty{display:none}\\n\"] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyField, decorators: [{\n            type: Component,\n            args: [{ selector: 'formly-field', template: '<ng-template #container></ng-template>', styles: [\":host:empty{display:none}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: FormlyFieldTemplates, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { field: [{\n                type: Input\n            }], viewContainerRef: [{\n                type: ViewChild,\n                args: ['container', { read: ViewContainerRef, static: true }]\n            }] } });\n\n/**\n * The `<form-form>` component is the main container of the form,\n * which takes care of managing the form state\n * and delegates the rendering of each field to `<formly-field>` component.\n */\nclass FormlyForm {\n    constructor(builder, config, ngZone, fieldTemplates) {\n        this.builder = builder;\n        this.config = config;\n        this.ngZone = ngZone;\n        this.fieldTemplates = fieldTemplates;\n        /** Event that is emitted when the model value is changed */\n        this.modelChange = new EventEmitter();\n        this.field = { type: 'formly-group' };\n        this._modelChangeValue = {};\n        this.valueChangesUnsubscribe = () => { };\n    }\n    /** The form instance which allow to track model value and validation status. */\n    set form(form) {\n        this.field.form = form;\n    }\n    get form() {\n        return this.field.form;\n    }\n    /** The model to be represented by the form. */\n    set model(model) {\n        if (this.config.extras.immutable && this._modelChangeValue === model) {\n            return;\n        }\n        this.setField({ model });\n    }\n    get model() {\n        return this.field.model;\n    }\n    /** The field configurations for building the form. */\n    set fields(fieldGroup) {\n        this.setField({ fieldGroup });\n    }\n    get fields() {\n        return this.field.fieldGroup;\n    }\n    /** Options for the form. */\n    set options(options) {\n        this.setField({ options });\n    }\n    get options() {\n        return this.field.options;\n    }\n    set templates(templates) {\n        this.fieldTemplates.templates = templates;\n    }\n    ngDoCheck() {\n        if (this.config.extras.checkExpressionOn === 'changeDetectionCheck') {\n            this.checkExpressionChange();\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes.fields && this.form) {\n            clearControl(this.form);\n        }\n        if (changes.fields || changes.form || (changes.model && this._modelChangeValue !== changes.model.currentValue)) {\n            this.valueChangesUnsubscribe();\n            this.builder.build(this.field);\n            this.valueChangesUnsubscribe = this.valueChanges();\n        }\n    }\n    ngOnDestroy() {\n        this.valueChangesUnsubscribe();\n    }\n    checkExpressionChange() {\n        this.field.options.checkExpressions?.(this.field);\n    }\n    valueChanges() {\n        this.valueChangesUnsubscribe();\n        const sub = this.field.options.fieldChanges\n            .pipe(filter(({ field, type }) => hasKey(field) && type === 'valueChanges'), switchMap(() => this.ngZone.onStable.asObservable().pipe(take(1))))\n            .subscribe(() => this.ngZone.runGuarded(() => {\n            // runGuarded is used to keep in sync the expression changes\n            // https://github.com/ngx-formly/ngx-formly/issues/2095\n            this.checkExpressionChange();\n            this.modelChange.emit((this._modelChangeValue = clone(this.model)));\n        }));\n        return () => sub.unsubscribe();\n    }\n    setField(field) {\n        if (this.config.extras.immutable) {\n            this.field = { ...this.field, ...clone(field) };\n        }\n        else {\n            Object.keys(field).forEach((p) => (this.field[p] = field[p]));\n        }\n    }\n}\nFormlyForm.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyForm, deps: [{ token: FormlyFormBuilder }, { token: FormlyConfig }, { token: i0.NgZone }, { token: FormlyFieldTemplates }], target: i0.ɵɵFactoryTarget.Component });\nFormlyForm.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyForm, selector: \"formly-form\", inputs: { form: \"form\", model: \"model\", fields: \"fields\", options: \"options\" }, outputs: { modelChange: \"modelChange\" }, providers: [FormlyFormBuilder, FormlyFieldTemplates], queries: [{ propertyName: \"templates\", predicate: FormlyTemplate }], usesOnChanges: true, ngImport: i0, template: '<formly-field [field]=\"field\"></formly-field>', isInline: true, components: [{ type: FormlyField, selector: \"formly-field\", inputs: [\"field\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyForm, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-form',\n                    template: '<formly-field [field]=\"field\"></formly-field>',\n                    providers: [FormlyFormBuilder, FormlyFieldTemplates],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: FormlyFormBuilder }, { type: FormlyConfig }, { type: i0.NgZone }, { type: FormlyFieldTemplates }]; }, propDecorators: { form: [{\n                type: Input\n            }], model: [{\n                type: Input\n            }], fields: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], modelChange: [{\n                type: Output\n            }], templates: [{\n                type: ContentChildren,\n                args: [FormlyTemplate]\n            }] } });\n\n/**\n * Allow to link the `field` HTML attributes (`id`, `name` ...) and Event attributes (`focus`, `blur` ...) to an element in the DOM.\n */\nclass FormlyAttributes {\n    constructor(renderer, elementRef, _document) {\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.uiAttributesCache = {};\n        /**\n         * HostBinding doesn't register listeners conditionally which may produce some perf issues.\n         *\n         * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1991\n         */\n        this.uiEvents = {\n            listeners: [],\n            events: ['click', 'keyup', 'keydown', 'keypress', 'focus', 'blur', 'change'],\n            callback: (eventName, $event) => {\n                switch (eventName) {\n                    case 'focus':\n                        return this.onFocus($event);\n                    case 'blur':\n                        return this.onBlur($event);\n                    case 'change':\n                        return this.onChange($event);\n                    default:\n                        return this.props[eventName](this.field, $event);\n                }\n            },\n        };\n        this.document = _document;\n    }\n    get props() {\n        return this.field.props || {};\n    }\n    get fieldAttrElements() {\n        return this.field?.['_elementRefs'] || [];\n    }\n    ngOnChanges(changes) {\n        if (changes.field) {\n            this.field.name && this.setAttribute('name', this.field.name);\n            this.uiEvents.listeners.forEach((listener) => listener());\n            this.uiEvents.events.forEach((eventName) => {\n                if (this.props?.[eventName] || ['focus', 'blur', 'change'].indexOf(eventName) !== -1) {\n                    this.uiEvents.listeners.push(this.renderer.listen(this.elementRef.nativeElement, eventName, (e) => this.uiEvents.callback(eventName, e)));\n                }\n            });\n            if (this.props?.attributes) {\n                observe(this.field, ['props', 'attributes'], ({ currentValue, previousValue }) => {\n                    if (previousValue) {\n                        Object.keys(previousValue).forEach((attr) => this.removeAttribute(attr));\n                    }\n                    if (currentValue) {\n                        Object.keys(currentValue).forEach((attr) => {\n                            if (currentValue[attr] != null) {\n                                this.setAttribute(attr, currentValue[attr]);\n                            }\n                        });\n                    }\n                });\n            }\n            this.detachElementRef(changes.field.previousValue);\n            this.attachElementRef(changes.field.currentValue);\n            if (this.fieldAttrElements.length === 1) {\n                !this.id && this.field.id && this.setAttribute('id', this.field.id);\n                this.focusObserver = observe(this.field, ['focus'], ({ currentValue }) => {\n                    this.toggleFocus(currentValue);\n                });\n            }\n        }\n        if (changes.id) {\n            this.setAttribute('id', this.id);\n        }\n    }\n    /**\n     * We need to re-evaluate all the attributes on every change detection cycle, because\n     * by using a HostBinding we run into certain edge cases. This means that whatever logic\n     * is in here has to be super lean or we risk seriously damaging or destroying the performance.\n     *\n     * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317\n     * Material issue: https://github.com/angular/components/issues/14024\n     */\n    ngDoCheck() {\n        if (!this.uiAttributes) {\n            const element = this.elementRef.nativeElement;\n            this.uiAttributes = [...FORMLY_VALIDATORS, 'tabindex', 'placeholder', 'readonly', 'disabled', 'step'].filter((attr) => !element.hasAttribute || !element.hasAttribute(attr));\n        }\n        this.uiAttributes.forEach((attr) => {\n            const value = this.props[attr];\n            if (this.uiAttributesCache[attr] !== value &&\n                (!this.props.attributes || !this.props.attributes.hasOwnProperty(attr.toLowerCase()))) {\n                this.uiAttributesCache[attr] = value;\n                if (value || value === 0) {\n                    this.setAttribute(attr, value === true ? attr : `${value}`);\n                }\n                else {\n                    this.removeAttribute(attr);\n                }\n            }\n        });\n    }\n    ngOnDestroy() {\n        this.uiEvents.listeners.forEach((listener) => listener());\n        this.detachElementRef(this.field);\n        this.focusObserver?.unsubscribe();\n    }\n    toggleFocus(value) {\n        const element = this.fieldAttrElements ? this.fieldAttrElements[0] : null;\n        if (!element || !element.nativeElement.focus) {\n            return;\n        }\n        const isFocused = !!this.document.activeElement &&\n            this.fieldAttrElements.some(({ nativeElement }) => this.document.activeElement === nativeElement || nativeElement.contains(this.document.activeElement));\n        if (value && !isFocused) {\n            Promise.resolve().then(() => element.nativeElement.focus());\n        }\n        else if (!value && isFocused) {\n            Promise.resolve().then(() => element.nativeElement.blur());\n        }\n    }\n    onFocus($event) {\n        this.focusObserver?.setValue(true);\n        this.props.focus?.(this.field, $event);\n    }\n    onBlur($event) {\n        this.focusObserver?.setValue(false);\n        this.props.blur?.(this.field, $event);\n    }\n    // handle custom `change` event, for regular ones rely on DOM listener\n    onHostChange($event) {\n        if ($event instanceof Event) {\n            return;\n        }\n        this.onChange($event);\n    }\n    onChange($event) {\n        this.props.change?.(this.field, $event);\n        this.field.formControl?.markAsDirty();\n    }\n    attachElementRef(f) {\n        if (!f) {\n            return;\n        }\n        if (f['_elementRefs']?.indexOf(this.elementRef) === -1) {\n            f['_elementRefs'].push(this.elementRef);\n        }\n        else {\n            defineHiddenProp(f, '_elementRefs', [this.elementRef]);\n        }\n    }\n    detachElementRef(f) {\n        const index = f?.['_elementRefs'] ? this.fieldAttrElements.indexOf(this.elementRef) : -1;\n        if (index !== -1) {\n            f['_elementRefs'].splice(index, 1);\n        }\n    }\n    setAttribute(attr, value) {\n        this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);\n    }\n    removeAttribute(attr) {\n        this.renderer.removeAttribute(this.elementRef.nativeElement, attr);\n    }\n}\nFormlyAttributes.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyAttributes, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nFormlyAttributes.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyAttributes, selector: \"[formlyAttributes]\", inputs: { field: [\"formlyAttributes\", \"field\"], id: \"id\" }, host: { listeners: { \"change\": \"onHostChange($event)\" } }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyAttributes, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[formlyAttributes]',\n                    host: {\n                        '(change)': 'onHostChange($event)',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { field: [{\n                type: Input,\n                args: ['formlyAttributes']\n            }], id: [{\n                type: Input\n            }] } });\n\nclass FieldType {\n    get model() {\n        return this.field.model;\n    }\n    get form() {\n        return this.field.form;\n    }\n    get options() {\n        return this.field.options;\n    }\n    get key() {\n        return this.field.key;\n    }\n    get formControl() {\n        return this.field.formControl;\n    }\n    get props() {\n        return (this.field.props || {});\n    }\n    /** @deprecated Use `props` instead. */\n    get to() {\n        return this.props;\n    }\n    get showError() {\n        return this.options.showError(this);\n    }\n    get id() {\n        return this.field.id;\n    }\n    get formState() {\n        return this.options.formState || {};\n    }\n}\nFieldType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldType, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nFieldType.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FieldType, inputs: { field: \"field\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldType, decorators: [{\n            type: Directive\n        }], propDecorators: { field: [{\n                type: Input\n            }] } });\n\n/** @ignore */\nclass FormlyGroup extends FieldType {\n}\nFormlyGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyGroup, deps: null, target: i0.ɵɵFactoryTarget.Component });\nFormlyGroup.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyGroup, selector: \"formly-group\", host: { properties: { \"class\": \"field.fieldGroupClassName || \\\"\\\"\" } }, usesInheritance: true, ngImport: i0, template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `, isInline: true, components: [{ type: FormlyField, selector: \"formly-field\", inputs: [\"field\"] }], directives: [{ type: i2$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyGroup, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-group',\n                    template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `,\n                    host: {\n                        '[class]': 'field.fieldGroupClassName || \"\"',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }] });\n\n/**\n * The `<formly-validation-message>` component renders the error message of a given `field`.\n */\nclass FormlyValidationMessage {\n    constructor(config) {\n        this.config = config;\n    }\n    ngOnChanges() {\n        const EXPR_VALIDATORS = FORMLY_VALIDATORS.map((v) => `templateOptions.${v}`);\n        this.errorMessage$ = merge(this.field.formControl.statusChanges, !this.field.options\n            ? of(null)\n            : this.field.options.fieldChanges.pipe(filter(({ field, type, property }) => {\n                return (field === this.field &&\n                    type === 'expressionChanges' &&\n                    (property.indexOf('validation') !== -1 || EXPR_VALIDATORS.indexOf(property) !== -1));\n            }))).pipe(startWith(null), switchMap(() => (isObservable(this.errorMessage) ? this.errorMessage : of(this.errorMessage))));\n    }\n    get errorMessage() {\n        const fieldForm = this.field.formControl;\n        for (const error in fieldForm.errors) {\n            if (fieldForm.errors.hasOwnProperty(error)) {\n                let message = this.config.getValidatorMessage(error);\n                if (isObject(fieldForm.errors[error])) {\n                    if (fieldForm.errors[error].errorPath) {\n                        return undefined;\n                    }\n                    if (fieldForm.errors[error].message) {\n                        message = fieldForm.errors[error].message;\n                    }\n                }\n                if (this.field.validation?.messages?.[error]) {\n                    message = this.field.validation.messages[error];\n                }\n                if (this.field.validators?.[error]?.message) {\n                    message = this.field.validators[error].message;\n                }\n                if (this.field.asyncValidators?.[error]?.message) {\n                    message = this.field.asyncValidators[error].message;\n                }\n                if (typeof message === 'function') {\n                    return message(fieldForm.errors[error], this.field);\n                }\n                return message;\n            }\n        }\n        return undefined;\n    }\n}\nFormlyValidationMessage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyValidationMessage, deps: [{ token: FormlyConfig }], target: i0.ɵɵFactoryTarget.Component });\nFormlyValidationMessage.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyValidationMessage, selector: \"formly-validation-message\", inputs: { field: \"field\" }, usesOnChanges: true, ngImport: i0, template: '{{ errorMessage$ | async }}', isInline: true, pipes: { \"async\": i2$1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyValidationMessage, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-validation-message',\n                    template: '{{ errorMessage$ | async }}',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }]; }, propDecorators: { field: [{\n                type: Input\n            }] } });\n\nclass FieldArrayType extends FieldType {\n    onPopulate(field) {\n        if (!field.formControl && hasKey(field)) {\n            const control = findControl(field);\n            registerControl(field, control ? control : new FormArray([], { updateOn: field.modelOptions.updateOn }));\n        }\n        field.fieldGroup = field.fieldGroup || [];\n        const length = Array.isArray(field.model) ? field.model.length : 0;\n        if (field.fieldGroup.length > length) {\n            for (let i = field.fieldGroup.length - 1; i >= length; --i) {\n                unregisterControl(field.fieldGroup[i], true);\n                field.fieldGroup.splice(i, 1);\n            }\n        }\n        for (let i = field.fieldGroup.length; i < length; i++) {\n            const f = {\n                ...clone(typeof field.fieldArray === 'function' ? field.fieldArray(field) : field.fieldArray),\n                key: `${i}`,\n            };\n            field.fieldGroup.push(f);\n        }\n    }\n    add(i, initialModel, { markAsDirty } = { markAsDirty: true }) {\n        i = i == null ? this.field.fieldGroup.length : i;\n        if (!this.model) {\n            assignFieldValue(this.field, []);\n        }\n        this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n        this._build();\n        markAsDirty && this.formControl.markAsDirty();\n    }\n    remove(i, { markAsDirty } = { markAsDirty: true }) {\n        this.model.splice(i, 1);\n        const field = this.field.fieldGroup[i];\n        this.field.fieldGroup.splice(i, 1);\n        this.field.fieldGroup.forEach((f, key) => (f.key = `${key}`));\n        unregisterControl(field, true);\n        this._build();\n        markAsDirty && this.formControl.markAsDirty();\n    }\n    _build() {\n        const fields = this.field.formControl._fields ?? [this.field];\n        fields.forEach((f) => this.options.build(f));\n        this.options.fieldChanges.next({\n            field: this.field,\n            value: getFieldValue(this.field),\n            type: 'valueChanges',\n        });\n    }\n}\nFieldArrayType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldArrayType, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nFieldArrayType.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FieldArrayType, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldArrayType, decorators: [{\n            type: Directive\n        }] });\n\nclass FieldWrapper extends FieldType {\n    set _staticContent(content) {\n        this.fieldComponent = content;\n    }\n}\nFieldWrapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldWrapper, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nFieldWrapper.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FieldWrapper, viewQueries: [{ propertyName: \"fieldComponent\", first: true, predicate: [\"fieldComponent\"], descendants: true, read: ViewContainerRef }, { propertyName: \"_staticContent\", first: true, predicate: [\"fieldComponent\"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldWrapper, decorators: [{\n            type: Directive\n        }], propDecorators: { fieldComponent: [{\n                type: ViewChild,\n                args: ['fieldComponent', { read: ViewContainerRef }]\n            }], _staticContent: [{\n                type: ViewChild,\n                args: ['fieldComponent', { read: ViewContainerRef, static: true }]\n            }] } });\n\n/** @ignore */\nclass FormlyTemplateType extends FieldType {\n    constructor(sanitizer) {\n        super();\n        this.sanitizer = sanitizer;\n        this.innerHtml = {};\n    }\n    get template() {\n        if (this.field && this.field.template !== this.innerHtml.template) {\n            this.innerHtml = {\n                template: this.field.template,\n                content: this.props.safeHtml\n                    ? this.sanitizer.bypassSecurityTrustHtml(this.field.template)\n                    : this.field.template,\n            };\n        }\n        return this.innerHtml.content;\n    }\n}\nFormlyTemplateType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplateType, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });\nFormlyTemplateType.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyTemplateType, selector: \"formly-template\", usesInheritance: true, ngImport: i0, template: `<div [innerHtml]=\"template\"></div>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplateType, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-template',\n                    template: `<div [innerHtml]=\"template\"></div>`,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; } });\n\nfunction evalStringExpression(expression, argNames) {\n    try {\n        return Function(...argNames, `return ${expression};`);\n    }\n    catch (error) {\n        console.error(error);\n    }\n}\nfunction evalExpression(expression, thisArg, argVal) {\n    if (typeof expression === 'function') {\n        return expression.apply(thisArg, argVal);\n    }\n    else {\n        return expression ? true : false;\n    }\n}\n\nclass FieldExpressionExtension {\n    onPopulate(field) {\n        if (field._expressions) {\n            return;\n        }\n        // cache built expression\n        defineHiddenProp(field, '_expressions', {});\n        observe(field, ['hide'], ({ currentValue, firstChange }) => {\n            defineHiddenProp(field, '_hide', !!currentValue);\n            if (!firstChange || (firstChange && currentValue === true)) {\n                field.props.hidden = currentValue;\n                field.options._hiddenFieldsForCheck.push(field);\n            }\n        });\n        if (field.hideExpression) {\n            observe(field, ['hideExpression'], ({ currentValue: expr }) => {\n                field._expressions.hide = this.parseExpressions(field, 'hide', typeof expr === 'boolean' ? () => expr : expr);\n            });\n        }\n        const evalExpr = (key, expr) => {\n            if (typeof expr === 'string' || isFunction(expr)) {\n                field._expressions[key] = this.parseExpressions(field, key, expr);\n            }\n            else if (expr instanceof Observable) {\n                field._expressions[key] = {\n                    value$: expr.pipe(tap((v) => {\n                        this.evalExpr(field, key, v);\n                        field.options.detectChanges(field);\n                    })),\n                };\n            }\n        };\n        field.expressions = field.expressions || {};\n        for (const key of Object.keys(field.expressions)) {\n            observe(field, ['expressions', key], ({ currentValue: expr }) => {\n                evalExpr(key, isFunction(expr) ? (...args) => expr(field, args[3]) : expr);\n            });\n        }\n        field.expressionProperties = field.expressionProperties || {};\n        for (const key of Object.keys(field.expressionProperties)) {\n            observe(field, ['expressionProperties', key], ({ currentValue }) => evalExpr(key, currentValue));\n        }\n    }\n    postPopulate(field) {\n        if (field.parent) {\n            return;\n        }\n        if (!field.options.checkExpressions) {\n            let checkLocked = false;\n            field.options.checkExpressions = (f, ignoreCache) => {\n                if (checkLocked) {\n                    return;\n                }\n                checkLocked = true;\n                const fieldChanged = this.checkExpressions(f, ignoreCache);\n                const options = field.options;\n                options._hiddenFieldsForCheck\n                    .sort((f) => (f.hide ? -1 : 1))\n                    .forEach((f) => this.changeHideState(f, f.hide, !ignoreCache));\n                options._hiddenFieldsForCheck = [];\n                if (fieldChanged) {\n                    this.checkExpressions(field);\n                    if (field.options && field.options.detectChanges) {\n                        field.options.detectChanges(field);\n                    }\n                }\n                checkLocked = false;\n            };\n            field.options._checkField = (f, ignoreCache) => {\n                console.warn(`Formly: 'options._checkField' is deprecated since v6.0, use 'options.checkExpressions' instead.`);\n                field.options.checkExpressions(f, ignoreCache);\n            };\n        }\n    }\n    parseExpressions(field, path, expr) {\n        let parentExpression;\n        if (field.parent && ['hide', 'props.disabled'].includes(path)) {\n            const rootValue = (f) => {\n                return path === 'hide' ? f.hide : f.props.disabled;\n            };\n            parentExpression = () => {\n                let root = field.parent;\n                while (root.parent && !rootValue(root)) {\n                    root = root.parent;\n                }\n                return rootValue(root);\n            };\n        }\n        expr = expr || (() => false);\n        if (typeof expr === 'string') {\n            expr = evalStringExpression(expr, ['model', 'formState', 'field']);\n        }\n        let currentValue;\n        return {\n            callback: (ignoreCache) => {\n                try {\n                    const exprValue = evalExpression(parentExpression ? (...args) => parentExpression(field) || expr(...args) : expr, { field }, [field.model, field.options.formState, field, ignoreCache]);\n                    if (ignoreCache ||\n                        (currentValue !== exprValue &&\n                            (!isObject(exprValue) ||\n                                isObservable(exprValue) ||\n                                JSON.stringify(exprValue) !== JSON.stringify(currentValue)))) {\n                        currentValue = exprValue;\n                        this.evalExpr(field, path, exprValue);\n                        return true;\n                    }\n                    return false;\n                }\n                catch (error) {\n                    error.message = `[Formly Error] [Expression \"${path}\"] ${error.message}`;\n                    throw error;\n                }\n            },\n        };\n    }\n    checkExpressions(field, ignoreCache = false) {\n        if (!field) {\n            return false;\n        }\n        let fieldChanged = false;\n        if (field._expressions) {\n            for (const key of Object.keys(field._expressions)) {\n                field._expressions[key].callback?.(ignoreCache) && (fieldChanged = true);\n            }\n        }\n        field.fieldGroup?.forEach((f) => this.checkExpressions(f, ignoreCache) && (fieldChanged = true));\n        return fieldChanged;\n    }\n    changeDisabledState(field, value) {\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((f) => !f._expressions.hasOwnProperty('props.disabled'))\n                .forEach((f) => this.changeDisabledState(f, value));\n        }\n        if (hasKey(field) && field.props.disabled !== value) {\n            field.props.disabled = value;\n        }\n    }\n    changeHideState(field, hide, resetOnHide) {\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((f) => !f._expressions.hide)\n                .forEach((f) => this.changeHideState(f, hide, resetOnHide));\n        }\n        if (field.formControl && hasKey(field)) {\n            defineHiddenProp(field, '_hide', !!(hide || field.hide));\n            const c = field.formControl;\n            if (c._fields?.length > 1) {\n                updateValidity(c);\n            }\n            if (hide === true && (!c._fields || c._fields.every((f) => !!f._hide))) {\n                unregisterControl(field, true);\n                if (resetOnHide && field.resetOnHide) {\n                    assignFieldValue(field, undefined);\n                    field.formControl.reset({ value: undefined, disabled: field.formControl.disabled });\n                    field.options.fieldChanges.next({ value: undefined, field, type: 'valueChanges' });\n                    if (field.fieldGroup && field.formControl instanceof FormArray) {\n                        field.fieldGroup.length = 0;\n                    }\n                }\n            }\n            else if (hide === false) {\n                if (field.resetOnHide && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n                    assignFieldValue(field, field.defaultValue);\n                }\n                registerControl(field, undefined, true);\n                if (field.resetOnHide && field.fieldArray && field.fieldGroup?.length !== field.model?.length) {\n                    field.options.build(field);\n                }\n            }\n        }\n        if (field.options.fieldChanges) {\n            field.options.fieldChanges.next({ field, type: 'hidden', value: hide });\n        }\n    }\n    evalExpr(field, prop, value) {\n        try {\n            let target = field;\n            const paths = this._evalExpressionPath(field, prop);\n            const lastIndex = paths.length - 1;\n            for (let i = 0; i < lastIndex; i++) {\n                target = target[paths[i]];\n            }\n            target[paths[lastIndex]] = value;\n        }\n        catch (error) {\n            error.message = `[Formly Error] [Expression \"${prop}\"] ${error.message}`;\n            throw error;\n        }\n        if (['templateOptions.disabled', 'props.disabled'].includes(prop) && hasKey(field)) {\n            this.changeDisabledState(field, value);\n        }\n        if (prop.indexOf('model.') === 0) {\n            const key = prop.replace(/^model\\./, ''), control = field?.key === key ? field.formControl : field.form.get(key);\n            if (control && !(isNil(control.value) && isNil(value)) && control.value !== value) {\n                control.patchValue(value);\n            }\n        }\n        this.emitExpressionChanges(field, prop, value);\n    }\n    emitExpressionChanges(field, property, value) {\n        if (!field.options.fieldChanges) {\n            return;\n        }\n        field.options.fieldChanges.next({\n            field,\n            type: 'expressionChanges',\n            property,\n            value,\n        });\n    }\n    _evalExpressionPath(field, prop) {\n        if (field._expressions[prop] && field._expressions[prop].paths) {\n            return field._expressions[prop].paths;\n        }\n        let paths = [];\n        if (prop.indexOf('[') === -1) {\n            paths = prop.split('.');\n        }\n        else {\n            prop\n                .split(/[[\\]]{1,2}/) // https://stackoverflow.com/a/20198206\n                .filter((p) => p)\n                .forEach((path) => {\n                const arrayPath = path.match(/['|\"](.*?)['|\"]/);\n                if (arrayPath) {\n                    paths.push(arrayPath[1]);\n                }\n                else {\n                    paths.push(...path.split('.').filter((p) => p));\n                }\n            });\n        }\n        if (field._expressions[prop]) {\n            field._expressions[prop].paths = paths;\n        }\n        return paths;\n    }\n}\n\nclass FieldValidationExtension {\n    constructor(config) {\n        this.config = config;\n    }\n    onPopulate(field) {\n        this.initFieldValidation(field, 'validators');\n        this.initFieldValidation(field, 'asyncValidators');\n    }\n    initFieldValidation(field, type) {\n        const validators = [];\n        if (type === 'validators' && !(field.hasOwnProperty('fieldGroup') && !hasKey(field))) {\n            validators.push(this.getPredefinedFieldValidation(field));\n        }\n        if (field[type]) {\n            for (const validatorName of Object.keys(field[type])) {\n                validatorName === 'validation'\n                    ? validators.push(...field[type].validation.map((v) => this.wrapNgValidatorFn(field, v)))\n                    : validators.push(this.wrapNgValidatorFn(field, field[type][validatorName], validatorName));\n            }\n        }\n        defineHiddenProp(field, '_' + type, validators);\n    }\n    getPredefinedFieldValidation(field) {\n        let VALIDATORS = [];\n        FORMLY_VALIDATORS.forEach((opt) => observe(field, ['props', opt], ({ currentValue, firstChange }) => {\n            VALIDATORS = VALIDATORS.filter((o) => o !== opt);\n            if (currentValue != null && currentValue !== false) {\n                VALIDATORS.push(opt);\n            }\n            if (!firstChange && field.formControl) {\n                updateValidity(field.formControl);\n            }\n        }));\n        return (control) => {\n            if (VALIDATORS.length === 0) {\n                return null;\n            }\n            return Validators.compose(VALIDATORS.map((opt) => () => {\n                const value = field.props[opt];\n                switch (opt) {\n                    case 'required':\n                        return Validators.required(control);\n                    case 'pattern':\n                        return Validators.pattern(value)(control);\n                    case 'minLength':\n                        const minLengthResult = Validators.minLength(value)(control);\n                        const minLengthKey = this.config.getValidatorMessage('minlength') || field.validation?.messages?.minlength\n                            ? 'minlength'\n                            : 'minLength';\n                        return minLengthResult ? { [minLengthKey]: minLengthResult.minlength } : null;\n                    case 'maxLength':\n                        const maxLengthResult = Validators.maxLength(value)(control);\n                        const maxLengthKey = this.config.getValidatorMessage('maxlength') || field.validation?.messages?.maxlength\n                            ? 'maxlength'\n                            : 'maxLength';\n                        return maxLengthResult ? { [maxLengthKey]: maxLengthResult.maxlength } : null;\n                    case 'min':\n                        return Validators.min(value)(control);\n                    case 'max':\n                        return Validators.max(value)(control);\n                    default:\n                        return null;\n                }\n            }))(control);\n        };\n    }\n    wrapNgValidatorFn(field, validator, validatorName) {\n        let validatorOption;\n        if (typeof validator === 'string') {\n            validatorOption = clone(this.config.getValidator(validator));\n        }\n        if (typeof validator === 'object' && validator.name) {\n            validatorOption = clone(this.config.getValidator(validator.name));\n            if (validator.options) {\n                validatorOption.options = validator.options;\n            }\n        }\n        if (typeof validator === 'object' && validator.expression) {\n            const { expression, ...options } = validator;\n            validatorOption = {\n                name: validatorName,\n                validation: expression,\n                options: Object.keys(options).length > 0 ? options : null,\n            };\n        }\n        if (typeof validator === 'function') {\n            validatorOption = {\n                name: validatorName,\n                validation: validator,\n            };\n        }\n        return (control) => {\n            const errors = validatorOption.validation(control, field, validatorOption.options);\n            if (isPromise(errors)) {\n                return errors.then((v) => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption));\n            }\n            if (isObservable(errors)) {\n                return errors.pipe(map((v) => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption)));\n            }\n            return this.handleResult(field, validatorName ? !!errors : errors, validatorOption);\n        };\n    }\n    handleAsyncResult(field, errors, options) {\n        // workaround for https://github.com/angular/angular/issues/13200\n        field.options.detectChanges(field);\n        return this.handleResult(field, errors, options);\n    }\n    handleResult(field, errors, { name, options }) {\n        if (typeof errors === 'boolean') {\n            errors = errors ? null : { [name]: options ? options : true };\n        }\n        const ctrl = field.formControl;\n        ctrl?._childrenErrors?.[name]?.();\n        if (isObject(errors)) {\n            Object.keys(errors).forEach((name) => {\n                const errorPath = errors[name].errorPath ? errors[name].errorPath : options?.errorPath;\n                const childCtrl = errorPath ? field.formControl.get(errorPath) : null;\n                if (childCtrl) {\n                    const { errorPath: _errorPath, ...opts } = errors[name];\n                    childCtrl.setErrors({ ...(childCtrl.errors || {}), [name]: opts });\n                    !ctrl._childrenErrors && defineHiddenProp(ctrl, '_childrenErrors', {});\n                    ctrl._childrenErrors[name] = () => {\n                        const { [name]: _toDelete, ...childErrors } = childCtrl.errors || {};\n                        childCtrl.setErrors(Object.keys(childErrors).length === 0 ? null : childErrors);\n                    };\n                }\n            });\n        }\n        return errors;\n    }\n}\n\nclass FieldFormExtension {\n    prePopulate(field) {\n        if (!this.root) {\n            this.root = field;\n        }\n        if (field.parent) {\n            Object.defineProperty(field, 'form', {\n                get: () => field.parent.formControl,\n                configurable: true,\n            });\n        }\n    }\n    onPopulate(field) {\n        if (field.hasOwnProperty('fieldGroup') && !hasKey(field)) {\n            defineHiddenProp(field, 'formControl', field.form);\n        }\n        else {\n            this.addFormControl(field);\n        }\n    }\n    postPopulate(field) {\n        if (this.root !== field) {\n            return;\n        }\n        this.root = null;\n        const markForCheck = this.setValidators(field);\n        if (markForCheck && field.parent) {\n            let parent = field.parent;\n            while (parent) {\n                if (hasKey(parent) || !parent.parent) {\n                    updateValidity(parent.formControl, true);\n                }\n                parent = parent.parent;\n            }\n        }\n    }\n    addFormControl(field) {\n        let control = findControl(field);\n        if (!control) {\n            const controlOptions = { updateOn: field.modelOptions.updateOn };\n            if (field.fieldGroup) {\n                control = new FormGroup({}, controlOptions);\n            }\n            else {\n                const value = hasKey(field) ? getFieldValue(field) : field.defaultValue;\n                control = new FormControl({ value, disabled: false }, { ...controlOptions, initialValueIsDefault: true });\n            }\n        }\n        registerControl(field, control);\n    }\n    setValidators(field, disabled = false) {\n        if (disabled === false && hasKey(field) && field.props?.disabled) {\n            disabled = true;\n        }\n        let markForCheck = false;\n        field.fieldGroup?.forEach((f) => f && this.setValidators(f, disabled) && (markForCheck = true));\n        if (hasKey(field) || !field.parent || (!hasKey(field) && !field.fieldGroup)) {\n            const { formControl: c } = field;\n            if (c) {\n                if (hasKey(field) && c instanceof FormControl) {\n                    if (disabled && c.enabled) {\n                        c.disable({ emitEvent: false, onlySelf: true });\n                        markForCheck = true;\n                    }\n                    if (!disabled && c.disabled) {\n                        c.enable({ emitEvent: false, onlySelf: true });\n                        markForCheck = true;\n                    }\n                }\n                if (null === c.validator || null === c.asyncValidator) {\n                    c.setValidators(() => {\n                        const v = Validators.compose(this.mergeValidators(field, '_validators'));\n                        return v ? v(c) : null;\n                    });\n                    c.setAsyncValidators(() => {\n                        const v = Validators.composeAsync(this.mergeValidators(field, '_asyncValidators'));\n                        return v ? v(c) : of(null);\n                    });\n                    markForCheck = true;\n                }\n                if (markForCheck) {\n                    updateValidity(c, true);\n                    // update validity of `FormGroup` instance created by field with nested key.\n                    let parent = c.parent;\n                    for (let i = 1; i < getKeyPath(field).length; i++) {\n                        if (parent) {\n                            updateValidity(parent, true);\n                            parent = parent.parent;\n                        }\n                    }\n                }\n            }\n        }\n        return markForCheck;\n    }\n    mergeValidators(field, type) {\n        const validators = [];\n        const c = field.formControl;\n        if (c?._fields?.length > 1) {\n            c._fields\n                .filter((f) => !f._hide)\n                .forEach((f) => validators.push(...f[type]));\n        }\n        else if (field[type]) {\n            validators.push(...field[type]);\n        }\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((f) => f?.fieldGroup && !hasKey(f))\n                .forEach((f) => validators.push(...this.mergeValidators(f, type)));\n        }\n        return validators;\n    }\n}\n\nclass CoreExtension {\n    constructor(config) {\n        this.config = config;\n        this.formId = 0;\n    }\n    prePopulate(field) {\n        const root = field.parent;\n        this.initRootOptions(field);\n        this.initFieldProps(field);\n        if (root) {\n            Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });\n            Object.defineProperty(field, 'model', {\n                get: () => (hasKey(field) && field.fieldGroup ? getFieldValue(field) : root.model),\n                configurable: true,\n            });\n        }\n        Object.defineProperty(field, 'get', {\n            value: (key) => getField(field, key),\n            configurable: true,\n        });\n        this.getFieldComponentInstance(field).prePopulate?.(field);\n    }\n    onPopulate(field) {\n        this.initFieldOptions(field);\n        this.getFieldComponentInstance(field).onPopulate?.(field);\n        if (field.fieldGroup) {\n            field.fieldGroup.forEach((f, index) => {\n                if (f) {\n                    Object.defineProperty(f, 'parent', { get: () => field, configurable: true });\n                    Object.defineProperty(f, 'index', { get: () => index, configurable: true });\n                }\n                this.formId++;\n            });\n        }\n    }\n    postPopulate(field) {\n        this.getFieldComponentInstance(field).postPopulate?.(field);\n    }\n    initFieldProps(field) {\n        field.props ?? (field.props = field.templateOptions);\n        Object.defineProperty(field, 'templateOptions', {\n            get: () => field.props,\n            set: (props) => (field.props = props),\n            configurable: true,\n        });\n    }\n    initRootOptions(field) {\n        if (field.parent) {\n            return;\n        }\n        const options = field.options;\n        field.options.formState = field.options.formState || {};\n        if (!options.showError) {\n            options.showError = this.config.extras.showError;\n        }\n        if (!options.fieldChanges) {\n            defineHiddenProp(options, 'fieldChanges', new Subject());\n        }\n        if (!options._hiddenFieldsForCheck) {\n            options._hiddenFieldsForCheck = [];\n        }\n        options._markForCheck = (f) => {\n            console.warn(`Formly: 'options._markForCheck' is deprecated since v6.0, use 'options.detectChanges' instead.`);\n            options.detectChanges(f);\n        };\n        options.detectChanges = (f) => {\n            if (f._componentRefs) {\n                f.options.checkExpressions(f);\n                markFieldForCheck(f);\n            }\n            f.fieldGroup?.forEach((f) => f && options.detectChanges(f));\n        };\n        options.resetModel = (model) => {\n            model = clone(model ?? options._initialModel);\n            if (field.model) {\n                Object.keys(field.model).forEach((k) => delete field.model[k]);\n                Object.assign(field.model, model || {});\n            }\n            options.build(field);\n            field.form.reset(field.model);\n            if (options.parentForm && options.parentForm.control === field.formControl) {\n                options.parentForm.submitted = false;\n            }\n        };\n        options.updateInitialValue = (model) => (options._initialModel = clone(model ?? field.model));\n        field.options.updateInitialValue();\n    }\n    initFieldOptions(field) {\n        reverseDeepMerge(field, {\n            id: getFieldId(`formly_${this.formId}`, field, field.index),\n            hooks: {},\n            modelOptions: {},\n            validation: { messages: {} },\n            props: !field.type || !hasKey(field)\n                ? {}\n                : {\n                    label: '',\n                    placeholder: '',\n                    disabled: false,\n                },\n        });\n        if (this.config.extras.resetFieldOnHide && field.resetOnHide !== false) {\n            field.resetOnHide = true;\n        }\n        if (field.type !== 'formly-template' &&\n            (field.template || field.expressions?.template || field.expressionProperties?.template)) {\n            field.type = 'formly-template';\n        }\n        if (!field.type && field.fieldGroup) {\n            field.type = 'formly-group';\n        }\n        if (field.type) {\n            this.config.getMergedField(field);\n        }\n        if (hasKey(field) && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n            const isHidden = (f) => f.hide || f.expressions?.hide || f.hideExpression;\n            let setDefaultValue = !field.resetOnHide || !isHidden(field);\n            if (!isHidden(field) && field.resetOnHide) {\n                let parent = field.parent;\n                while (parent && !isHidden(parent)) {\n                    parent = parent.parent;\n                }\n                setDefaultValue = !parent || !isHidden(parent);\n            }\n            if (setDefaultValue) {\n                assignFieldValue(field, field.defaultValue);\n            }\n        }\n        field.wrappers = field.wrappers || [];\n    }\n    getFieldComponentInstance(field) {\n        const componentRefInstance = () => {\n            let componentRef = this.config.resolveFieldTypeRef(field);\n            const fieldComponentRef = field._componentRefs?.slice(-1)[0];\n            if (fieldComponentRef instanceof ComponentRef &&\n                fieldComponentRef?.componentType === componentRef?.componentType) {\n                componentRef = fieldComponentRef;\n            }\n            return componentRef?.instance;\n        };\n        if (!field._proxyInstance) {\n            defineHiddenProp(field, '_proxyInstance', new Proxy({}, {\n                get: (_, prop) => componentRefInstance()?.[prop],\n                set: (_, prop, value) => (componentRefInstance()[prop] = value),\n            }));\n        }\n        return field._proxyInstance;\n    }\n}\n\nfunction defaultFormlyConfig(config) {\n    return {\n        types: [\n            { name: 'formly-group', component: FormlyGroup },\n            { name: 'formly-template', component: FormlyTemplateType },\n        ],\n        extensions: [\n            { name: 'core', extension: new CoreExtension(config), priority: -250 },\n            { name: 'field-validation', extension: new FieldValidationExtension(config), priority: -200 },\n            { name: 'field-form', extension: new FieldFormExtension(), priority: -150 },\n            { name: 'field-expression', extension: new FieldExpressionExtension(), priority: -100 },\n        ],\n    };\n}\nclass FormlyModule {\n    constructor(configService, configs = []) {\n        if (!configs) {\n            return;\n        }\n        configs.forEach((config) => configService.addConfig(config));\n    }\n    static forRoot(config = {}) {\n        return {\n            ngModule: FormlyModule,\n            providers: [\n                { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n                { provide: FORMLY_CONFIG, useValue: config, multi: true },\n                FormlyConfig,\n                FormlyFormBuilder,\n            ],\n        };\n    }\n    static forChild(config = {}) {\n        return {\n            ngModule: FormlyModule,\n            providers: [\n                { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n                { provide: FORMLY_CONFIG, useValue: config, multi: true },\n                FormlyFormBuilder,\n            ],\n        };\n    }\n}\nFormlyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, deps: [{ token: FormlyConfig }, { token: FORMLY_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\nFormlyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, declarations: [FormlyTemplate,\n        FormlyForm,\n        FormlyField,\n        FormlyAttributes,\n        FormlyGroup,\n        FormlyValidationMessage,\n        FormlyTemplateType], imports: [CommonModule], exports: [FormlyTemplate, FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage] });\nFormlyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        FormlyTemplate,\n                        FormlyForm,\n                        FormlyField,\n                        FormlyAttributes,\n                        FormlyGroup,\n                        FormlyValidationMessage,\n                        FormlyTemplateType,\n                    ],\n                    exports: [FormlyTemplate, FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n                    imports: [CommonModule],\n                }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [FORMLY_CONFIG]\n                }] }]; } });\n\n/*\n * Public API Surface of core\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FORMLY_CONFIG, FieldArrayType, FieldType, FieldWrapper, FormlyConfig, FormlyField, FormlyForm, FormlyFormBuilder, FormlyModule, FormlyAttributes as ɵFormlyAttributes, FormlyGroup as ɵFormlyGroup, FormlyTemplate as ɵFormlyTemplate, FormlyValidationMessage as ɵFormlyValidationMessage, clone as ɵclone, defineHiddenProp as ɵdefineHiddenProp, getFieldValue as ɵgetFieldValue, hasKey as ɵhasKey, observe as ɵobserve, reverseDeepMerge as ɵreverseDeepMerge };\n//# sourceMappingURL=ngx-formly-core.mjs.map\n"]},"metadata":{},"sourceType":"module"}