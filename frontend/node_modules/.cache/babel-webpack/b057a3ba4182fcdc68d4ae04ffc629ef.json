{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Pipe, NgModule } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { map, filter, tap } from 'rxjs/operators';\n\nclass FormlySelectOptionsPipe {\n  transform(options, field) {\n    if (!(options instanceof Observable)) {\n      options = this.observableOf(options, field);\n    } else {\n      this.dispose();\n    }\n\n    return options.pipe(map(value => this.transformOptions(value, field)));\n  }\n\n  ngOnDestroy() {\n    this.dispose();\n  }\n\n  transformOptions(options, field) {\n    const to = this.transformSelectProps(field);\n    const opts = [];\n    const groups = {};\n    options?.forEach(option => {\n      const o = this.transformOption(option, to);\n\n      if (o.group) {\n        const id = groups[o.label];\n\n        if (id === undefined) {\n          groups[o.label] = opts.push(o) - 1;\n        } else {\n          o.group.forEach(o => opts[id].group.push(o));\n        }\n      } else {\n        opts.push(o);\n      }\n    });\n    return opts;\n  }\n\n  transformOption(option, props) {\n    const group = props.groupProp(option);\n\n    if (Array.isArray(group)) {\n      return {\n        label: props.labelProp(option),\n        group: group.map(opt => this.transformOption(opt, props))\n      };\n    }\n\n    option = {\n      label: props.labelProp(option),\n      value: props.valueProp(option),\n      disabled: !!props.disabledProp(option)\n    };\n\n    if (group) {\n      return {\n        label: group,\n        group: [option]\n      };\n    }\n\n    return option;\n  }\n\n  transformSelectProps(field) {\n    const props = field?.props || field?.templateOptions || {};\n\n    const selectPropFn = prop => typeof prop === 'function' ? prop : o => o[prop];\n\n    return {\n      groupProp: selectPropFn(props.groupProp || 'group'),\n      labelProp: selectPropFn(props.labelProp || 'label'),\n      valueProp: selectPropFn(props.valueProp || 'value'),\n      disabledProp: selectPropFn(props.disabledProp || 'disabled')\n    };\n  }\n\n  dispose() {\n    if (this._options) {\n      this._options.complete();\n\n      this._options = null;\n    }\n\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n\n      this._subscription = null;\n    }\n  }\n\n  observableOf(options, f) {\n    this.dispose();\n\n    if (f && f.options && f.options.fieldChanges) {\n      this._subscription = f.options.fieldChanges.pipe(filter(({\n        property,\n        type,\n        field\n      }) => {\n        return type === 'expressionChanges' && (property.indexOf('templateOptions.options') === 0 || property.indexOf('props.options') === 0) && field === f && Array.isArray(field.props.options) && !!this._options;\n      }), tap(() => this._options.next(f.props.options))).subscribe();\n    }\n\n    this._options = new BehaviorSubject(options);\n    return this._options.asObservable();\n  }\n\n}\n\nFormlySelectOptionsPipe.ɵfac = function FormlySelectOptionsPipe_Factory(t) {\n  return new (t || FormlySelectOptionsPipe)();\n};\n\nFormlySelectOptionsPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"formlySelectOptions\",\n  type: FormlySelectOptionsPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlySelectOptionsPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'formlySelectOptions'\n    }]\n  }], null, null);\n})();\n\nclass FormlySelectModule {}\n\nFormlySelectModule.ɵfac = function FormlySelectModule_Factory(t) {\n  return new (t || FormlySelectModule)();\n};\n\nFormlySelectModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: FormlySelectModule\n});\nFormlySelectModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlySelectModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [FormlySelectOptionsPipe],\n      exports: [FormlySelectOptionsPipe]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FormlySelectModule, FormlySelectOptionsPipe }; //# sourceMappingURL=ngx-formly-core-select.mjs.map","map":{"version":3,"sources":["/home/juancamilo/Documentos/Developer/Api WEB/Projecto JYW/JYW/frontend/jyw/node_modules/@ngx-formly/core/fesm2020/ngx-formly-core-select.mjs"],"names":["i0","Pipe","NgModule","Observable","BehaviorSubject","map","filter","tap","FormlySelectOptionsPipe","transform","options","field","observableOf","dispose","pipe","value","transformOptions","ngOnDestroy","to","transformSelectProps","opts","groups","forEach","option","o","transformOption","group","id","label","undefined","push","props","groupProp","Array","isArray","labelProp","opt","valueProp","disabled","disabledProp","templateOptions","selectPropFn","prop","_options","complete","_subscription","unsubscribe","f","fieldChanges","property","type","indexOf","next","subscribe","asObservable","ɵfac","ɵpipe","args","name","FormlySelectModule","ɵmod","ɵinj","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Pipe, NgModule } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { map, filter, tap } from 'rxjs/operators';\n\nclass FormlySelectOptionsPipe {\n    transform(options, field) {\n        if (!(options instanceof Observable)) {\n            options = this.observableOf(options, field);\n        }\n        else {\n            this.dispose();\n        }\n        return options.pipe(map((value) => this.transformOptions(value, field)));\n    }\n    ngOnDestroy() {\n        this.dispose();\n    }\n    transformOptions(options, field) {\n        const to = this.transformSelectProps(field);\n        const opts = [];\n        const groups = {};\n        options?.forEach((option) => {\n            const o = this.transformOption(option, to);\n            if (o.group) {\n                const id = groups[o.label];\n                if (id === undefined) {\n                    groups[o.label] = opts.push(o) - 1;\n                }\n                else {\n                    o.group.forEach((o) => opts[id].group.push(o));\n                }\n            }\n            else {\n                opts.push(o);\n            }\n        });\n        return opts;\n    }\n    transformOption(option, props) {\n        const group = props.groupProp(option);\n        if (Array.isArray(group)) {\n            return {\n                label: props.labelProp(option),\n                group: group.map((opt) => this.transformOption(opt, props)),\n            };\n        }\n        option = {\n            label: props.labelProp(option),\n            value: props.valueProp(option),\n            disabled: !!props.disabledProp(option),\n        };\n        if (group) {\n            return { label: group, group: [option] };\n        }\n        return option;\n    }\n    transformSelectProps(field) {\n        const props = field?.props || field?.templateOptions || {};\n        const selectPropFn = (prop) => (typeof prop === 'function' ? prop : (o) => o[prop]);\n        return {\n            groupProp: selectPropFn(props.groupProp || 'group'),\n            labelProp: selectPropFn(props.labelProp || 'label'),\n            valueProp: selectPropFn(props.valueProp || 'value'),\n            disabledProp: selectPropFn(props.disabledProp || 'disabled'),\n        };\n    }\n    dispose() {\n        if (this._options) {\n            this._options.complete();\n            this._options = null;\n        }\n        if (this._subscription) {\n            this._subscription.unsubscribe();\n            this._subscription = null;\n        }\n    }\n    observableOf(options, f) {\n        this.dispose();\n        if (f && f.options && f.options.fieldChanges) {\n            this._subscription = f.options.fieldChanges\n                .pipe(filter(({ property, type, field }) => {\n                return (type === 'expressionChanges' &&\n                    (property.indexOf('templateOptions.options') === 0 || property.indexOf('props.options') === 0) &&\n                    field === f &&\n                    Array.isArray(field.props.options) &&\n                    !!this._options);\n            }), tap(() => this._options.next(f.props.options)))\n                .subscribe();\n        }\n        this._options = new BehaviorSubject(options);\n        return this._options.asObservable();\n    }\n}\nFormlySelectOptionsPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlySelectOptionsPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\nFormlySelectOptionsPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlySelectOptionsPipe, name: \"formlySelectOptions\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlySelectOptionsPipe, decorators: [{\n            type: Pipe,\n            args: [{ name: 'formlySelectOptions' }]\n        }] });\n\nclass FormlySelectModule {\n}\nFormlySelectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlySelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nFormlySelectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlySelectModule, declarations: [FormlySelectOptionsPipe], exports: [FormlySelectOptionsPipe] });\nFormlySelectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlySelectModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlySelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [FormlySelectOptionsPipe],\n                    exports: [FormlySelectOptionsPipe],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FormlySelectModule, FormlySelectOptionsPipe };\n//# sourceMappingURL=ngx-formly-core-select.mjs.map\n"]},"metadata":{},"sourceType":"module"}