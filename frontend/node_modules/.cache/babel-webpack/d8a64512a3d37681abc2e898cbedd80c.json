{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport * as i5 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i4 from '@ngx-formly/core';\nimport { FormlyModule } from '@ngx-formly/core';\nimport * as i3 from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport * as i2 from '@angular/material/checkbox';\nimport { MatCheckbox, MatCheckboxModule } from '@angular/material/checkbox';\nimport * as i1 from '@angular/cdk/a11y';\n\nfunction FormlyFieldCheckbox_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 2);\n    i0.ɵɵtext(1, \"*\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nclass FormlyFieldCheckbox extends FieldType {\n  constructor(renderer, focusMonitor) {\n    super();\n    this.renderer = renderer;\n    this.focusMonitor = focusMonitor;\n    this.defaultOptions = {\n      props: {\n        hideFieldUnderline: true,\n        indeterminate: true,\n        floatLabel: 'always',\n        hideLabel: true,\n        color: 'accent' // workaround for https://github.com/angular/components/issues/18465\n\n      }\n    };\n  }\n\n  onContainerClick(event) {\n    this.checkbox.focus();\n    super.onContainerClick(event);\n  }\n\n  ngAfterViewInit() {\n    if (this.checkbox) {\n      this.focusMonitor.monitor(this.checkbox._inputElement, true).subscribe(focusOrigin => {\n        if (focusOrigin) {\n          this.props.focus && this.props.focus(this.field);\n        } else {\n          this.props.blur && this.props.blur(this.field);\n        }\n      });\n    }\n  }\n\n  ngAfterViewChecked() {\n    if (this.required !== this._required && this.checkbox && this.checkbox._inputElement) {\n      this._required = this.required;\n      const inputElement = this.checkbox._inputElement.nativeElement;\n\n      if (this.required) {\n        this.renderer.setAttribute(inputElement, 'required', 'required');\n      } else {\n        this.renderer.removeAttribute(inputElement, 'required');\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this.checkbox) {\n      this.focusMonitor.stopMonitoring(this.checkbox._inputElement);\n    }\n  }\n\n}\n\nFormlyFieldCheckbox.ɵfac = function FormlyFieldCheckbox_Factory(t) {\n  return new (t || FormlyFieldCheckbox)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n};\n\nFormlyFieldCheckbox.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: FormlyFieldCheckbox,\n  selectors: [[\"formly-field-mat-checkbox\"]],\n  viewQuery: function FormlyFieldCheckbox_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(MatCheckbox, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.checkbox = _t.first);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 9,\n  consts: [[3, \"formControl\", \"id\", \"formlyAttributes\", \"tabIndex\", \"indeterminate\", \"color\", \"labelPosition\"], [\"aria-hidden\", \"true\", \"class\", \"mat-form-field-required-marker\", 4, \"ngIf\"], [\"aria-hidden\", \"true\", 1, \"mat-form-field-required-marker\"]],\n  template: function FormlyFieldCheckbox_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-checkbox\", 0);\n      i0.ɵɵtext(1);\n      i0.ɵɵtemplate(2, FormlyFieldCheckbox_span_2_Template, 2, 0, \"span\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formControl\", ctx.formControl)(\"id\", ctx.id)(\"formlyAttributes\", ctx.field)(\"tabIndex\", ctx.props.tabindex)(\"indeterminate\", ctx.props.indeterminate && ctx.formControl.value == null)(\"color\", ctx.props.color)(\"labelPosition\", ctx.props.labelPosition);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.props.label, \" \");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.props.required && ctx.props.hideRequiredMarker !== true);\n    }\n  },\n  directives: [i2.MatCheckbox, i3.NgControlStatus, i3.FormControlDirective, i4.ɵFormlyAttributes, i5.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyFieldCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'formly-field-mat-checkbox',\n      template: `\n    <mat-checkbox\n      [formControl]=\"formControl\"\n      [id]=\"id\"\n      [formlyAttributes]=\"field\"\n      [tabIndex]=\"props.tabindex\"\n      [indeterminate]=\"props.indeterminate && formControl.value == null\"\n      [color]=\"props.color\"\n      [labelPosition]=\"props.labelPosition\"\n    >\n      {{ props.label }}\n      <span\n        *ngIf=\"props.required && props.hideRequiredMarker !== true\"\n        aria-hidden=\"true\"\n        class=\"mat-form-field-required-marker\"\n        >*</span\n      >\n    </mat-checkbox>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i1.FocusMonitor\n    }];\n  }, {\n    checkbox: [{\n      type: ViewChild,\n      args: [MatCheckbox, {\n        static: true\n      }]\n    }]\n  });\n})();\n\nclass FormlyMatCheckboxModule {}\n\nFormlyMatCheckboxModule.ɵfac = function FormlyMatCheckboxModule_Factory(t) {\n  return new (t || FormlyMatCheckboxModule)();\n};\n\nFormlyMatCheckboxModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: FormlyMatCheckboxModule\n});\nFormlyMatCheckboxModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, ReactiveFormsModule, MatCheckboxModule, FormlyMatFormFieldModule, FormlyModule.forChild({\n    types: [{\n      name: 'checkbox',\n      component: FormlyFieldCheckbox,\n      wrappers: ['form-field']\n    }, {\n      name: 'boolean',\n      extends: 'checkbox'\n    }]\n  })]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyMatCheckboxModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [FormlyFieldCheckbox],\n      imports: [CommonModule, ReactiveFormsModule, MatCheckboxModule, FormlyMatFormFieldModule, FormlyModule.forChild({\n        types: [{\n          name: 'checkbox',\n          component: FormlyFieldCheckbox,\n          wrappers: ['form-field']\n        }, {\n          name: 'boolean',\n          extends: 'checkbox'\n        }]\n      })]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FormlyFieldCheckbox, FormlyMatCheckboxModule }; //# sourceMappingURL=ngx-formly-material-checkbox.mjs.map","map":{"version":3,"sources":["/home/juancamilo/Documentos/Developer/Api WEB/Projecto JYW/JYW/frontend/jyw/node_modules/@ngx-formly/material/fesm2020/ngx-formly-material-checkbox.mjs"],"names":["i0","Component","ChangeDetectionStrategy","ViewChild","NgModule","i5","CommonModule","i4","FormlyModule","i3","ReactiveFormsModule","FieldType","FormlyMatFormFieldModule","i2","MatCheckbox","MatCheckboxModule","i1","FormlyFieldCheckbox","constructor","renderer","focusMonitor","defaultOptions","props","hideFieldUnderline","indeterminate","floatLabel","hideLabel","color","onContainerClick","event","checkbox","focus","ngAfterViewInit","monitor","_inputElement","subscribe","focusOrigin","field","blur","ngAfterViewChecked","required","_required","inputElement","nativeElement","setAttribute","removeAttribute","ngOnDestroy","stopMonitoring","ɵfac","Renderer2","FocusMonitor","ɵcmp","NgControlStatus","FormControlDirective","ɵFormlyAttributes","NgIf","type","args","selector","template","changeDetection","OnPush","static","FormlyMatCheckboxModule","ɵmod","ɵinj","forChild","types","name","component","wrappers","extends","declarations","imports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport * as i5 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i4 from '@ngx-formly/core';\nimport { FormlyModule } from '@ngx-formly/core';\nimport * as i3 from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport * as i2 from '@angular/material/checkbox';\nimport { MatCheckbox, MatCheckboxModule } from '@angular/material/checkbox';\nimport * as i1 from '@angular/cdk/a11y';\n\nclass FormlyFieldCheckbox extends FieldType {\n    constructor(renderer, focusMonitor) {\n        super();\n        this.renderer = renderer;\n        this.focusMonitor = focusMonitor;\n        this.defaultOptions = {\n            props: {\n                hideFieldUnderline: true,\n                indeterminate: true,\n                floatLabel: 'always',\n                hideLabel: true,\n                color: 'accent', // workaround for https://github.com/angular/components/issues/18465\n            },\n        };\n    }\n    onContainerClick(event) {\n        this.checkbox.focus();\n        super.onContainerClick(event);\n    }\n    ngAfterViewInit() {\n        if (this.checkbox) {\n            this.focusMonitor.monitor(this.checkbox._inputElement, true).subscribe((focusOrigin) => {\n                if (focusOrigin) {\n                    this.props.focus && this.props.focus(this.field);\n                }\n                else {\n                    this.props.blur && this.props.blur(this.field);\n                }\n            });\n        }\n    }\n    ngAfterViewChecked() {\n        if (this.required !== this._required && this.checkbox && this.checkbox._inputElement) {\n            this._required = this.required;\n            const inputElement = this.checkbox._inputElement.nativeElement;\n            if (this.required) {\n                this.renderer.setAttribute(inputElement, 'required', 'required');\n            }\n            else {\n                this.renderer.removeAttribute(inputElement, 'required');\n            }\n        }\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this.checkbox) {\n            this.focusMonitor.stopMonitoring(this.checkbox._inputElement);\n        }\n    }\n}\nFormlyFieldCheckbox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldCheckbox, deps: [{ token: i0.Renderer2 }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });\nFormlyFieldCheckbox.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyFieldCheckbox, selector: \"formly-field-mat-checkbox\", viewQueries: [{ propertyName: \"checkbox\", first: true, predicate: MatCheckbox, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: `\n    <mat-checkbox\n      [formControl]=\"formControl\"\n      [id]=\"id\"\n      [formlyAttributes]=\"field\"\n      [tabIndex]=\"props.tabindex\"\n      [indeterminate]=\"props.indeterminate && formControl.value == null\"\n      [color]=\"props.color\"\n      [labelPosition]=\"props.labelPosition\"\n    >\n      {{ props.label }}\n      <span\n        *ngIf=\"props.required && props.hideRequiredMarker !== true\"\n        aria-hidden=\"true\"\n        class=\"mat-form-field-required-marker\"\n        >*</span\n      >\n    </mat-checkbox>\n  `, isInline: true, components: [{ type: i2.MatCheckbox, selector: \"mat-checkbox\", inputs: [\"disableRipple\", \"color\", \"tabIndex\", \"aria-label\", \"aria-labelledby\", \"aria-describedby\", \"id\", \"required\", \"labelPosition\", \"name\", \"value\", \"checked\", \"disabled\", \"indeterminate\"], outputs: [\"change\", \"indeterminateChange\"], exportAs: [\"matCheckbox\"] }], directives: [{ type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i3.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }, { type: i4.ɵFormlyAttributes, selector: \"[formlyAttributes]\", inputs: [\"formlyAttributes\", \"id\"] }, { type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldCheckbox, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-field-mat-checkbox',\n                    template: `\n    <mat-checkbox\n      [formControl]=\"formControl\"\n      [id]=\"id\"\n      [formlyAttributes]=\"field\"\n      [tabIndex]=\"props.tabindex\"\n      [indeterminate]=\"props.indeterminate && formControl.value == null\"\n      [color]=\"props.color\"\n      [labelPosition]=\"props.labelPosition\"\n    >\n      {{ props.label }}\n      <span\n        *ngIf=\"props.required && props.hideRequiredMarker !== true\"\n        aria-hidden=\"true\"\n        class=\"mat-form-field-required-marker\"\n        >*</span\n      >\n    </mat-checkbox>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i1.FocusMonitor }]; }, propDecorators: { checkbox: [{\n                type: ViewChild,\n                args: [MatCheckbox, { static: true }]\n            }] } });\n\nclass FormlyMatCheckboxModule {\n}\nFormlyMatCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nFormlyMatCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatCheckboxModule, declarations: [FormlyFieldCheckbox], imports: [CommonModule,\n        ReactiveFormsModule,\n        MatCheckboxModule,\n        FormlyMatFormFieldModule, i4.FormlyModule] });\nFormlyMatCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatCheckboxModule, imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            MatCheckboxModule,\n            FormlyMatFormFieldModule,\n            FormlyModule.forChild({\n                types: [\n                    {\n                        name: 'checkbox',\n                        component: FormlyFieldCheckbox,\n                        wrappers: ['form-field'],\n                    },\n                    {\n                        name: 'boolean',\n                        extends: 'checkbox',\n                    },\n                ],\n            }),\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatCheckboxModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [FormlyFieldCheckbox],\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        MatCheckboxModule,\n                        FormlyMatFormFieldModule,\n                        FormlyModule.forChild({\n                            types: [\n                                {\n                                    name: 'checkbox',\n                                    component: FormlyFieldCheckbox,\n                                    wrappers: ['form-field'],\n                                },\n                                {\n                                    name: 'boolean',\n                                    extends: 'checkbox',\n                                },\n                            ],\n                        }),\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FormlyFieldCheckbox, FormlyMatCheckboxModule };\n//# sourceMappingURL=ngx-formly-material-checkbox.mjs.map\n"]},"metadata":{},"sourceType":"module"}