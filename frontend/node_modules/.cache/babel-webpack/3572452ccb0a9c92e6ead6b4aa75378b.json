{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from '@ngx-formly/core';\nimport { ɵobserve, FormlyModule } from '@ngx-formly/core';\nimport * as i2 from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport * as i5 from '@ngx-formly/core/select';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport * as i1 from '@angular/material/radio';\nimport { MatRadioGroup, MatRadioModule } from '@angular/material/radio';\n\nfunction FormlyFieldRadio_mat_radio_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-radio-button\", 2);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"id\", ctx_r0.id + \"_\" + i_r2)(\"color\", ctx_r0.props.color)(\"labelPosition\", ctx_r0.props.labelPosition)(\"disabled\", option_r1.disabled)(\"value\", option_r1.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r1.label, \" \");\n  }\n}\n\nclass FormlyFieldRadio extends FieldType {\n  constructor() {\n    super(...arguments);\n    this.defaultOptions = {\n      props: {\n        hideFieldUnderline: true,\n        floatLabel: 'always',\n        tabindex: -1\n      }\n    };\n  }\n\n  ngAfterViewInit() {\n    this.focusObserver = ɵobserve(this.field, ['focus'], ({\n      currentValue\n    }) => {\n      if (this.props.tabindex === -1 && currentValue && this.radioGroup._radios.length > 0) {\n        // https://github.com/ngx-formly/ngx-formly/issues/2498\n        setTimeout(() => {\n          const radio = this.radioGroup.selected ? this.radioGroup.selected : this.radioGroup._radios.first;\n          radio.focus();\n        });\n      }\n    });\n  } // TODO: find a solution to prevent scroll on focus\n\n\n  onContainerClick() {}\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this.focusObserver && this.focusObserver.unsubscribe();\n  }\n\n}\n\nFormlyFieldRadio.ɵfac = /* @__PURE__ */function () {\n  let ɵFormlyFieldRadio_BaseFactory;\n  return function FormlyFieldRadio_Factory(t) {\n    return (ɵFormlyFieldRadio_BaseFactory || (ɵFormlyFieldRadio_BaseFactory = i0.ɵɵgetInheritedFactory(FormlyFieldRadio)))(t || FormlyFieldRadio);\n  };\n}();\n\nFormlyFieldRadio.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: FormlyFieldRadio,\n  selectors: [[\"formly-field-mat-radio\"]],\n  viewQuery: function FormlyFieldRadio_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(MatRadioGroup, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.radioGroup = _t.first);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 4,\n  vars: 10,\n  consts: [[3, \"formControl\", \"formlyAttributes\", \"required\", \"tabindex\"], [3, \"id\", \"color\", \"labelPosition\", \"disabled\", \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"id\", \"color\", \"labelPosition\", \"disabled\", \"value\"]],\n  template: function FormlyFieldRadio_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-radio-group\", 0);\n      i0.ɵɵtemplate(1, FormlyFieldRadio_mat_radio_button_1_Template, 2, 6, \"mat-radio-button\", 1);\n      i0.ɵɵpipe(2, \"async\");\n      i0.ɵɵpipe(3, \"formlySelectOptions\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formControl\", ctx.formControl)(\"formlyAttributes\", ctx.field)(\"required\", ctx.required)(\"tabindex\", ctx.props.tabindex);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(2, 5, i0.ɵɵpipeBind2(3, 7, ctx.props.options, ctx.field)));\n    }\n  },\n  directives: [i1.MatRadioGroup, i2.NgControlStatus, i2.FormControlDirective, i3.ɵFormlyAttributes, i2.RequiredValidator, i4.NgForOf, i1.MatRadioButton],\n  pipes: [i4.AsyncPipe, i5.FormlySelectOptionsPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyFieldRadio, [{\n    type: Component,\n    args: [{\n      selector: 'formly-field-mat-radio',\n      template: `\n    <mat-radio-group\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      [required]=\"required\"\n      [tabindex]=\"props.tabindex\"\n    >\n      <mat-radio-button\n        *ngFor=\"let option of props.options | formlySelectOptions : field | async; let i = index\"\n        [id]=\"id + '_' + i\"\n        [color]=\"props.color\"\n        [labelPosition]=\"props.labelPosition\"\n        [disabled]=\"option.disabled\"\n        [value]=\"option.value\"\n      >\n        {{ option.label }}\n      </mat-radio-button>\n    </mat-radio-group>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    radioGroup: [{\n      type: ViewChild,\n      args: [MatRadioGroup, {\n        static: true\n      }]\n    }]\n  });\n})();\n\nclass FormlyMatRadioModule {}\n\nFormlyMatRadioModule.ɵfac = function FormlyMatRadioModule_Factory(t) {\n  return new (t || FormlyMatRadioModule)();\n};\n\nFormlyMatRadioModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: FormlyMatRadioModule\n});\nFormlyMatRadioModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, ReactiveFormsModule, MatRadioModule, FormlyMatFormFieldModule, FormlySelectModule, FormlyModule.forChild({\n    types: [{\n      name: 'radio',\n      component: FormlyFieldRadio,\n      wrappers: ['form-field']\n    }]\n  })]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyMatRadioModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [FormlyFieldRadio],\n      imports: [CommonModule, ReactiveFormsModule, MatRadioModule, FormlyMatFormFieldModule, FormlySelectModule, FormlyModule.forChild({\n        types: [{\n          name: 'radio',\n          component: FormlyFieldRadio,\n          wrappers: ['form-field']\n        }]\n      })]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FormlyFieldRadio, FormlyMatRadioModule }; //# sourceMappingURL=ngx-formly-material-radio.mjs.map","map":{"version":3,"sources":["/home/juancamilo/Documentos/Developer/Api WEB/Projecto JYW/JYW/frontend/jyw/node_modules/@ngx-formly/material/fesm2020/ngx-formly-material-radio.mjs"],"names":["i0","Component","ChangeDetectionStrategy","ViewChild","NgModule","i4","CommonModule","i3","ɵobserve","FormlyModule","i2","ReactiveFormsModule","i5","FormlySelectModule","FieldType","FormlyMatFormFieldModule","i1","MatRadioGroup","MatRadioModule","FormlyFieldRadio","constructor","arguments","defaultOptions","props","hideFieldUnderline","floatLabel","tabindex","ngAfterViewInit","focusObserver","field","currentValue","radioGroup","_radios","length","setTimeout","radio","selected","first","focus","onContainerClick","ngOnDestroy","unsubscribe","ɵfac","ɵcmp","NgControlStatus","FormControlDirective","ɵFormlyAttributes","RequiredValidator","NgForOf","MatRadioButton","AsyncPipe","FormlySelectOptionsPipe","type","args","selector","template","changeDetection","OnPush","static","FormlyMatRadioModule","ɵmod","ɵinj","forChild","types","name","component","wrappers","declarations","imports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from '@ngx-formly/core';\nimport { ɵobserve, FormlyModule } from '@ngx-formly/core';\nimport * as i2 from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport * as i5 from '@ngx-formly/core/select';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport * as i1 from '@angular/material/radio';\nimport { MatRadioGroup, MatRadioModule } from '@angular/material/radio';\n\nclass FormlyFieldRadio extends FieldType {\n    constructor() {\n        super(...arguments);\n        this.defaultOptions = {\n            props: {\n                hideFieldUnderline: true,\n                floatLabel: 'always',\n                tabindex: -1,\n            },\n        };\n    }\n    ngAfterViewInit() {\n        this.focusObserver = ɵobserve(this.field, ['focus'], ({ currentValue }) => {\n            if (this.props.tabindex === -1 && currentValue && this.radioGroup._radios.length > 0) {\n                // https://github.com/ngx-formly/ngx-formly/issues/2498\n                setTimeout(() => {\n                    const radio = this.radioGroup.selected ? this.radioGroup.selected : this.radioGroup._radios.first;\n                    radio.focus();\n                });\n            }\n        });\n    }\n    // TODO: find a solution to prevent scroll on focus\n    onContainerClick() { }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this.focusObserver && this.focusObserver.unsubscribe();\n    }\n}\nFormlyFieldRadio.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldRadio, deps: null, target: i0.ɵɵFactoryTarget.Component });\nFormlyFieldRadio.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyFieldRadio, selector: \"formly-field-mat-radio\", viewQueries: [{ propertyName: \"radioGroup\", first: true, predicate: MatRadioGroup, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: `\n    <mat-radio-group\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      [required]=\"required\"\n      [tabindex]=\"props.tabindex\"\n    >\n      <mat-radio-button\n        *ngFor=\"let option of props.options | formlySelectOptions : field | async; let i = index\"\n        [id]=\"id + '_' + i\"\n        [color]=\"props.color\"\n        [labelPosition]=\"props.labelPosition\"\n        [disabled]=\"option.disabled\"\n        [value]=\"option.value\"\n      >\n        {{ option.label }}\n      </mat-radio-button>\n    </mat-radio-group>\n  `, isInline: true, components: [{ type: i1.MatRadioButton, selector: \"mat-radio-button\", inputs: [\"disableRipple\", \"tabIndex\"], exportAs: [\"matRadioButton\"] }], directives: [{ type: i1.MatRadioGroup, selector: \"mat-radio-group\", exportAs: [\"matRadioGroup\"] }, { type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i2.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }, { type: i3.ɵFormlyAttributes, selector: \"[formlyAttributes]\", inputs: [\"formlyAttributes\", \"id\"] }, { type: i2.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { type: i4.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], pipes: { \"async\": i4.AsyncPipe, \"formlySelectOptions\": i5.FormlySelectOptionsPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldRadio, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-field-mat-radio',\n                    template: `\n    <mat-radio-group\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      [required]=\"required\"\n      [tabindex]=\"props.tabindex\"\n    >\n      <mat-radio-button\n        *ngFor=\"let option of props.options | formlySelectOptions : field | async; let i = index\"\n        [id]=\"id + '_' + i\"\n        [color]=\"props.color\"\n        [labelPosition]=\"props.labelPosition\"\n        [disabled]=\"option.disabled\"\n        [value]=\"option.value\"\n      >\n        {{ option.label }}\n      </mat-radio-button>\n    </mat-radio-group>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], propDecorators: { radioGroup: [{\n                type: ViewChild,\n                args: [MatRadioGroup, { static: true }]\n            }] } });\n\nclass FormlyMatRadioModule {\n}\nFormlyMatRadioModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatRadioModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nFormlyMatRadioModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatRadioModule, declarations: [FormlyFieldRadio], imports: [CommonModule,\n        ReactiveFormsModule,\n        MatRadioModule,\n        FormlyMatFormFieldModule,\n        FormlySelectModule, i3.FormlyModule] });\nFormlyMatRadioModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatRadioModule, imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            MatRadioModule,\n            FormlyMatFormFieldModule,\n            FormlySelectModule,\n            FormlyModule.forChild({\n                types: [\n                    {\n                        name: 'radio',\n                        component: FormlyFieldRadio,\n                        wrappers: ['form-field'],\n                    },\n                ],\n            }),\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatRadioModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [FormlyFieldRadio],\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        MatRadioModule,\n                        FormlyMatFormFieldModule,\n                        FormlySelectModule,\n                        FormlyModule.forChild({\n                            types: [\n                                {\n                                    name: 'radio',\n                                    component: FormlyFieldRadio,\n                                    wrappers: ['form-field'],\n                                },\n                            ],\n                        }),\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FormlyFieldRadio, FormlyMatRadioModule };\n//# sourceMappingURL=ngx-formly-material-radio.mjs.map\n"]},"metadata":{},"sourceType":"module"}