{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewChildren, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport * as i3 from '@ngx-formly/core';\nimport { FormlyModule } from '@ngx-formly/core';\nimport * as i4 from '@ngx-formly/core/select';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport * as i1 from '@angular/material/checkbox';\nimport { MatCheckbox, MatCheckboxModule } from '@angular/material/checkbox';\n\nfunction FormlyFieldMultiCheckbox_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"mat-checkbox\", 1);\n    i0.ɵɵlistener(\"change\", function FormlyFieldMultiCheckbox_ng_container_0_Template_mat_checkbox_change_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const option_r1 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.onChange(option_r1.value, $event.checked);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const option_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", ctx_r0.id + \"_\" + i_r2)(\"formlyAttributes\", ctx_r0.field)(\"tabIndex\", ctx_r0.props.tabindex)(\"color\", ctx_r0.props.color)(\"labelPosition\", ctx_r0.props.labelPosition)(\"checked\", ctx_r0.isChecked(option_r1))(\"disabled\", ctx_r0.formControl.disabled || option_r1.disabled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r1.label, \" \");\n  }\n}\n\nclass FormlyFieldMultiCheckbox extends FieldType {\n  constructor() {\n    super(...arguments);\n    this.defaultOptions = {\n      props: {\n        hideFieldUnderline: true,\n        floatLabel: 'always',\n        color: 'accent' // workaround for https://github.com/angular/components/issues/18465\n\n      }\n    };\n  }\n\n  onChange(value, checked) {\n    this.formControl.markAsDirty();\n\n    if (this.props.type === 'array') {\n      this.formControl.patchValue(checked ? [...(this.formControl.value || []), value] : [...(this.formControl.value || [])].filter(o => o !== value));\n    } else {\n      this.formControl.patchValue({ ...this.formControl.value,\n        [value]: checked\n      });\n    }\n\n    this.formControl.markAsTouched();\n  } // TODO: find a solution to prevent scroll on focus\n\n\n  onContainerClick() {}\n\n  isChecked(option) {\n    const value = this.formControl.value;\n    return value && (this.props.type === 'array' ? value.indexOf(option.value) !== -1 : value[option.value]);\n  }\n\n}\n\nFormlyFieldMultiCheckbox.ɵfac = /* @__PURE__ */function () {\n  let ɵFormlyFieldMultiCheckbox_BaseFactory;\n  return function FormlyFieldMultiCheckbox_Factory(t) {\n    return (ɵFormlyFieldMultiCheckbox_BaseFactory || (ɵFormlyFieldMultiCheckbox_BaseFactory = i0.ɵɵgetInheritedFactory(FormlyFieldMultiCheckbox)))(t || FormlyFieldMultiCheckbox);\n  };\n}();\n\nFormlyFieldMultiCheckbox.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: FormlyFieldMultiCheckbox,\n  selectors: [[\"formly-field-mat-multicheckbox\"]],\n  viewQuery: function FormlyFieldMultiCheckbox_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(MatCheckbox, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.checkboxes = _t);\n    }\n  },\n  hostVars: 1,\n  hostBindings: function FormlyFieldMultiCheckbox_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx.id);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 6,\n  consts: [[4, \"ngFor\", \"ngForOf\"], [3, \"id\", \"formlyAttributes\", \"tabIndex\", \"color\", \"labelPosition\", \"checked\", \"disabled\", \"change\"]],\n  template: function FormlyFieldMultiCheckbox_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, FormlyFieldMultiCheckbox_ng_container_0_Template, 3, 8, \"ng-container\", 0);\n      i0.ɵɵpipe(1, \"async\");\n      i0.ɵɵpipe(2, \"formlySelectOptions\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(1, 1, i0.ɵɵpipeBind2(2, 3, ctx.props.options, ctx.field)));\n    }\n  },\n  directives: [i2.NgForOf, i1.MatCheckbox, i3.ɵFormlyAttributes],\n  pipes: [i2.AsyncPipe, i4.FormlySelectOptionsPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyFieldMultiCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'formly-field-mat-multicheckbox',\n      template: `\n    <ng-container *ngFor=\"let option of props.options | formlySelectOptions : field | async; let i = index\">\n      <mat-checkbox\n        [id]=\"id + '_' + i\"\n        [formlyAttributes]=\"field\"\n        [tabIndex]=\"props.tabindex\"\n        [color]=\"props.color\"\n        [labelPosition]=\"props.labelPosition\"\n        [checked]=\"isChecked(option)\"\n        [disabled]=\"formControl.disabled || option.disabled\"\n        (change)=\"onChange(option.value, $event.checked)\"\n      >\n        {{ option.label }}\n      </mat-checkbox>\n    </ng-container>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        '[id]': 'id'\n      }\n    }]\n  }], null, {\n    checkboxes: [{\n      type: ViewChildren,\n      args: [MatCheckbox]\n    }]\n  });\n})();\n\nclass FormlyMatMultiCheckboxModule {}\n\nFormlyMatMultiCheckboxModule.ɵfac = function FormlyMatMultiCheckboxModule_Factory(t) {\n  return new (t || FormlyMatMultiCheckboxModule)();\n};\n\nFormlyMatMultiCheckboxModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: FormlyMatMultiCheckboxModule\n});\nFormlyMatMultiCheckboxModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, ReactiveFormsModule, MatCheckboxModule, FormlyMatFormFieldModule, FormlySelectModule, FormlyModule.forChild({\n    types: [{\n      name: 'multicheckbox',\n      component: FormlyFieldMultiCheckbox,\n      wrappers: ['form-field']\n    }]\n  })]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyMatMultiCheckboxModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [FormlyFieldMultiCheckbox],\n      imports: [CommonModule, ReactiveFormsModule, MatCheckboxModule, FormlyMatFormFieldModule, FormlySelectModule, FormlyModule.forChild({\n        types: [{\n          name: 'multicheckbox',\n          component: FormlyFieldMultiCheckbox,\n          wrappers: ['form-field']\n        }]\n      })]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FormlyFieldMultiCheckbox, FormlyMatMultiCheckboxModule }; //# sourceMappingURL=ngx-formly-material-multicheckbox.mjs.map","map":{"version":3,"sources":["/home/juancamilo/Documentos/Developer/Api WEB/Projecto JYW/JYW/frontend/jyw/node_modules/@ngx-formly/material/fesm2020/ngx-formly-material-multicheckbox.mjs"],"names":["i0","Component","ChangeDetectionStrategy","ViewChildren","NgModule","i2","CommonModule","ReactiveFormsModule","i3","FormlyModule","i4","FormlySelectModule","FieldType","FormlyMatFormFieldModule","i1","MatCheckbox","MatCheckboxModule","FormlyFieldMultiCheckbox","constructor","arguments","defaultOptions","props","hideFieldUnderline","floatLabel","color","onChange","value","checked","formControl","markAsDirty","type","patchValue","filter","o","markAsTouched","onContainerClick","isChecked","option","indexOf","ɵfac","ɵcmp","NgForOf","ɵFormlyAttributes","AsyncPipe","FormlySelectOptionsPipe","args","selector","template","changeDetection","OnPush","host","checkboxes","FormlyMatMultiCheckboxModule","ɵmod","ɵinj","forChild","types","name","component","wrappers","declarations","imports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewChildren, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport * as i3 from '@ngx-formly/core';\nimport { FormlyModule } from '@ngx-formly/core';\nimport * as i4 from '@ngx-formly/core/select';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport * as i1 from '@angular/material/checkbox';\nimport { MatCheckbox, MatCheckboxModule } from '@angular/material/checkbox';\n\nclass FormlyFieldMultiCheckbox extends FieldType {\n    constructor() {\n        super(...arguments);\n        this.defaultOptions = {\n            props: {\n                hideFieldUnderline: true,\n                floatLabel: 'always',\n                color: 'accent', // workaround for https://github.com/angular/components/issues/18465\n            },\n        };\n    }\n    onChange(value, checked) {\n        this.formControl.markAsDirty();\n        if (this.props.type === 'array') {\n            this.formControl.patchValue(checked\n                ? [...(this.formControl.value || []), value]\n                : [...(this.formControl.value || [])].filter((o) => o !== value));\n        }\n        else {\n            this.formControl.patchValue({ ...this.formControl.value, [value]: checked });\n        }\n        this.formControl.markAsTouched();\n    }\n    // TODO: find a solution to prevent scroll on focus\n    onContainerClick() { }\n    isChecked(option) {\n        const value = this.formControl.value;\n        return value && (this.props.type === 'array' ? value.indexOf(option.value) !== -1 : value[option.value]);\n    }\n}\nFormlyFieldMultiCheckbox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldMultiCheckbox, deps: null, target: i0.ɵɵFactoryTarget.Component });\nFormlyFieldMultiCheckbox.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyFieldMultiCheckbox, selector: \"formly-field-mat-multicheckbox\", host: { properties: { \"id\": \"id\" } }, viewQueries: [{ propertyName: \"checkboxes\", predicate: MatCheckbox, descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ng-container *ngFor=\"let option of props.options | formlySelectOptions : field | async; let i = index\">\n      <mat-checkbox\n        [id]=\"id + '_' + i\"\n        [formlyAttributes]=\"field\"\n        [tabIndex]=\"props.tabindex\"\n        [color]=\"props.color\"\n        [labelPosition]=\"props.labelPosition\"\n        [checked]=\"isChecked(option)\"\n        [disabled]=\"formControl.disabled || option.disabled\"\n        (change)=\"onChange(option.value, $event.checked)\"\n      >\n        {{ option.label }}\n      </mat-checkbox>\n    </ng-container>\n  `, isInline: true, components: [{ type: i1.MatCheckbox, selector: \"mat-checkbox\", inputs: [\"disableRipple\", \"color\", \"tabIndex\", \"aria-label\", \"aria-labelledby\", \"aria-describedby\", \"id\", \"required\", \"labelPosition\", \"name\", \"value\", \"checked\", \"disabled\", \"indeterminate\"], outputs: [\"change\", \"indeterminateChange\"], exportAs: [\"matCheckbox\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i3.ɵFormlyAttributes, selector: \"[formlyAttributes]\", inputs: [\"formlyAttributes\", \"id\"] }], pipes: { \"async\": i2.AsyncPipe, \"formlySelectOptions\": i4.FormlySelectOptionsPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldMultiCheckbox, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-field-mat-multicheckbox',\n                    template: `\n    <ng-container *ngFor=\"let option of props.options | formlySelectOptions : field | async; let i = index\">\n      <mat-checkbox\n        [id]=\"id + '_' + i\"\n        [formlyAttributes]=\"field\"\n        [tabIndex]=\"props.tabindex\"\n        [color]=\"props.color\"\n        [labelPosition]=\"props.labelPosition\"\n        [checked]=\"isChecked(option)\"\n        [disabled]=\"formControl.disabled || option.disabled\"\n        (change)=\"onChange(option.value, $event.checked)\"\n      >\n        {{ option.label }}\n      </mat-checkbox>\n    </ng-container>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: {\n                        '[id]': 'id',\n                    },\n                }]\n        }], propDecorators: { checkboxes: [{\n                type: ViewChildren,\n                args: [MatCheckbox]\n            }] } });\n\nclass FormlyMatMultiCheckboxModule {\n}\nFormlyMatMultiCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatMultiCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nFormlyMatMultiCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatMultiCheckboxModule, declarations: [FormlyFieldMultiCheckbox], imports: [CommonModule,\n        ReactiveFormsModule,\n        MatCheckboxModule,\n        FormlyMatFormFieldModule,\n        FormlySelectModule, i3.FormlyModule] });\nFormlyMatMultiCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatMultiCheckboxModule, imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            MatCheckboxModule,\n            FormlyMatFormFieldModule,\n            FormlySelectModule,\n            FormlyModule.forChild({\n                types: [\n                    {\n                        name: 'multicheckbox',\n                        component: FormlyFieldMultiCheckbox,\n                        wrappers: ['form-field'],\n                    },\n                ],\n            }),\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatMultiCheckboxModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [FormlyFieldMultiCheckbox],\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        MatCheckboxModule,\n                        FormlyMatFormFieldModule,\n                        FormlySelectModule,\n                        FormlyModule.forChild({\n                            types: [\n                                {\n                                    name: 'multicheckbox',\n                                    component: FormlyFieldMultiCheckbox,\n                                    wrappers: ['form-field'],\n                                },\n                            ],\n                        }),\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FormlyFieldMultiCheckbox, FormlyMatMultiCheckboxModule };\n//# sourceMappingURL=ngx-formly-material-multicheckbox.mjs.map\n"]},"metadata":{},"sourceType":"module"}