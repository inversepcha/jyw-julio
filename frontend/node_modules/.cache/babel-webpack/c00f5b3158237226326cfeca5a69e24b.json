{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, PLATFORM_ID, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Input, Output, Directive, ContentChildren, NgModule, Injectable } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { BehaviorSubject, Observable, Subject, combineLatest } from 'rxjs';\nimport { switchMap, take, map, takeUntil } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Manages event on a Google Maps object, ensuring that events are added only when necessary. */\n\nconst _c0 = [\"*\"];\n\nclass MapEventManager {\n  constructor(_ngZone) {\n    this._ngZone = _ngZone;\n    /** Pending listeners that were added before the target was set. */\n\n    this._pending = [];\n    this._listeners = [];\n    this._targetStream = new BehaviorSubject(undefined);\n  }\n  /** Clears all currently-registered event listeners. */\n\n\n  _clearListeners() {\n    for (const listener of this._listeners) {\n      listener.remove();\n    }\n\n    this._listeners = [];\n  }\n  /** Gets an observable that adds an event listener to the map when a consumer subscribes to it. */\n\n\n  getLazyEmitter(name) {\n    return this._targetStream.pipe(switchMap(target => {\n      const observable = new Observable(observer => {\n        // If the target hasn't been initialized yet, cache the observer so it can be added later.\n        if (!target) {\n          this._pending.push({\n            observable,\n            observer\n          });\n\n          return undefined;\n        }\n\n        const listener = target.addListener(name, event => {\n          this._ngZone.run(() => observer.next(event));\n        });\n\n        this._listeners.push(listener);\n\n        return () => listener.remove();\n      });\n      return observable;\n    }));\n  }\n  /** Sets the current target that the manager should bind events to. */\n\n\n  setTarget(target) {\n    const currentTarget = this._targetStream.value;\n\n    if (target === currentTarget) {\n      return;\n    } // Clear the listeners from the pre-existing target.\n\n\n    if (currentTarget) {\n      this._clearListeners();\n\n      this._pending = [];\n    }\n\n    this._targetStream.next(target); // Add the listeners that were bound before the map was initialized.\n\n\n    this._pending.forEach(subscriber => subscriber.observable.subscribe(subscriber.observer));\n\n    this._pending = [];\n  }\n  /** Destroys the manager and clears the event listeners. */\n\n\n  destroy() {\n    this._clearListeners();\n\n    this._pending = [];\n\n    this._targetStream.complete();\n  }\n\n} /// <reference types=\"google.maps\" />\n\n/** default options set to the Googleplex */\n\n\nconst DEFAULT_OPTIONS = {\n  center: {\n    lat: 37.421995,\n    lng: -122.084092\n  },\n  zoom: 17,\n  // Note: the type conversion here isn't necessary for our CI, but it resolves a g3 failure.\n  mapTypeId: 'roadmap'\n};\n/** Arbitrary default height for the map element */\n\nconst DEFAULT_HEIGHT = '500px';\n/** Arbitrary default width for the map element */\n\nconst DEFAULT_WIDTH = '500px';\n/**\n * Angular component that renders a Google Map via the Google Maps JavaScript\n * API.\n * @see https://developers.google.com/maps/documentation/javascript/reference/\n */\n\nclass GoogleMap {\n  constructor(_elementRef, _ngZone, platformId) {\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    this._eventManager = new MapEventManager(this._ngZone);\n    /** Height of the map. Set this to `null` if you'd like to control the height through CSS. */\n\n    this.height = DEFAULT_HEIGHT;\n    /** Width of the map. Set this to `null` if you'd like to control the width through CSS. */\n\n    this.width = DEFAULT_WIDTH;\n    this._options = DEFAULT_OPTIONS;\n    /** Event emitted when the map is initialized. */\n\n    this.mapInitialized = new EventEmitter();\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/events#auth-errors\n     */\n\n    this.authFailure = new EventEmitter();\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.bounds_changed\n     */\n\n    this.boundsChanged = this._eventManager.getLazyEmitter('bounds_changed');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.center_changed\n     */\n\n    this.centerChanged = this._eventManager.getLazyEmitter('center_changed');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.click\n     */\n\n    this.mapClick = this._eventManager.getLazyEmitter('click');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dblclick\n     */\n\n    this.mapDblclick = this._eventManager.getLazyEmitter('dblclick');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.drag\n     */\n\n    this.mapDrag = this._eventManager.getLazyEmitter('drag');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragend\n     */\n\n    this.mapDragend = this._eventManager.getLazyEmitter('dragend');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragstart\n     */\n\n    this.mapDragstart = this._eventManager.getLazyEmitter('dragstart');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.heading_changed\n     */\n\n    this.headingChanged = this._eventManager.getLazyEmitter('heading_changed');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.idle\n     */\n\n    this.idle = this._eventManager.getLazyEmitter('idle');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.maptypeid_changed\n     */\n\n    this.maptypeidChanged = this._eventManager.getLazyEmitter('maptypeid_changed');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mousemove\n     */\n\n    this.mapMousemove = this._eventManager.getLazyEmitter('mousemove');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseout\n     */\n\n    this.mapMouseout = this._eventManager.getLazyEmitter('mouseout');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseover\n     */\n\n    this.mapMouseover = this._eventManager.getLazyEmitter('mouseover');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/map#Map.projection_changed\n     */\n\n    this.projectionChanged = this._eventManager.getLazyEmitter('projection_changed');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.rightclick\n     */\n\n    this.mapRightclick = this._eventManager.getLazyEmitter('rightclick');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilesloaded\n     */\n\n    this.tilesloaded = this._eventManager.getLazyEmitter('tilesloaded');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilt_changed\n     */\n\n    this.tiltChanged = this._eventManager.getLazyEmitter('tilt_changed');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.zoom_changed\n     */\n\n    this.zoomChanged = this._eventManager.getLazyEmitter('zoom_changed');\n    this._isBrowser = isPlatformBrowser(platformId);\n\n    if (this._isBrowser) {\n      const googleMapsWindow = window;\n\n      if (!googleMapsWindow.google && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Namespace google not found, cannot construct embedded google ' + 'map. Please install the Google Maps JavaScript API: ' + 'https://developers.google.com/maps/documentation/javascript/' + 'tutorial#Loading_the_Maps_API');\n      }\n\n      this._existingAuthFailureCallback = googleMapsWindow.gm_authFailure;\n\n      googleMapsWindow.gm_authFailure = () => {\n        if (this._existingAuthFailureCallback) {\n          this._existingAuthFailureCallback();\n        }\n\n        this.authFailure.emit();\n      };\n    }\n  }\n\n  set center(center) {\n    this._center = center;\n  }\n\n  set zoom(zoom) {\n    this._zoom = zoom;\n  }\n\n  set options(options) {\n    this._options = options || DEFAULT_OPTIONS;\n  }\n\n  ngOnChanges(changes) {\n    if (changes['height'] || changes['width']) {\n      this._setSize();\n    }\n\n    const googleMap = this.googleMap;\n\n    if (googleMap) {\n      if (changes['options']) {\n        googleMap.setOptions(this._combineOptions());\n      }\n\n      if (changes['center'] && this._center) {\n        googleMap.setCenter(this._center);\n      } // Note that the zoom can be zero.\n\n\n      if (changes['zoom'] && this._zoom != null) {\n        googleMap.setZoom(this._zoom);\n      }\n\n      if (changes['mapTypeId'] && this.mapTypeId) {\n        googleMap.setMapTypeId(this.mapTypeId);\n      }\n    }\n  }\n\n  ngOnInit() {\n    // It should be a noop during server-side rendering.\n    if (this._isBrowser) {\n      this._mapEl = this._elementRef.nativeElement.querySelector('.map-container');\n\n      this._setSize(); // Create the object outside the zone so its events don't trigger change detection.\n      // We'll bring it back in inside the `MapEventManager` only for the events that the\n      // user has subscribed to.\n\n\n      this._ngZone.runOutsideAngular(() => {\n        this.googleMap = new google.maps.Map(this._mapEl, this._combineOptions());\n      });\n\n      this._eventManager.setTarget(this.googleMap);\n\n      this.mapInitialized.emit(this.googleMap);\n    }\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n\n    if (this._isBrowser) {\n      const googleMapsWindow = window;\n      googleMapsWindow.gm_authFailure = this._existingAuthFailureCallback;\n    }\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.fitBounds\n   */\n\n\n  fitBounds(bounds, padding) {\n    this._assertInitialized();\n\n    this.googleMap.fitBounds(bounds, padding);\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panBy\n   */\n\n\n  panBy(x, y) {\n    this._assertInitialized();\n\n    this.googleMap.panBy(x, y);\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panTo\n   */\n\n\n  panTo(latLng) {\n    this._assertInitialized();\n\n    this.googleMap.panTo(latLng);\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panToBounds\n   */\n\n\n  panToBounds(latLngBounds, padding) {\n    this._assertInitialized();\n\n    this.googleMap.panToBounds(latLngBounds, padding);\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getBounds\n   */\n\n\n  getBounds() {\n    this._assertInitialized();\n\n    return this.googleMap.getBounds() || null;\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getCenter\n   */\n\n\n  getCenter() {\n    this._assertInitialized();\n\n    return this.googleMap.getCenter();\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getClickableIcons\n   */\n\n\n  getClickableIcons() {\n    this._assertInitialized();\n\n    return this.googleMap.getClickableIcons();\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getHeading\n   */\n\n\n  getHeading() {\n    this._assertInitialized();\n\n    return this.googleMap.getHeading();\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getMapTypeId\n   */\n\n\n  getMapTypeId() {\n    this._assertInitialized();\n\n    return this.googleMap.getMapTypeId();\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getProjection\n   */\n\n\n  getProjection() {\n    this._assertInitialized();\n\n    return this.googleMap.getProjection() || null;\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getStreetView\n   */\n\n\n  getStreetView() {\n    this._assertInitialized();\n\n    return this.googleMap.getStreetView();\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getTilt\n   */\n\n\n  getTilt() {\n    this._assertInitialized();\n\n    return this.googleMap.getTilt();\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getZoom\n   */\n\n\n  getZoom() {\n    this._assertInitialized();\n\n    return this.googleMap.getZoom();\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.controls\n   */\n\n\n  get controls() {\n    this._assertInitialized();\n\n    return this.googleMap.controls;\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.data\n   */\n\n\n  get data() {\n    this._assertInitialized();\n\n    return this.googleMap.data;\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mapTypes\n   */\n\n\n  get mapTypes() {\n    this._assertInitialized();\n\n    return this.googleMap.mapTypes;\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.overlayMapTypes\n   */\n\n\n  get overlayMapTypes() {\n    this._assertInitialized();\n\n    return this.googleMap.overlayMapTypes;\n  }\n\n  _setSize() {\n    if (this._mapEl) {\n      const styles = this._mapEl.style;\n      styles.height = this.height === null ? '' : coerceCssPixelValue(this.height) || DEFAULT_HEIGHT;\n      styles.width = this.width === null ? '' : coerceCssPixelValue(this.width) || DEFAULT_WIDTH;\n    }\n  }\n  /** Combines the center and zoom and the other map options into a single object */\n\n\n  _combineOptions() {\n    const options = this._options || {};\n    return { ...options,\n      // It's important that we set **some** kind of `center` and `zoom`, otherwise\n      // Google Maps will render a blank rectangle which looks broken.\n      center: this._center || options.center || DEFAULT_OPTIONS.center,\n      zoom: this._zoom ?? options.zoom ?? DEFAULT_OPTIONS.zoom,\n      // Passing in an undefined `mapTypeId` seems to break tile loading\n      // so make sure that we have some kind of default (see #22082).\n      mapTypeId: this.mapTypeId || options.mapTypeId || DEFAULT_OPTIONS.mapTypeId\n    };\n  }\n  /** Asserts that the map has been initialized. */\n\n\n  _assertInitialized() {\n    if (!this.googleMap && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n    }\n  }\n\n}\n\nGoogleMap.ɵfac = function GoogleMap_Factory(t) {\n  return new (t || GoogleMap)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nGoogleMap.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GoogleMap,\n  selectors: [[\"google-map\"]],\n  inputs: {\n    height: \"height\",\n    width: \"width\",\n    mapTypeId: \"mapTypeId\",\n    center: \"center\",\n    zoom: \"zoom\",\n    options: \"options\"\n  },\n  outputs: {\n    mapInitialized: \"mapInitialized\",\n    authFailure: \"authFailure\",\n    boundsChanged: \"boundsChanged\",\n    centerChanged: \"centerChanged\",\n    mapClick: \"mapClick\",\n    mapDblclick: \"mapDblclick\",\n    mapDrag: \"mapDrag\",\n    mapDragend: \"mapDragend\",\n    mapDragstart: \"mapDragstart\",\n    headingChanged: \"headingChanged\",\n    idle: \"idle\",\n    maptypeidChanged: \"maptypeidChanged\",\n    mapMousemove: \"mapMousemove\",\n    mapMouseout: \"mapMouseout\",\n    mapMouseover: \"mapMouseover\",\n    projectionChanged: \"projectionChanged\",\n    mapRightclick: \"mapRightclick\",\n    tilesloaded: \"tilesloaded\",\n    tiltChanged: \"tiltChanged\",\n    zoomChanged: \"zoomChanged\"\n  },\n  exportAs: [\"googleMap\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"map-container\"]],\n  template: function GoogleMap_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelement(0, \"div\", 0);\n      i0.ɵɵprojection(1);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleMap, [{\n    type: Component,\n    args: [{\n      selector: 'google-map',\n      exportAs: 'googleMap',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<div class=\"map-container\"></div><ng-content></ng-content>',\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    height: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    mapTypeId: [{\n      type: Input\n    }],\n    center: [{\n      type: Input\n    }],\n    zoom: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    mapInitialized: [{\n      type: Output\n    }],\n    authFailure: [{\n      type: Output\n    }],\n    boundsChanged: [{\n      type: Output\n    }],\n    centerChanged: [{\n      type: Output\n    }],\n    mapClick: [{\n      type: Output\n    }],\n    mapDblclick: [{\n      type: Output\n    }],\n    mapDrag: [{\n      type: Output\n    }],\n    mapDragend: [{\n      type: Output\n    }],\n    mapDragstart: [{\n      type: Output\n    }],\n    headingChanged: [{\n      type: Output\n    }],\n    idle: [{\n      type: Output\n    }],\n    maptypeidChanged: [{\n      type: Output\n    }],\n    mapMousemove: [{\n      type: Output\n    }],\n    mapMouseout: [{\n      type: Output\n    }],\n    mapMouseover: [{\n      type: Output\n    }],\n    projectionChanged: [{\n      type: Output\n    }],\n    mapRightclick: [{\n      type: Output\n    }],\n    tilesloaded: [{\n      type: Output\n    }],\n    tiltChanged: [{\n      type: Output\n    }],\n    zoomChanged: [{\n      type: Output\n    }]\n  });\n})();\n\nconst cssUnitsPattern = /([A-Za-z%]+)$/;\n/** Coerces a value to a CSS pixel value. */\n\nfunction coerceCssPixelValue(value) {\n  if (value == null) {\n    return '';\n  }\n\n  return cssUnitsPattern.test(value) ? value : `${value}px`;\n} /// <reference types=\"google.maps\" />\n\n\nclass MapBaseLayer {\n  constructor(_map, _ngZone) {\n    this._map = _map;\n    this._ngZone = _ngZone;\n  }\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._ngZone.runOutsideAngular(() => {\n        this._initializeObject();\n      });\n\n      this._assertInitialized();\n\n      this._setMap();\n    }\n  }\n\n  ngOnDestroy() {\n    this._unsetMap();\n  }\n\n  _assertInitialized() {\n    if (!this._map.googleMap) {\n      throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n    }\n  }\n\n  _initializeObject() {}\n\n  _setMap() {}\n\n  _unsetMap() {}\n\n}\n\nMapBaseLayer.ɵfac = function MapBaseLayer_Factory(t) {\n  return new (t || MapBaseLayer)(i0.ɵɵdirectiveInject(GoogleMap), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nMapBaseLayer.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MapBaseLayer,\n  selectors: [[\"map-base-layer\"]],\n  exportAs: [\"mapBaseLayer\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapBaseLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'map-base-layer',\n      exportAs: 'mapBaseLayer'\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})(); /// <reference types=\"google.maps\" />\n\n/**\n * Angular component that renders a Google Maps Bicycling Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/map#BicyclingLayer\n */\n\n\nclass MapBicyclingLayer extends MapBaseLayer {\n  _initializeObject() {\n    this.bicyclingLayer = new google.maps.BicyclingLayer();\n  }\n\n  _setMap() {\n    this._assertLayerInitialized();\n\n    this.bicyclingLayer.setMap(this._map.googleMap);\n  }\n\n  _unsetMap() {\n    if (this.bicyclingLayer) {\n      this.bicyclingLayer.setMap(null);\n    }\n  }\n\n  _assertLayerInitialized() {\n    if (!this.bicyclingLayer) {\n      throw Error('Cannot interact with a Google Map Bicycling Layer before it has been initialized. ' + 'Please wait for the Transit Layer to load before trying to interact with it.');\n    }\n  }\n\n}\n\nMapBicyclingLayer.ɵfac = /* @__PURE__ */function () {\n  let ɵMapBicyclingLayer_BaseFactory;\n  return function MapBicyclingLayer_Factory(t) {\n    return (ɵMapBicyclingLayer_BaseFactory || (ɵMapBicyclingLayer_BaseFactory = i0.ɵɵgetInheritedFactory(MapBicyclingLayer)))(t || MapBicyclingLayer);\n  };\n}();\n\nMapBicyclingLayer.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MapBicyclingLayer,\n  selectors: [[\"map-bicycling-layer\"]],\n  exportAs: [\"mapBicyclingLayer\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapBicyclingLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'map-bicycling-layer',\n      exportAs: 'mapBicyclingLayer'\n    }]\n  }], null, null);\n})(); /// <reference types=\"google.maps\" />\n\n/**\n * Angular component that renders a Google Maps Circle via the Google Maps JavaScript API.\n * @see developers.google.com/maps/documentation/javascript/reference/polygon#Circle\n */\n\n\nclass MapCircle {\n  constructor(_map, _ngZone) {\n    this._map = _map;\n    this._ngZone = _ngZone;\n    this._eventManager = new MapEventManager(this._ngZone);\n    this._options = new BehaviorSubject({});\n    this._center = new BehaviorSubject(undefined);\n    this._radius = new BehaviorSubject(undefined);\n    this._destroyed = new Subject();\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.center_changed\n     */\n\n    this.centerChanged = this._eventManager.getLazyEmitter('center_changed');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.click\n     */\n\n    this.circleClick = this._eventManager.getLazyEmitter('click');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dblclick\n     */\n\n    this.circleDblclick = this._eventManager.getLazyEmitter('dblclick');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.drag\n     */\n\n    this.circleDrag = this._eventManager.getLazyEmitter('drag');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dragend\n     */\n\n    this.circleDragend = this._eventManager.getLazyEmitter('dragend');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dragstart\n     */\n\n    this.circleDragstart = this._eventManager.getLazyEmitter('dragstart');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mousedown\n     */\n\n    this.circleMousedown = this._eventManager.getLazyEmitter('mousedown');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mousemove\n     */\n\n    this.circleMousemove = this._eventManager.getLazyEmitter('mousemove');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseout\n     */\n\n    this.circleMouseout = this._eventManager.getLazyEmitter('mouseout');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseover\n     */\n\n    this.circleMouseover = this._eventManager.getLazyEmitter('mouseover');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseup\n     */\n\n    this.circleMouseup = this._eventManager.getLazyEmitter('mouseup');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.radius_changed\n     */\n\n    this.radiusChanged = this._eventManager.getLazyEmitter('radius_changed');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.rightclick\n     */\n\n    this.circleRightclick = this._eventManager.getLazyEmitter('rightclick');\n  }\n\n  set options(options) {\n    this._options.next(options || {});\n  }\n\n  set center(center) {\n    this._center.next(center);\n  }\n\n  set radius(radius) {\n    this._radius.next(radius);\n  }\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._combineOptions().pipe(take(1)).subscribe(options => {\n        // Create the object outside the zone so its events don't trigger change detection.\n        // We'll bring it back in inside the `MapEventManager` only for the events that the\n        // user has subscribed to.\n        this._ngZone.runOutsideAngular(() => {\n          this.circle = new google.maps.Circle(options);\n        });\n\n        this._assertInitialized();\n\n        this.circle.setMap(this._map.googleMap);\n\n        this._eventManager.setTarget(this.circle);\n      });\n\n      this._watchForOptionsChanges();\n\n      this._watchForCenterChanges();\n\n      this._watchForRadiusChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n\n    if (this.circle) {\n      this.circle.setMap(null);\n    }\n  }\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getBounds\n   */\n\n\n  getBounds() {\n    this._assertInitialized();\n\n    return this.circle.getBounds();\n  }\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getCenter\n   */\n\n\n  getCenter() {\n    this._assertInitialized();\n\n    return this.circle.getCenter();\n  }\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getDraggable\n   */\n\n\n  getDraggable() {\n    this._assertInitialized();\n\n    return this.circle.getDraggable();\n  }\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getEditable\n   */\n\n\n  getEditable() {\n    this._assertInitialized();\n\n    return this.circle.getEditable();\n  }\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getRadius\n   */\n\n\n  getRadius() {\n    this._assertInitialized();\n\n    return this.circle.getRadius();\n  }\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getVisible\n   */\n\n\n  getVisible() {\n    this._assertInitialized();\n\n    return this.circle.getVisible();\n  }\n\n  _combineOptions() {\n    return combineLatest([this._options, this._center, this._radius]).pipe(map(([options, center, radius]) => {\n      const combinedOptions = { ...options,\n        center: center || options.center,\n        radius: radius !== undefined ? radius : options.radius\n      };\n      return combinedOptions;\n    }));\n  }\n\n  _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n      this._assertInitialized();\n\n      this.circle.setOptions(options);\n    });\n  }\n\n  _watchForCenterChanges() {\n    this._center.pipe(takeUntil(this._destroyed)).subscribe(center => {\n      if (center) {\n        this._assertInitialized();\n\n        this.circle.setCenter(center);\n      }\n    });\n  }\n\n  _watchForRadiusChanges() {\n    this._radius.pipe(takeUntil(this._destroyed)).subscribe(radius => {\n      if (radius !== undefined) {\n        this._assertInitialized();\n\n        this.circle.setRadius(radius);\n      }\n    });\n  }\n\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._map.googleMap) {\n        throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n      }\n\n      if (!this.circle) {\n        throw Error('Cannot interact with a Google Map Circle before it has been ' + 'initialized. Please wait for the Circle to load before trying to interact with it.');\n      }\n    }\n  }\n\n}\n\nMapCircle.ɵfac = function MapCircle_Factory(t) {\n  return new (t || MapCircle)(i0.ɵɵdirectiveInject(GoogleMap), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nMapCircle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MapCircle,\n  selectors: [[\"map-circle\"]],\n  inputs: {\n    options: \"options\",\n    center: \"center\",\n    radius: \"radius\"\n  },\n  outputs: {\n    centerChanged: \"centerChanged\",\n    circleClick: \"circleClick\",\n    circleDblclick: \"circleDblclick\",\n    circleDrag: \"circleDrag\",\n    circleDragend: \"circleDragend\",\n    circleDragstart: \"circleDragstart\",\n    circleMousedown: \"circleMousedown\",\n    circleMousemove: \"circleMousemove\",\n    circleMouseout: \"circleMouseout\",\n    circleMouseover: \"circleMouseover\",\n    circleMouseup: \"circleMouseup\",\n    radiusChanged: \"radiusChanged\",\n    circleRightclick: \"circleRightclick\"\n  },\n  exportAs: [\"mapCircle\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapCircle, [{\n    type: Directive,\n    args: [{\n      selector: 'map-circle',\n      exportAs: 'mapCircle'\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    options: [{\n      type: Input\n    }],\n    center: [{\n      type: Input\n    }],\n    radius: [{\n      type: Input\n    }],\n    centerChanged: [{\n      type: Output\n    }],\n    circleClick: [{\n      type: Output\n    }],\n    circleDblclick: [{\n      type: Output\n    }],\n    circleDrag: [{\n      type: Output\n    }],\n    circleDragend: [{\n      type: Output\n    }],\n    circleDragstart: [{\n      type: Output\n    }],\n    circleMousedown: [{\n      type: Output\n    }],\n    circleMousemove: [{\n      type: Output\n    }],\n    circleMouseout: [{\n      type: Output\n    }],\n    circleMouseover: [{\n      type: Output\n    }],\n    circleMouseup: [{\n      type: Output\n    }],\n    radiusChanged: [{\n      type: Output\n    }],\n    circleRightclick: [{\n      type: Output\n    }]\n  });\n})(); /// <reference types=\"google.maps\" />\n\n/**\n * Angular component that renders a Google Maps Directions Renderer via the Google Maps\n * JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/directions#DirectionsRenderer\n */\n\n\nclass MapDirectionsRenderer {\n  constructor(_googleMap, _ngZone) {\n    this._googleMap = _googleMap;\n    this._ngZone = _ngZone;\n    this._eventManager = new MapEventManager(this._ngZone);\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/directions\n     * #DirectionsRenderer.directions_changed\n     */\n\n    this.directionsChanged = this._eventManager.getLazyEmitter('directions_changed');\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/directions\n   * #DirectionsRendererOptions.directions\n   */\n\n\n  set directions(directions) {\n    this._directions = directions;\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/directions\n   * #DirectionsRendererOptions\n   */\n\n\n  set options(options) {\n    this._options = options;\n  }\n\n  ngOnInit() {\n    if (this._googleMap._isBrowser) {\n      // Create the object outside the zone so its events don't trigger change detection.\n      // We'll bring it back in inside the `MapEventManager` only for the events that the\n      // user has subscribed to.\n      this._ngZone.runOutsideAngular(() => {\n        this.directionsRenderer = new google.maps.DirectionsRenderer(this._combineOptions());\n      });\n\n      this._assertInitialized();\n\n      this.directionsRenderer.setMap(this._googleMap.googleMap);\n\n      this._eventManager.setTarget(this.directionsRenderer);\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (this.directionsRenderer) {\n      if (changes['options']) {\n        this.directionsRenderer.setOptions(this._combineOptions());\n      }\n\n      if (changes['directions'] && this._directions !== undefined) {\n        this.directionsRenderer.setDirections(this._directions);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n\n    if (this.directionsRenderer) {\n      this.directionsRenderer.setMap(null);\n    }\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/directions\n   * #DirectionsRenderer.getDirections\n   */\n\n\n  getDirections() {\n    this._assertInitialized();\n\n    return this.directionsRenderer.getDirections();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/directions\n   * #DirectionsRenderer.getPanel\n   */\n\n\n  getPanel() {\n    this._assertInitialized();\n\n    return this.directionsRenderer.getPanel();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/directions\n   * #DirectionsRenderer.getRouteIndex\n   */\n\n\n  getRouteIndex() {\n    this._assertInitialized();\n\n    return this.directionsRenderer.getRouteIndex();\n  }\n\n  _combineOptions() {\n    const options = this._options || {};\n    return { ...options,\n      directions: this._directions || options.directions,\n      map: this._googleMap.googleMap\n    };\n  }\n\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._googleMap.googleMap) {\n        throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n      }\n\n      if (!this.directionsRenderer) {\n        throw Error('Cannot interact with a Google Map Directions Renderer before it has been ' + 'initialized. Please wait for the Directions Renderer to load before trying ' + 'to interact with it.');\n      }\n    }\n  }\n\n}\n\nMapDirectionsRenderer.ɵfac = function MapDirectionsRenderer_Factory(t) {\n  return new (t || MapDirectionsRenderer)(i0.ɵɵdirectiveInject(GoogleMap), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nMapDirectionsRenderer.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MapDirectionsRenderer,\n  selectors: [[\"map-directions-renderer\"]],\n  inputs: {\n    directions: \"directions\",\n    options: \"options\"\n  },\n  outputs: {\n    directionsChanged: \"directionsChanged\"\n  },\n  exportAs: [\"mapDirectionsRenderer\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapDirectionsRenderer, [{\n    type: Directive,\n    args: [{\n      selector: 'map-directions-renderer',\n      exportAs: 'mapDirectionsRenderer'\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    directions: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    directionsChanged: [{\n      type: Output\n    }]\n  });\n})(); /// <reference types=\"google.maps\" />\n\n/**\n * Angular component that renders a Google Maps Ground Overlay via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/image-overlay#GroundOverlay\n */\n\n\nclass MapGroundOverlay {\n  constructor(_map, _ngZone) {\n    this._map = _map;\n    this._ngZone = _ngZone;\n    this._eventManager = new MapEventManager(this._ngZone);\n    this._opacity = new BehaviorSubject(1);\n    this._url = new BehaviorSubject('');\n    this._bounds = new BehaviorSubject(undefined);\n    this._destroyed = new Subject();\n    /** Whether the overlay is clickable */\n\n    this.clickable = false;\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/image-overlay#GroundOverlay.click\n     */\n\n    this.mapClick = this._eventManager.getLazyEmitter('click');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/image-overlay\n     * #GroundOverlay.dblclick\n     */\n\n    this.mapDblclick = this._eventManager.getLazyEmitter('dblclick');\n  }\n  /** URL of the image that will be shown in the overlay. */\n\n\n  set url(url) {\n    this._url.next(url);\n  }\n  /** Bounds for the overlay. */\n\n\n  get bounds() {\n    return this._bounds.value;\n  }\n\n  set bounds(bounds) {\n    this._bounds.next(bounds);\n  }\n  /** Opacity of the overlay. */\n\n\n  set opacity(opacity) {\n    this._opacity.next(opacity);\n  }\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      // The ground overlay setup is slightly different from the other Google Maps objects in that\n      // we have to recreate the `GroundOverlay` object whenever the bounds change, because\n      // Google Maps doesn't provide an API to update the bounds of an existing overlay.\n      this._bounds.pipe(takeUntil(this._destroyed)).subscribe(bounds => {\n        if (this.groundOverlay) {\n          this.groundOverlay.setMap(null);\n          this.groundOverlay = undefined;\n        } // Create the object outside the zone so its events don't trigger change detection.\n        // We'll bring it back in inside the `MapEventManager` only for the events that the\n        // user has subscribed to.\n\n\n        if (bounds) {\n          this._ngZone.runOutsideAngular(() => {\n            this.groundOverlay = new google.maps.GroundOverlay(this._url.getValue(), bounds, {\n              clickable: this.clickable,\n              opacity: this._opacity.value\n            });\n          });\n\n          this._assertInitialized();\n\n          this.groundOverlay.setMap(this._map.googleMap);\n\n          this._eventManager.setTarget(this.groundOverlay);\n        }\n      });\n\n      this._watchForOpacityChanges();\n\n      this._watchForUrlChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n\n    if (this.groundOverlay) {\n      this.groundOverlay.setMap(null);\n    }\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/image-overlay\n   * #GroundOverlay.getBounds\n   */\n\n\n  getBounds() {\n    this._assertInitialized();\n\n    return this.groundOverlay.getBounds();\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/image-overlay\n   * #GroundOverlay.getOpacity\n   */\n\n\n  getOpacity() {\n    this._assertInitialized();\n\n    return this.groundOverlay.getOpacity();\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/image-overlay\n   * #GroundOverlay.getUrl\n   */\n\n\n  getUrl() {\n    this._assertInitialized();\n\n    return this.groundOverlay.getUrl();\n  }\n\n  _watchForOpacityChanges() {\n    this._opacity.pipe(takeUntil(this._destroyed)).subscribe(opacity => {\n      if (opacity != null) {\n        this._assertInitialized();\n\n        this.groundOverlay.setOpacity(opacity);\n      }\n    });\n  }\n\n  _watchForUrlChanges() {\n    this._url.pipe(takeUntil(this._destroyed)).subscribe(url => {\n      this._assertInitialized();\n\n      const overlay = this.groundOverlay;\n      overlay.set('url', url); // Google Maps only redraws the overlay if we re-set the map.\n\n      overlay.setMap(null);\n      overlay.setMap(this._map.googleMap);\n    });\n  }\n\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._map.googleMap) {\n        throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n      }\n\n      if (!this.groundOverlay) {\n        throw Error('Cannot interact with a Google Map GroundOverlay before it has been initialized. ' + 'Please wait for the GroundOverlay to load before trying to interact with it.');\n      }\n    }\n  }\n\n}\n\nMapGroundOverlay.ɵfac = function MapGroundOverlay_Factory(t) {\n  return new (t || MapGroundOverlay)(i0.ɵɵdirectiveInject(GoogleMap), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nMapGroundOverlay.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MapGroundOverlay,\n  selectors: [[\"map-ground-overlay\"]],\n  inputs: {\n    url: \"url\",\n    bounds: \"bounds\",\n    clickable: \"clickable\",\n    opacity: \"opacity\"\n  },\n  outputs: {\n    mapClick: \"mapClick\",\n    mapDblclick: \"mapDblclick\"\n  },\n  exportAs: [\"mapGroundOverlay\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapGroundOverlay, [{\n    type: Directive,\n    args: [{\n      selector: 'map-ground-overlay',\n      exportAs: 'mapGroundOverlay'\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    url: [{\n      type: Input\n    }],\n    bounds: [{\n      type: Input\n    }],\n    clickable: [{\n      type: Input\n    }],\n    opacity: [{\n      type: Input\n    }],\n    mapClick: [{\n      type: Output\n    }],\n    mapDblclick: [{\n      type: Output\n    }]\n  });\n})(); /// <reference types=\"google.maps\" />\n\n/**\n * Angular component that renders a Google Maps info window via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/info-window\n */\n\n\nclass MapInfoWindow {\n  constructor(_googleMap, _elementRef, _ngZone) {\n    this._googleMap = _googleMap;\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    this._eventManager = new MapEventManager(this._ngZone);\n    this._options = new BehaviorSubject({});\n    this._position = new BehaviorSubject(undefined);\n    this._destroy = new Subject();\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.closeclick\n     */\n\n    this.closeclick = this._eventManager.getLazyEmitter('closeclick');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/info-window\n     * #InfoWindow.content_changed\n     */\n\n    this.contentChanged = this._eventManager.getLazyEmitter('content_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.domready\n     */\n\n    this.domready = this._eventManager.getLazyEmitter('domready');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/info-window\n     * #InfoWindow.position_changed\n     */\n\n    this.positionChanged = this._eventManager.getLazyEmitter('position_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/info-window\n     * #InfoWindow.zindex_changed\n     */\n\n    this.zindexChanged = this._eventManager.getLazyEmitter('zindex_changed');\n  }\n\n  set options(options) {\n    this._options.next(options || {});\n  }\n\n  set position(position) {\n    this._position.next(position);\n  }\n\n  ngOnInit() {\n    if (this._googleMap._isBrowser) {\n      const combinedOptionsChanges = this._combineOptions();\n\n      combinedOptionsChanges.pipe(take(1)).subscribe(options => {\n        // Create the object outside the zone so its events don't trigger change detection.\n        // We'll bring it back in inside the `MapEventManager` only for the events that the\n        // user has subscribed to.\n        this._ngZone.runOutsideAngular(() => {\n          this.infoWindow = new google.maps.InfoWindow(options);\n        });\n\n        this._eventManager.setTarget(this.infoWindow);\n      });\n\n      this._watchForOptionsChanges();\n\n      this._watchForPositionChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n\n    this._destroy.next();\n\n    this._destroy.complete(); // If no info window has been created on the server, we do not try closing it.\n    // On the server, an info window cannot be created and this would cause errors.\n\n\n    if (this.infoWindow) {\n      this.close();\n    }\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.close\n   */\n\n\n  close() {\n    this._assertInitialized();\n\n    this.infoWindow.close();\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getContent\n   */\n\n\n  getContent() {\n    this._assertInitialized();\n\n    return this.infoWindow.getContent() || null;\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window\n   * #InfoWindow.getPosition\n   */\n\n\n  getPosition() {\n    this._assertInitialized();\n\n    return this.infoWindow.getPosition() || null;\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getZIndex\n   */\n\n\n  getZIndex() {\n    this._assertInitialized();\n\n    return this.infoWindow.getZIndex();\n  }\n  /**\n   * Opens the MapInfoWindow using the provided anchor. If the anchor is not set,\n   * then the position property of the options input is used instead.\n   */\n\n\n  open(anchor, shouldFocus) {\n    this._assertInitialized();\n\n    const anchorObject = anchor ? anchor.getAnchor() : undefined; // Prevent the info window from initializing when trying to reopen on the same anchor.\n    // Note that when the window is opened for the first time, the anchor will always be\n    // undefined. If that's the case, we have to allow it to open in order to handle the\n    // case where the window doesn't have an anchor, but is placed at a particular position.\n\n    if (this.infoWindow.get('anchor') !== anchorObject || !anchorObject) {\n      this._elementRef.nativeElement.style.display = ''; // The config is cast to `any`, because the internal typings are out of date.\n\n      this.infoWindow.open({\n        map: this._googleMap.googleMap,\n        anchor: anchorObject,\n        shouldFocus\n      });\n    }\n  }\n\n  _combineOptions() {\n    return combineLatest([this._options, this._position]).pipe(map(([options, position]) => {\n      const combinedOptions = { ...options,\n        position: position || options.position,\n        content: this._elementRef.nativeElement\n      };\n      return combinedOptions;\n    }));\n  }\n\n  _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroy)).subscribe(options => {\n      this._assertInitialized();\n\n      this.infoWindow.setOptions(options);\n    });\n  }\n\n  _watchForPositionChanges() {\n    this._position.pipe(takeUntil(this._destroy)).subscribe(position => {\n      if (position) {\n        this._assertInitialized();\n\n        this.infoWindow.setPosition(position);\n      }\n    });\n  }\n\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._googleMap.googleMap) {\n        throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n      }\n\n      if (!this.infoWindow) {\n        throw Error('Cannot interact with a Google Map Info Window before it has been ' + 'initialized. Please wait for the Info Window to load before trying to interact with ' + 'it.');\n      }\n    }\n  }\n\n}\n\nMapInfoWindow.ɵfac = function MapInfoWindow_Factory(t) {\n  return new (t || MapInfoWindow)(i0.ɵɵdirectiveInject(GoogleMap), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nMapInfoWindow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MapInfoWindow,\n  selectors: [[\"map-info-window\"]],\n  hostAttrs: [2, \"display\", \"none\"],\n  inputs: {\n    options: \"options\",\n    position: \"position\"\n  },\n  outputs: {\n    closeclick: \"closeclick\",\n    contentChanged: \"contentChanged\",\n    domready: \"domready\",\n    positionChanged: \"positionChanged\",\n    zindexChanged: \"zindexChanged\"\n  },\n  exportAs: [\"mapInfoWindow\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapInfoWindow, [{\n    type: Directive,\n    args: [{\n      selector: 'map-info-window',\n      exportAs: 'mapInfoWindow',\n      host: {\n        'style': 'display: none'\n      }\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    options: [{\n      type: Input\n    }],\n    position: [{\n      type: Input\n    }],\n    closeclick: [{\n      type: Output\n    }],\n    contentChanged: [{\n      type: Output\n    }],\n    domready: [{\n      type: Output\n    }],\n    positionChanged: [{\n      type: Output\n    }],\n    zindexChanged: [{\n      type: Output\n    }]\n  });\n})(); /// <reference types=\"google.maps\" />\n\n/**\n * Angular component that renders a Google Maps KML Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer\n */\n\n\nclass MapKmlLayer {\n  constructor(_map, _ngZone) {\n    this._map = _map;\n    this._ngZone = _ngZone;\n    this._eventManager = new MapEventManager(this._ngZone);\n    this._options = new BehaviorSubject({});\n    this._url = new BehaviorSubject('');\n    this._destroyed = new Subject();\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.click\n     */\n\n    this.kmlClick = this._eventManager.getLazyEmitter('click');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/kml\n     * #KmlLayer.defaultviewport_changed\n     */\n\n    this.defaultviewportChanged = this._eventManager.getLazyEmitter('defaultviewport_changed');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.status_changed\n     */\n\n    this.statusChanged = this._eventManager.getLazyEmitter('status_changed');\n  }\n\n  set options(options) {\n    this._options.next(options || {});\n  }\n\n  set url(url) {\n    this._url.next(url);\n  }\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._combineOptions().pipe(take(1)).subscribe(options => {\n        // Create the object outside the zone so its events don't trigger change detection.\n        // We'll bring it back in inside the `MapEventManager` only for the events that the\n        // user has subscribed to.\n        this._ngZone.runOutsideAngular(() => this.kmlLayer = new google.maps.KmlLayer(options));\n\n        this._assertInitialized();\n\n        this.kmlLayer.setMap(this._map.googleMap);\n\n        this._eventManager.setTarget(this.kmlLayer);\n      });\n\n      this._watchForOptionsChanges();\n\n      this._watchForUrlChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n\n    if (this.kmlLayer) {\n      this.kmlLayer.setMap(null);\n    }\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getDefaultViewport\n   */\n\n\n  getDefaultViewport() {\n    this._assertInitialized();\n\n    return this.kmlLayer.getDefaultViewport();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getMetadata\n   */\n\n\n  getMetadata() {\n    this._assertInitialized();\n\n    return this.kmlLayer.getMetadata();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getStatus\n   */\n\n\n  getStatus() {\n    this._assertInitialized();\n\n    return this.kmlLayer.getStatus();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getUrl\n   */\n\n\n  getUrl() {\n    this._assertInitialized();\n\n    return this.kmlLayer.getUrl();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getZIndex\n   */\n\n\n  getZIndex() {\n    this._assertInitialized();\n\n    return this.kmlLayer.getZIndex();\n  }\n\n  _combineOptions() {\n    return combineLatest([this._options, this._url]).pipe(map(([options, url]) => {\n      const combinedOptions = { ...options,\n        url: url || options.url\n      };\n      return combinedOptions;\n    }));\n  }\n\n  _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n      if (this.kmlLayer) {\n        this._assertInitialized();\n\n        this.kmlLayer.setOptions(options);\n      }\n    });\n  }\n\n  _watchForUrlChanges() {\n    this._url.pipe(takeUntil(this._destroyed)).subscribe(url => {\n      if (url && this.kmlLayer) {\n        this._assertInitialized();\n\n        this.kmlLayer.setUrl(url);\n      }\n    });\n  }\n\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._map.googleMap) {\n        throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n      }\n\n      if (!this.kmlLayer) {\n        throw Error('Cannot interact with a Google Map KmlLayer before it has been ' + 'initialized. Please wait for the KmlLayer to load before trying to interact with it.');\n      }\n    }\n  }\n\n}\n\nMapKmlLayer.ɵfac = function MapKmlLayer_Factory(t) {\n  return new (t || MapKmlLayer)(i0.ɵɵdirectiveInject(GoogleMap), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nMapKmlLayer.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MapKmlLayer,\n  selectors: [[\"map-kml-layer\"]],\n  inputs: {\n    options: \"options\",\n    url: \"url\"\n  },\n  outputs: {\n    kmlClick: \"kmlClick\",\n    defaultviewportChanged: \"defaultviewportChanged\",\n    statusChanged: \"statusChanged\"\n  },\n  exportAs: [\"mapKmlLayer\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapKmlLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'map-kml-layer',\n      exportAs: 'mapKmlLayer'\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    options: [{\n      type: Input\n    }],\n    url: [{\n      type: Input\n    }],\n    kmlClick: [{\n      type: Output\n    }],\n    defaultviewportChanged: [{\n      type: Output\n    }],\n    statusChanged: [{\n      type: Output\n    }]\n  });\n})(); /// <reference types=\"google.maps\" />\n\n/**\n * Default options for the Google Maps marker component. Displays a marker\n * at the Googleplex.\n */\n\n\nconst DEFAULT_MARKER_OPTIONS = {\n  position: {\n    lat: 37.421995,\n    lng: -122.084092\n  }\n};\n/**\n * Angular component that renders a Google Maps marker via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/marker\n */\n\nclass MapMarker {\n  constructor(_googleMap, _ngZone) {\n    this._googleMap = _googleMap;\n    this._ngZone = _ngZone;\n    this._eventManager = new MapEventManager(this._ngZone);\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.animation_changed\n     */\n\n    this.animationChanged = this._eventManager.getLazyEmitter('animation_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.click\n     */\n\n    this.mapClick = this._eventManager.getLazyEmitter('click');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.clickable_changed\n     */\n\n    this.clickableChanged = this._eventManager.getLazyEmitter('clickable_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.cursor_changed\n     */\n\n    this.cursorChanged = this._eventManager.getLazyEmitter('cursor_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dblclick\n     */\n\n    this.mapDblclick = this._eventManager.getLazyEmitter('dblclick');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.drag\n     */\n\n    this.mapDrag = this._eventManager.getLazyEmitter('drag');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragend\n     */\n\n    this.mapDragend = this._eventManager.getLazyEmitter('dragend');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.draggable_changed\n     */\n\n    this.draggableChanged = this._eventManager.getLazyEmitter('draggable_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragstart\n     */\n\n    this.mapDragstart = this._eventManager.getLazyEmitter('dragstart');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.flat_changed\n     */\n\n    this.flatChanged = this._eventManager.getLazyEmitter('flat_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.icon_changed\n     */\n\n    this.iconChanged = this._eventManager.getLazyEmitter('icon_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mousedown\n     */\n\n    this.mapMousedown = this._eventManager.getLazyEmitter('mousedown');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseout\n     */\n\n    this.mapMouseout = this._eventManager.getLazyEmitter('mouseout');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseover\n     */\n\n    this.mapMouseover = this._eventManager.getLazyEmitter('mouseover');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseup\n     */\n\n    this.mapMouseup = this._eventManager.getLazyEmitter('mouseup');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.position_changed\n     */\n\n    this.positionChanged = this._eventManager.getLazyEmitter('position_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.rightclick\n     */\n\n    this.mapRightclick = this._eventManager.getLazyEmitter('rightclick');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.shape_changed\n     */\n\n    this.shapeChanged = this._eventManager.getLazyEmitter('shape_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.title_changed\n     */\n\n    this.titleChanged = this._eventManager.getLazyEmitter('title_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.visible_changed\n     */\n\n    this.visibleChanged = this._eventManager.getLazyEmitter('visible_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.zindex_changed\n     */\n\n    this.zindexChanged = this._eventManager.getLazyEmitter('zindex_changed');\n  }\n  /**\n   * Title of the marker.\n   * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.title\n   */\n\n\n  set title(title) {\n    this._title = title;\n  }\n  /**\n   * Position of the marker. See:\n   * developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.position\n   */\n\n\n  set position(position) {\n    this._position = position;\n  }\n  /**\n   * Label for the marker.\n   * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.label\n   */\n\n\n  set label(label) {\n    this._label = label;\n  }\n  /**\n   * Whether the marker is clickable. See:\n   * developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.clickable\n   */\n\n\n  set clickable(clickable) {\n    this._clickable = clickable;\n  }\n  /**\n   * Options used to configure the marker.\n   * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions\n   */\n\n\n  set options(options) {\n    this._options = options;\n  }\n  /**\n   * Icon to be used for the marker.\n   * See: https://developers.google.com/maps/documentation/javascript/reference/marker#Icon\n   */\n\n\n  set icon(icon) {\n    this._icon = icon;\n  }\n  /**\n   * Whether the marker is visible.\n   * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.visible\n   */\n\n\n  set visible(value) {\n    this._visible = value;\n  }\n\n  ngOnInit() {\n    if (this._googleMap._isBrowser) {\n      // Create the object outside the zone so its events don't trigger change detection.\n      // We'll bring it back in inside the `MapEventManager` only for the events that the\n      // user has subscribed to.\n      this._ngZone.runOutsideAngular(() => {\n        this.marker = new google.maps.Marker(this._combineOptions());\n      });\n\n      this._assertInitialized();\n\n      this.marker.setMap(this._googleMap.googleMap);\n\n      this._eventManager.setTarget(this.marker);\n    }\n  }\n\n  ngOnChanges(changes) {\n    const {\n      marker,\n      _title,\n      _position,\n      _label,\n      _clickable,\n      _icon,\n      _visible\n    } = this;\n\n    if (marker) {\n      if (changes['options']) {\n        marker.setOptions(this._combineOptions());\n      }\n\n      if (changes['title'] && _title !== undefined) {\n        marker.setTitle(_title);\n      }\n\n      if (changes['position'] && _position) {\n        marker.setPosition(_position);\n      }\n\n      if (changes['label'] && _label !== undefined) {\n        marker.setLabel(_label);\n      }\n\n      if (changes['clickable'] && _clickable !== undefined) {\n        marker.setClickable(_clickable);\n      }\n\n      if (changes['icon'] && _icon) {\n        marker.setIcon(_icon);\n      }\n\n      if (changes['visible'] && _visible !== undefined) {\n        marker.setVisible(_visible);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n\n    if (this.marker) {\n      this.marker.setMap(null);\n    }\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getAnimation\n   */\n\n\n  getAnimation() {\n    this._assertInitialized();\n\n    return this.marker.getAnimation() || null;\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getClickable\n   */\n\n\n  getClickable() {\n    this._assertInitialized();\n\n    return this.marker.getClickable();\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getCursor\n   */\n\n\n  getCursor() {\n    this._assertInitialized();\n\n    return this.marker.getCursor() || null;\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getDraggable\n   */\n\n\n  getDraggable() {\n    this._assertInitialized();\n\n    return !!this.marker.getDraggable();\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getIcon\n   */\n\n\n  getIcon() {\n    this._assertInitialized();\n\n    return this.marker.getIcon() || null;\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getLabel\n   */\n\n\n  getLabel() {\n    this._assertInitialized();\n\n    return this.marker.getLabel() || null;\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getOpacity\n   */\n\n\n  getOpacity() {\n    this._assertInitialized();\n\n    return this.marker.getOpacity() || null;\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getPosition\n   */\n\n\n  getPosition() {\n    this._assertInitialized();\n\n    return this.marker.getPosition() || null;\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getShape\n   */\n\n\n  getShape() {\n    this._assertInitialized();\n\n    return this.marker.getShape() || null;\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getTitle\n   */\n\n\n  getTitle() {\n    this._assertInitialized();\n\n    return this.marker.getTitle() || null;\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getVisible\n   */\n\n\n  getVisible() {\n    this._assertInitialized();\n\n    return this.marker.getVisible();\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getZIndex\n   */\n\n\n  getZIndex() {\n    this._assertInitialized();\n\n    return this.marker.getZIndex() || null;\n  }\n  /** Gets the anchor point that can be used to attach other Google Maps objects. */\n\n\n  getAnchor() {\n    this._assertInitialized();\n\n    return this.marker;\n  }\n  /** Creates a combined options object using the passed-in options and the individual inputs. */\n\n\n  _combineOptions() {\n    const options = this._options || DEFAULT_MARKER_OPTIONS;\n    return { ...options,\n      title: this._title || options.title,\n      position: this._position || options.position,\n      label: this._label || options.label,\n      clickable: this._clickable ?? options.clickable,\n      map: this._googleMap.googleMap,\n      icon: this._icon || options.icon,\n      visible: this._visible ?? options.visible\n    };\n  }\n\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._googleMap.googleMap) {\n        throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n      }\n\n      if (!this.marker) {\n        throw Error('Cannot interact with a Google Map Marker before it has been ' + 'initialized. Please wait for the Marker to load before trying to interact with it.');\n      }\n    }\n  }\n\n}\n\nMapMarker.ɵfac = function MapMarker_Factory(t) {\n  return new (t || MapMarker)(i0.ɵɵdirectiveInject(GoogleMap), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nMapMarker.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MapMarker,\n  selectors: [[\"map-marker\"]],\n  inputs: {\n    title: \"title\",\n    position: \"position\",\n    label: \"label\",\n    clickable: \"clickable\",\n    options: \"options\",\n    icon: \"icon\",\n    visible: \"visible\"\n  },\n  outputs: {\n    animationChanged: \"animationChanged\",\n    mapClick: \"mapClick\",\n    clickableChanged: \"clickableChanged\",\n    cursorChanged: \"cursorChanged\",\n    mapDblclick: \"mapDblclick\",\n    mapDrag: \"mapDrag\",\n    mapDragend: \"mapDragend\",\n    draggableChanged: \"draggableChanged\",\n    mapDragstart: \"mapDragstart\",\n    flatChanged: \"flatChanged\",\n    iconChanged: \"iconChanged\",\n    mapMousedown: \"mapMousedown\",\n    mapMouseout: \"mapMouseout\",\n    mapMouseover: \"mapMouseover\",\n    mapMouseup: \"mapMouseup\",\n    positionChanged: \"positionChanged\",\n    mapRightclick: \"mapRightclick\",\n    shapeChanged: \"shapeChanged\",\n    titleChanged: \"titleChanged\",\n    visibleChanged: \"visibleChanged\",\n    zindexChanged: \"zindexChanged\"\n  },\n  exportAs: [\"mapMarker\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapMarker, [{\n    type: Directive,\n    args: [{\n      selector: 'map-marker',\n      exportAs: 'mapMarker'\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    title: [{\n      type: Input\n    }],\n    position: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    clickable: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    icon: [{\n      type: Input\n    }],\n    visible: [{\n      type: Input\n    }],\n    animationChanged: [{\n      type: Output\n    }],\n    mapClick: [{\n      type: Output\n    }],\n    clickableChanged: [{\n      type: Output\n    }],\n    cursorChanged: [{\n      type: Output\n    }],\n    mapDblclick: [{\n      type: Output\n    }],\n    mapDrag: [{\n      type: Output\n    }],\n    mapDragend: [{\n      type: Output\n    }],\n    draggableChanged: [{\n      type: Output\n    }],\n    mapDragstart: [{\n      type: Output\n    }],\n    flatChanged: [{\n      type: Output\n    }],\n    iconChanged: [{\n      type: Output\n    }],\n    mapMousedown: [{\n      type: Output\n    }],\n    mapMouseout: [{\n      type: Output\n    }],\n    mapMouseover: [{\n      type: Output\n    }],\n    mapMouseup: [{\n      type: Output\n    }],\n    positionChanged: [{\n      type: Output\n    }],\n    mapRightclick: [{\n      type: Output\n    }],\n    shapeChanged: [{\n      type: Output\n    }],\n    titleChanged: [{\n      type: Output\n    }],\n    visibleChanged: [{\n      type: Output\n    }],\n    zindexChanged: [{\n      type: Output\n    }]\n  });\n})(); /// <reference types=\"google.maps\" />\n\n/** Default options for a clusterer. */\n\n\nconst DEFAULT_CLUSTERER_OPTIONS = {};\n/**\n * Angular component for implementing a Google Maps Marker Clusterer.\n *\n * See https://developers.google.com/maps/documentation/javascript/marker-clustering\n */\n\nclass MapMarkerClusterer {\n  constructor(_googleMap, _ngZone) {\n    this._googleMap = _googleMap;\n    this._ngZone = _ngZone;\n    this._currentMarkers = new Set();\n    this._eventManager = new MapEventManager(this._ngZone);\n    this._destroy = new Subject();\n\n    this.ariaLabelFn = () => '';\n    /**\n     * See\n     * googlemaps.github.io/v3-utility-library/modules/\n     * _google_markerclustererplus.html#clusteringbegin\n     */\n\n\n    this.clusteringbegin = this._eventManager.getLazyEmitter('clusteringbegin');\n    /**\n     * See\n     * googlemaps.github.io/v3-utility-library/modules/_google_markerclustererplus.html#clusteringend\n     */\n\n    this.clusteringend = this._eventManager.getLazyEmitter('clusteringend');\n    /** Emits when a cluster has been clicked. */\n\n    this.clusterClick = this._eventManager.getLazyEmitter('click');\n    this._canInitialize = this._googleMap._isBrowser;\n  }\n\n  set averageCenter(averageCenter) {\n    this._averageCenter = averageCenter;\n  }\n\n  set batchSizeIE(batchSizeIE) {\n    this._batchSizeIE = batchSizeIE;\n  }\n\n  set calculator(calculator) {\n    this._calculator = calculator;\n  }\n\n  set clusterClass(clusterClass) {\n    this._clusterClass = clusterClass;\n  }\n\n  set enableRetinaIcons(enableRetinaIcons) {\n    this._enableRetinaIcons = enableRetinaIcons;\n  }\n\n  set gridSize(gridSize) {\n    this._gridSize = gridSize;\n  }\n\n  set ignoreHidden(ignoreHidden) {\n    this._ignoreHidden = ignoreHidden;\n  }\n\n  set imageExtension(imageExtension) {\n    this._imageExtension = imageExtension;\n  }\n\n  set imagePath(imagePath) {\n    this._imagePath = imagePath;\n  }\n\n  set imageSizes(imageSizes) {\n    this._imageSizes = imageSizes;\n  }\n\n  set maxZoom(maxZoom) {\n    this._maxZoom = maxZoom;\n  }\n\n  set minimumClusterSize(minimumClusterSize) {\n    this._minimumClusterSize = minimumClusterSize;\n  }\n\n  set styles(styles) {\n    this._styles = styles;\n  }\n\n  set title(title) {\n    this._title = title;\n  }\n\n  set zIndex(zIndex) {\n    this._zIndex = zIndex;\n  }\n\n  set zoomOnClick(zoomOnClick) {\n    this._zoomOnClick = zoomOnClick;\n  }\n\n  set options(options) {\n    this._options = options;\n  }\n\n  ngOnInit() {\n    if (this._canInitialize) {\n      const clustererWindow = window;\n\n      if (!clustererWindow.MarkerClusterer && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('MarkerClusterer class not found, cannot construct a marker cluster. ' + 'Please install the MarkerClustererPlus library: ' + 'https://github.com/googlemaps/js-markerclustererplus');\n      } // Create the object outside the zone so its events don't trigger change detection.\n      // We'll bring it back in inside the `MapEventManager` only for the events that the\n      // user has subscribed to.\n\n\n      this._ngZone.runOutsideAngular(() => {\n        this.markerClusterer = new MarkerClusterer(this._googleMap.googleMap, [], this._combineOptions());\n      });\n\n      this._assertInitialized();\n\n      this._eventManager.setTarget(this.markerClusterer);\n    }\n  }\n\n  ngAfterContentInit() {\n    if (this._canInitialize) {\n      this._watchForMarkerChanges();\n    }\n  }\n\n  ngOnChanges(changes) {\n    const {\n      markerClusterer: clusterer,\n      ariaLabelFn,\n      _averageCenter,\n      _batchSizeIE,\n      _calculator,\n      _styles,\n      _clusterClass,\n      _enableRetinaIcons,\n      _gridSize,\n      _ignoreHidden,\n      _imageExtension,\n      _imagePath,\n      _imageSizes,\n      _maxZoom,\n      _minimumClusterSize,\n      _title,\n      _zIndex,\n      _zoomOnClick\n    } = this;\n\n    if (clusterer) {\n      if (changes['options']) {\n        clusterer.setOptions(this._combineOptions());\n      }\n\n      if (changes['ariaLabelFn']) {\n        clusterer.ariaLabelFn = ariaLabelFn;\n      }\n\n      if (changes['averageCenter'] && _averageCenter !== undefined) {\n        clusterer.setAverageCenter(_averageCenter);\n      }\n\n      if (changes['batchSizeIE'] && _batchSizeIE !== undefined) {\n        clusterer.setBatchSizeIE(_batchSizeIE);\n      }\n\n      if (changes['calculator'] && !!_calculator) {\n        clusterer.setCalculator(_calculator);\n      }\n\n      if (changes['clusterClass'] && _clusterClass !== undefined) {\n        clusterer.setClusterClass(_clusterClass);\n      }\n\n      if (changes['enableRetinaIcons'] && _enableRetinaIcons !== undefined) {\n        clusterer.setEnableRetinaIcons(_enableRetinaIcons);\n      }\n\n      if (changes['gridSize'] && _gridSize !== undefined) {\n        clusterer.setGridSize(_gridSize);\n      }\n\n      if (changes['ignoreHidden'] && _ignoreHidden !== undefined) {\n        clusterer.setIgnoreHidden(_ignoreHidden);\n      }\n\n      if (changes['imageExtension'] && _imageExtension !== undefined) {\n        clusterer.setImageExtension(_imageExtension);\n      }\n\n      if (changes['imagePath'] && _imagePath !== undefined) {\n        clusterer.setImagePath(_imagePath);\n      }\n\n      if (changes['imageSizes'] && _imageSizes) {\n        clusterer.setImageSizes(_imageSizes);\n      }\n\n      if (changes['maxZoom'] && _maxZoom !== undefined) {\n        clusterer.setMaxZoom(_maxZoom);\n      }\n\n      if (changes['minimumClusterSize'] && _minimumClusterSize !== undefined) {\n        clusterer.setMinimumClusterSize(_minimumClusterSize);\n      }\n\n      if (changes['styles'] && _styles) {\n        clusterer.setStyles(_styles);\n      }\n\n      if (changes['title'] && _title !== undefined) {\n        clusterer.setTitle(_title);\n      }\n\n      if (changes['zIndex'] && _zIndex !== undefined) {\n        clusterer.setZIndex(_zIndex);\n      }\n\n      if (changes['zoomOnClick'] && _zoomOnClick !== undefined) {\n        clusterer.setZoomOnClick(_zoomOnClick);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n\n    this._destroy.complete();\n\n    this._eventManager.destroy();\n\n    if (this.markerClusterer) {\n      this.markerClusterer.setMap(null);\n    }\n  }\n\n  fitMapToMarkers(padding) {\n    this._assertInitialized();\n\n    this.markerClusterer.fitMapToMarkers(padding);\n  }\n\n  getAverageCenter() {\n    this._assertInitialized();\n\n    return this.markerClusterer.getAverageCenter();\n  }\n\n  getBatchSizeIE() {\n    this._assertInitialized();\n\n    return this.markerClusterer.getBatchSizeIE();\n  }\n\n  getCalculator() {\n    this._assertInitialized();\n\n    return this.markerClusterer.getCalculator();\n  }\n\n  getClusterClass() {\n    this._assertInitialized();\n\n    return this.markerClusterer.getClusterClass();\n  }\n\n  getClusters() {\n    this._assertInitialized();\n\n    return this.markerClusterer.getClusters();\n  }\n\n  getEnableRetinaIcons() {\n    this._assertInitialized();\n\n    return this.markerClusterer.getEnableRetinaIcons();\n  }\n\n  getGridSize() {\n    this._assertInitialized();\n\n    return this.markerClusterer.getGridSize();\n  }\n\n  getIgnoreHidden() {\n    this._assertInitialized();\n\n    return this.markerClusterer.getIgnoreHidden();\n  }\n\n  getImageExtension() {\n    this._assertInitialized();\n\n    return this.markerClusterer.getImageExtension();\n  }\n\n  getImagePath() {\n    this._assertInitialized();\n\n    return this.markerClusterer.getImagePath();\n  }\n\n  getImageSizes() {\n    this._assertInitialized();\n\n    return this.markerClusterer.getImageSizes();\n  }\n\n  getMaxZoom() {\n    this._assertInitialized();\n\n    return this.markerClusterer.getMaxZoom();\n  }\n\n  getMinimumClusterSize() {\n    this._assertInitialized();\n\n    return this.markerClusterer.getMinimumClusterSize();\n  }\n\n  getStyles() {\n    this._assertInitialized();\n\n    return this.markerClusterer.getStyles();\n  }\n\n  getTitle() {\n    this._assertInitialized();\n\n    return this.markerClusterer.getTitle();\n  }\n\n  getTotalClusters() {\n    this._assertInitialized();\n\n    return this.markerClusterer.getTotalClusters();\n  }\n\n  getTotalMarkers() {\n    this._assertInitialized();\n\n    return this.markerClusterer.getTotalMarkers();\n  }\n\n  getZIndex() {\n    this._assertInitialized();\n\n    return this.markerClusterer.getZIndex();\n  }\n\n  getZoomOnClick() {\n    this._assertInitialized();\n\n    return this.markerClusterer.getZoomOnClick();\n  }\n\n  _combineOptions() {\n    const options = this._options || DEFAULT_CLUSTERER_OPTIONS;\n    return { ...options,\n      ariaLabelFn: this.ariaLabelFn ?? options.ariaLabelFn,\n      averageCenter: this._averageCenter ?? options.averageCenter,\n      batchSize: this.batchSize ?? options.batchSize,\n      batchSizeIE: this._batchSizeIE ?? options.batchSizeIE,\n      calculator: this._calculator ?? options.calculator,\n      clusterClass: this._clusterClass ?? options.clusterClass,\n      enableRetinaIcons: this._enableRetinaIcons ?? options.enableRetinaIcons,\n      gridSize: this._gridSize ?? options.gridSize,\n      ignoreHidden: this._ignoreHidden ?? options.ignoreHidden,\n      imageExtension: this._imageExtension ?? options.imageExtension,\n      imagePath: this._imagePath ?? options.imagePath,\n      imageSizes: this._imageSizes ?? options.imageSizes,\n      maxZoom: this._maxZoom ?? options.maxZoom,\n      minimumClusterSize: this._minimumClusterSize ?? options.minimumClusterSize,\n      styles: this._styles ?? options.styles,\n      title: this._title ?? options.title,\n      zIndex: this._zIndex ?? options.zIndex,\n      zoomOnClick: this._zoomOnClick ?? options.zoomOnClick\n    };\n  }\n\n  _watchForMarkerChanges() {\n    this._assertInitialized();\n\n    const initialMarkers = [];\n\n    for (const marker of this._getInternalMarkers(this._markers.toArray())) {\n      this._currentMarkers.add(marker);\n\n      initialMarkers.push(marker);\n    }\n\n    this.markerClusterer.addMarkers(initialMarkers);\n\n    this._markers.changes.pipe(takeUntil(this._destroy)).subscribe(markerComponents => {\n      this._assertInitialized();\n\n      const newMarkers = new Set(this._getInternalMarkers(markerComponents));\n      const markersToAdd = [];\n      const markersToRemove = [];\n\n      for (const marker of Array.from(newMarkers)) {\n        if (!this._currentMarkers.has(marker)) {\n          this._currentMarkers.add(marker);\n\n          markersToAdd.push(marker);\n        }\n      }\n\n      for (const marker of Array.from(this._currentMarkers)) {\n        if (!newMarkers.has(marker)) {\n          markersToRemove.push(marker);\n        }\n      }\n\n      this.markerClusterer.addMarkers(markersToAdd, true);\n      this.markerClusterer.removeMarkers(markersToRemove, true);\n      this.markerClusterer.repaint();\n\n      for (const marker of markersToRemove) {\n        this._currentMarkers.delete(marker);\n      }\n    });\n  }\n\n  _getInternalMarkers(markers) {\n    return markers.filter(markerComponent => !!markerComponent.marker).map(markerComponent => markerComponent.marker);\n  }\n\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._googleMap.googleMap) {\n        throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n      }\n\n      if (!this.markerClusterer) {\n        throw Error('Cannot interact with a MarkerClusterer before it has been initialized. ' + 'Please wait for the MarkerClusterer to load before trying to interact with it.');\n      }\n    }\n  }\n\n}\n\nMapMarkerClusterer.ɵfac = function MapMarkerClusterer_Factory(t) {\n  return new (t || MapMarkerClusterer)(i0.ɵɵdirectiveInject(GoogleMap), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nMapMarkerClusterer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MapMarkerClusterer,\n  selectors: [[\"map-marker-clusterer\"]],\n  contentQueries: function MapMarkerClusterer_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MapMarker, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._markers = _t);\n    }\n  },\n  inputs: {\n    ariaLabelFn: \"ariaLabelFn\",\n    averageCenter: \"averageCenter\",\n    batchSize: \"batchSize\",\n    batchSizeIE: \"batchSizeIE\",\n    calculator: \"calculator\",\n    clusterClass: \"clusterClass\",\n    enableRetinaIcons: \"enableRetinaIcons\",\n    gridSize: \"gridSize\",\n    ignoreHidden: \"ignoreHidden\",\n    imageExtension: \"imageExtension\",\n    imagePath: \"imagePath\",\n    imageSizes: \"imageSizes\",\n    maxZoom: \"maxZoom\",\n    minimumClusterSize: \"minimumClusterSize\",\n    styles: \"styles\",\n    title: \"title\",\n    zIndex: \"zIndex\",\n    zoomOnClick: \"zoomOnClick\",\n    options: \"options\"\n  },\n  outputs: {\n    clusteringbegin: \"clusteringbegin\",\n    clusteringend: \"clusteringend\",\n    clusterClick: \"clusterClick\"\n  },\n  exportAs: [\"mapMarkerClusterer\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MapMarkerClusterer_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapMarkerClusterer, [{\n    type: Component,\n    args: [{\n      selector: 'map-marker-clusterer',\n      exportAs: 'mapMarkerClusterer',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    ariaLabelFn: [{\n      type: Input\n    }],\n    averageCenter: [{\n      type: Input\n    }],\n    batchSize: [{\n      type: Input\n    }],\n    batchSizeIE: [{\n      type: Input\n    }],\n    calculator: [{\n      type: Input\n    }],\n    clusterClass: [{\n      type: Input\n    }],\n    enableRetinaIcons: [{\n      type: Input\n    }],\n    gridSize: [{\n      type: Input\n    }],\n    ignoreHidden: [{\n      type: Input\n    }],\n    imageExtension: [{\n      type: Input\n    }],\n    imagePath: [{\n      type: Input\n    }],\n    imageSizes: [{\n      type: Input\n    }],\n    maxZoom: [{\n      type: Input\n    }],\n    minimumClusterSize: [{\n      type: Input\n    }],\n    styles: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }],\n    zoomOnClick: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    clusteringbegin: [{\n      type: Output\n    }],\n    clusteringend: [{\n      type: Output\n    }],\n    clusterClick: [{\n      type: Output\n    }],\n    _markers: [{\n      type: ContentChildren,\n      args: [MapMarker, {\n        descendants: true\n      }]\n    }]\n  });\n})(); /// <reference types=\"google.maps\" />\n\n/**\n * Angular component that renders a Google Maps Polygon via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon\n */\n\n\nclass MapPolygon {\n  constructor(_map, _ngZone) {\n    this._map = _map;\n    this._ngZone = _ngZone;\n    this._eventManager = new MapEventManager(this._ngZone);\n    this._options = new BehaviorSubject({});\n    this._paths = new BehaviorSubject(undefined);\n    this._destroyed = new Subject();\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.click\n     */\n\n    this.polygonClick = this._eventManager.getLazyEmitter('click');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dblclick\n     */\n\n    this.polygonDblclick = this._eventManager.getLazyEmitter('dblclick');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.drag\n     */\n\n    this.polygonDrag = this._eventManager.getLazyEmitter('drag');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dragend\n     */\n\n    this.polygonDragend = this._eventManager.getLazyEmitter('dragend');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dragstart\n     */\n\n    this.polygonDragstart = this._eventManager.getLazyEmitter('dragstart');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mousedown\n     */\n\n    this.polygonMousedown = this._eventManager.getLazyEmitter('mousedown');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mousemove\n     */\n\n    this.polygonMousemove = this._eventManager.getLazyEmitter('mousemove');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseout\n     */\n\n    this.polygonMouseout = this._eventManager.getLazyEmitter('mouseout');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseover\n     */\n\n    this.polygonMouseover = this._eventManager.getLazyEmitter('mouseover');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseup\n     */\n\n    this.polygonMouseup = this._eventManager.getLazyEmitter('mouseup');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.rightclick\n     */\n\n    this.polygonRightclick = this._eventManager.getLazyEmitter('rightclick');\n  }\n\n  set options(options) {\n    this._options.next(options || {});\n  }\n\n  set paths(paths) {\n    this._paths.next(paths);\n  }\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._combineOptions().pipe(take(1)).subscribe(options => {\n        // Create the object outside the zone so its events don't trigger change detection.\n        // We'll bring it back in inside the `MapEventManager` only for the events that the\n        // user has subscribed to.\n        this._ngZone.runOutsideAngular(() => {\n          this.polygon = new google.maps.Polygon(options);\n        });\n\n        this._assertInitialized();\n\n        this.polygon.setMap(this._map.googleMap);\n\n        this._eventManager.setTarget(this.polygon);\n      });\n\n      this._watchForOptionsChanges();\n\n      this._watchForPathChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n\n    if (this.polygon) {\n      this.polygon.setMap(null);\n    }\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getDraggable\n   */\n\n\n  getDraggable() {\n    this._assertInitialized();\n\n    return this.polygon.getDraggable();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getEditable\n   */\n\n\n  getEditable() {\n    this._assertInitialized();\n\n    return this.polygon.getEditable();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getPath\n   */\n\n\n  getPath() {\n    this._assertInitialized();\n\n    return this.polygon.getPath();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getPaths\n   */\n\n\n  getPaths() {\n    this._assertInitialized();\n\n    return this.polygon.getPaths();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getVisible\n   */\n\n\n  getVisible() {\n    this._assertInitialized();\n\n    return this.polygon.getVisible();\n  }\n\n  _combineOptions() {\n    return combineLatest([this._options, this._paths]).pipe(map(([options, paths]) => {\n      const combinedOptions = { ...options,\n        paths: paths || options.paths\n      };\n      return combinedOptions;\n    }));\n  }\n\n  _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n      this._assertInitialized();\n\n      this.polygon.setOptions(options);\n    });\n  }\n\n  _watchForPathChanges() {\n    this._paths.pipe(takeUntil(this._destroyed)).subscribe(paths => {\n      if (paths) {\n        this._assertInitialized();\n\n        this.polygon.setPaths(paths);\n      }\n    });\n  }\n\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._map.googleMap) {\n        throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n      }\n\n      if (!this.polygon) {\n        throw Error('Cannot interact with a Google Map Polygon before it has been ' + 'initialized. Please wait for the Polygon to load before trying to interact with it.');\n      }\n    }\n  }\n\n}\n\nMapPolygon.ɵfac = function MapPolygon_Factory(t) {\n  return new (t || MapPolygon)(i0.ɵɵdirectiveInject(GoogleMap), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nMapPolygon.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MapPolygon,\n  selectors: [[\"map-polygon\"]],\n  inputs: {\n    options: \"options\",\n    paths: \"paths\"\n  },\n  outputs: {\n    polygonClick: \"polygonClick\",\n    polygonDblclick: \"polygonDblclick\",\n    polygonDrag: \"polygonDrag\",\n    polygonDragend: \"polygonDragend\",\n    polygonDragstart: \"polygonDragstart\",\n    polygonMousedown: \"polygonMousedown\",\n    polygonMousemove: \"polygonMousemove\",\n    polygonMouseout: \"polygonMouseout\",\n    polygonMouseover: \"polygonMouseover\",\n    polygonMouseup: \"polygonMouseup\",\n    polygonRightclick: \"polygonRightclick\"\n  },\n  exportAs: [\"mapPolygon\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapPolygon, [{\n    type: Directive,\n    args: [{\n      selector: 'map-polygon',\n      exportAs: 'mapPolygon'\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    options: [{\n      type: Input\n    }],\n    paths: [{\n      type: Input\n    }],\n    polygonClick: [{\n      type: Output\n    }],\n    polygonDblclick: [{\n      type: Output\n    }],\n    polygonDrag: [{\n      type: Output\n    }],\n    polygonDragend: [{\n      type: Output\n    }],\n    polygonDragstart: [{\n      type: Output\n    }],\n    polygonMousedown: [{\n      type: Output\n    }],\n    polygonMousemove: [{\n      type: Output\n    }],\n    polygonMouseout: [{\n      type: Output\n    }],\n    polygonMouseover: [{\n      type: Output\n    }],\n    polygonMouseup: [{\n      type: Output\n    }],\n    polygonRightclick: [{\n      type: Output\n    }]\n  });\n})(); /// <reference types=\"google.maps\" />\n\n/**\n * Angular component that renders a Google Maps Polyline via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline\n */\n\n\nclass MapPolyline {\n  constructor(_map, _ngZone) {\n    this._map = _map;\n    this._ngZone = _ngZone;\n    this._eventManager = new MapEventManager(this._ngZone);\n    this._options = new BehaviorSubject({});\n    this._path = new BehaviorSubject(undefined);\n    this._destroyed = new Subject();\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.click\n     */\n\n    this.polylineClick = this._eventManager.getLazyEmitter('click');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dblclick\n     */\n\n    this.polylineDblclick = this._eventManager.getLazyEmitter('dblclick');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.drag\n     */\n\n    this.polylineDrag = this._eventManager.getLazyEmitter('drag');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dragend\n     */\n\n    this.polylineDragend = this._eventManager.getLazyEmitter('dragend');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dragstart\n     */\n\n    this.polylineDragstart = this._eventManager.getLazyEmitter('dragstart');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mousedown\n     */\n\n    this.polylineMousedown = this._eventManager.getLazyEmitter('mousedown');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mousemove\n     */\n\n    this.polylineMousemove = this._eventManager.getLazyEmitter('mousemove');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseout\n     */\n\n    this.polylineMouseout = this._eventManager.getLazyEmitter('mouseout');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseover\n     */\n\n    this.polylineMouseover = this._eventManager.getLazyEmitter('mouseover');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseup\n     */\n\n    this.polylineMouseup = this._eventManager.getLazyEmitter('mouseup');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.rightclick\n     */\n\n    this.polylineRightclick = this._eventManager.getLazyEmitter('rightclick');\n  }\n\n  set options(options) {\n    this._options.next(options || {});\n  }\n\n  set path(path) {\n    this._path.next(path);\n  }\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._combineOptions().pipe(take(1)).subscribe(options => {\n        // Create the object outside the zone so its events don't trigger change detection.\n        // We'll bring it back in inside the `MapEventManager` only for the events that the\n        // user has subscribed to.\n        this._ngZone.runOutsideAngular(() => this.polyline = new google.maps.Polyline(options));\n\n        this._assertInitialized();\n\n        this.polyline.setMap(this._map.googleMap);\n\n        this._eventManager.setTarget(this.polyline);\n      });\n\n      this._watchForOptionsChanges();\n\n      this._watchForPathChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n\n    if (this.polyline) {\n      this.polyline.setMap(null);\n    }\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getDraggable\n   */\n\n\n  getDraggable() {\n    this._assertInitialized();\n\n    return this.polyline.getDraggable();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getEditable\n   */\n\n\n  getEditable() {\n    this._assertInitialized();\n\n    return this.polyline.getEditable();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getPath\n   */\n\n\n  getPath() {\n    this._assertInitialized();\n\n    return this.polyline.getPath();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getVisible\n   */\n\n\n  getVisible() {\n    this._assertInitialized();\n\n    return this.polyline.getVisible();\n  }\n\n  _combineOptions() {\n    return combineLatest([this._options, this._path]).pipe(map(([options, path]) => {\n      const combinedOptions = { ...options,\n        path: path || options.path\n      };\n      return combinedOptions;\n    }));\n  }\n\n  _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n      this._assertInitialized();\n\n      this.polyline.setOptions(options);\n    });\n  }\n\n  _watchForPathChanges() {\n    this._path.pipe(takeUntil(this._destroyed)).subscribe(path => {\n      if (path) {\n        this._assertInitialized();\n\n        this.polyline.setPath(path);\n      }\n    });\n  }\n\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._map.googleMap) {\n        throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n      }\n\n      if (!this.polyline) {\n        throw Error('Cannot interact with a Google Map Polyline before it has been ' + 'initialized. Please wait for the Polyline to load before trying to interact with it.');\n      }\n    }\n  }\n\n}\n\nMapPolyline.ɵfac = function MapPolyline_Factory(t) {\n  return new (t || MapPolyline)(i0.ɵɵdirectiveInject(GoogleMap), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nMapPolyline.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MapPolyline,\n  selectors: [[\"map-polyline\"]],\n  inputs: {\n    options: \"options\",\n    path: \"path\"\n  },\n  outputs: {\n    polylineClick: \"polylineClick\",\n    polylineDblclick: \"polylineDblclick\",\n    polylineDrag: \"polylineDrag\",\n    polylineDragend: \"polylineDragend\",\n    polylineDragstart: \"polylineDragstart\",\n    polylineMousedown: \"polylineMousedown\",\n    polylineMousemove: \"polylineMousemove\",\n    polylineMouseout: \"polylineMouseout\",\n    polylineMouseover: \"polylineMouseover\",\n    polylineMouseup: \"polylineMouseup\",\n    polylineRightclick: \"polylineRightclick\"\n  },\n  exportAs: [\"mapPolyline\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapPolyline, [{\n    type: Directive,\n    args: [{\n      selector: 'map-polyline',\n      exportAs: 'mapPolyline'\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    options: [{\n      type: Input\n    }],\n    path: [{\n      type: Input\n    }],\n    polylineClick: [{\n      type: Output\n    }],\n    polylineDblclick: [{\n      type: Output\n    }],\n    polylineDrag: [{\n      type: Output\n    }],\n    polylineDragend: [{\n      type: Output\n    }],\n    polylineDragstart: [{\n      type: Output\n    }],\n    polylineMousedown: [{\n      type: Output\n    }],\n    polylineMousemove: [{\n      type: Output\n    }],\n    polylineMouseout: [{\n      type: Output\n    }],\n    polylineMouseover: [{\n      type: Output\n    }],\n    polylineMouseup: [{\n      type: Output\n    }],\n    polylineRightclick: [{\n      type: Output\n    }]\n  });\n})(); /// <reference types=\"google.maps\" />\n\n/**\n * Angular component that renders a Google Maps Rectangle via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle\n */\n\n\nclass MapRectangle {\n  constructor(_map, _ngZone) {\n    this._map = _map;\n    this._ngZone = _ngZone;\n    this._eventManager = new MapEventManager(this._ngZone);\n    this._options = new BehaviorSubject({});\n    this._bounds = new BehaviorSubject(undefined);\n    this._destroyed = new Subject();\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.boundsChanged\n     */\n\n    this.boundsChanged = this._eventManager.getLazyEmitter('bounds_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.click\n     */\n\n    this.rectangleClick = this._eventManager.getLazyEmitter('click');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dblclick\n     */\n\n    this.rectangleDblclick = this._eventManager.getLazyEmitter('dblclick');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.drag\n     */\n\n    this.rectangleDrag = this._eventManager.getLazyEmitter('drag');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dragend\n     */\n\n    this.rectangleDragend = this._eventManager.getLazyEmitter('dragend');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dragstart\n     */\n\n    this.rectangleDragstart = this._eventManager.getLazyEmitter('dragstart');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mousedown\n     */\n\n    this.rectangleMousedown = this._eventManager.getLazyEmitter('mousedown');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mousemove\n     */\n\n    this.rectangleMousemove = this._eventManager.getLazyEmitter('mousemove');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseout\n     */\n\n    this.rectangleMouseout = this._eventManager.getLazyEmitter('mouseout');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseover\n     */\n\n    this.rectangleMouseover = this._eventManager.getLazyEmitter('mouseover');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseup\n     */\n\n    this.rectangleMouseup = this._eventManager.getLazyEmitter('mouseup');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.rightclick\n     */\n\n    this.rectangleRightclick = this._eventManager.getLazyEmitter('rightclick');\n  }\n\n  set options(options) {\n    this._options.next(options || {});\n  }\n\n  set bounds(bounds) {\n    this._bounds.next(bounds);\n  }\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._combineOptions().pipe(take(1)).subscribe(options => {\n        // Create the object outside the zone so its events don't trigger change detection.\n        // We'll bring it back in inside the `MapEventManager` only for the events that the\n        // user has subscribed to.\n        this._ngZone.runOutsideAngular(() => {\n          this.rectangle = new google.maps.Rectangle(options);\n        });\n\n        this._assertInitialized();\n\n        this.rectangle.setMap(this._map.googleMap);\n\n        this._eventManager.setTarget(this.rectangle);\n      });\n\n      this._watchForOptionsChanges();\n\n      this._watchForBoundsChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n\n    if (this.rectangle) {\n      this.rectangle.setMap(null);\n    }\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getBounds\n   */\n\n\n  getBounds() {\n    this._assertInitialized();\n\n    return this.rectangle.getBounds();\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getDraggable\n   */\n\n\n  getDraggable() {\n    this._assertInitialized();\n\n    return this.rectangle.getDraggable();\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getEditable\n   */\n\n\n  getEditable() {\n    this._assertInitialized();\n\n    return this.rectangle.getEditable();\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getVisible\n   */\n\n\n  getVisible() {\n    this._assertInitialized();\n\n    return this.rectangle.getVisible();\n  }\n\n  _combineOptions() {\n    return combineLatest([this._options, this._bounds]).pipe(map(([options, bounds]) => {\n      const combinedOptions = { ...options,\n        bounds: bounds || options.bounds\n      };\n      return combinedOptions;\n    }));\n  }\n\n  _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n      this._assertInitialized();\n\n      this.rectangle.setOptions(options);\n    });\n  }\n\n  _watchForBoundsChanges() {\n    this._bounds.pipe(takeUntil(this._destroyed)).subscribe(bounds => {\n      if (bounds) {\n        this._assertInitialized();\n\n        this.rectangle.setBounds(bounds);\n      }\n    });\n  }\n\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._map.googleMap) {\n        throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n      }\n\n      if (!this.rectangle) {\n        throw Error('Cannot interact with a Google Map Rectangle before it has been initialized. ' + 'Please wait for the Rectangle to load before trying to interact with it.');\n      }\n    }\n  }\n\n}\n\nMapRectangle.ɵfac = function MapRectangle_Factory(t) {\n  return new (t || MapRectangle)(i0.ɵɵdirectiveInject(GoogleMap), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nMapRectangle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MapRectangle,\n  selectors: [[\"map-rectangle\"]],\n  inputs: {\n    options: \"options\",\n    bounds: \"bounds\"\n  },\n  outputs: {\n    boundsChanged: \"boundsChanged\",\n    rectangleClick: \"rectangleClick\",\n    rectangleDblclick: \"rectangleDblclick\",\n    rectangleDrag: \"rectangleDrag\",\n    rectangleDragend: \"rectangleDragend\",\n    rectangleDragstart: \"rectangleDragstart\",\n    rectangleMousedown: \"rectangleMousedown\",\n    rectangleMousemove: \"rectangleMousemove\",\n    rectangleMouseout: \"rectangleMouseout\",\n    rectangleMouseover: \"rectangleMouseover\",\n    rectangleMouseup: \"rectangleMouseup\",\n    rectangleRightclick: \"rectangleRightclick\"\n  },\n  exportAs: [\"mapRectangle\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapRectangle, [{\n    type: Directive,\n    args: [{\n      selector: 'map-rectangle',\n      exportAs: 'mapRectangle'\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    options: [{\n      type: Input\n    }],\n    bounds: [{\n      type: Input\n    }],\n    boundsChanged: [{\n      type: Output\n    }],\n    rectangleClick: [{\n      type: Output\n    }],\n    rectangleDblclick: [{\n      type: Output\n    }],\n    rectangleDrag: [{\n      type: Output\n    }],\n    rectangleDragend: [{\n      type: Output\n    }],\n    rectangleDragstart: [{\n      type: Output\n    }],\n    rectangleMousedown: [{\n      type: Output\n    }],\n    rectangleMousemove: [{\n      type: Output\n    }],\n    rectangleMouseout: [{\n      type: Output\n    }],\n    rectangleMouseover: [{\n      type: Output\n    }],\n    rectangleMouseup: [{\n      type: Output\n    }],\n    rectangleRightclick: [{\n      type: Output\n    }]\n  });\n})(); /// <reference types=\"google.maps\" />\n\n/**\n * Angular component that renders a Google Maps Traffic Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/map#TrafficLayer\n */\n\n\nclass MapTrafficLayer {\n  constructor(_map, _ngZone) {\n    this._map = _map;\n    this._ngZone = _ngZone;\n    this._autoRefresh = new BehaviorSubject(true);\n    this._destroyed = new Subject();\n  }\n  /**\n   * Whether the traffic layer refreshes with updated information automatically.\n   */\n\n\n  set autoRefresh(autoRefresh) {\n    this._autoRefresh.next(autoRefresh);\n  }\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._combineOptions().pipe(take(1)).subscribe(options => {\n        // Create the object outside the zone so its events don't trigger change detection.\n        this._ngZone.runOutsideAngular(() => {\n          this.trafficLayer = new google.maps.TrafficLayer(options);\n        });\n\n        this._assertInitialized();\n\n        this.trafficLayer.setMap(this._map.googleMap);\n      });\n\n      this._watchForAutoRefreshChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n\n    this._destroyed.complete();\n\n    if (this.trafficLayer) {\n      this.trafficLayer.setMap(null);\n    }\n  }\n\n  _combineOptions() {\n    return this._autoRefresh.pipe(map(autoRefresh => {\n      const combinedOptions = {\n        autoRefresh\n      };\n      return combinedOptions;\n    }));\n  }\n\n  _watchForAutoRefreshChanges() {\n    this._combineOptions().pipe(takeUntil(this._destroyed)).subscribe(options => {\n      this._assertInitialized();\n\n      this.trafficLayer.setOptions(options);\n    });\n  }\n\n  _assertInitialized() {\n    if (!this._map.googleMap) {\n      throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n    }\n\n    if (!this.trafficLayer) {\n      throw Error('Cannot interact with a Google Map Traffic Layer before it has been initialized. ' + 'Please wait for the Traffic Layer to load before trying to interact with it.');\n    }\n  }\n\n}\n\nMapTrafficLayer.ɵfac = function MapTrafficLayer_Factory(t) {\n  return new (t || MapTrafficLayer)(i0.ɵɵdirectiveInject(GoogleMap), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nMapTrafficLayer.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MapTrafficLayer,\n  selectors: [[\"map-traffic-layer\"]],\n  inputs: {\n    autoRefresh: \"autoRefresh\"\n  },\n  exportAs: [\"mapTrafficLayer\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapTrafficLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'map-traffic-layer',\n      exportAs: 'mapTrafficLayer'\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    autoRefresh: [{\n      type: Input\n    }]\n  });\n})(); /// <reference types=\"google.maps\" />\n\n/**\n * Angular component that renders a Google Maps Transit Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/map#TransitLayer\n */\n\n\nclass MapTransitLayer extends MapBaseLayer {\n  _initializeObject() {\n    this.transitLayer = new google.maps.TransitLayer();\n  }\n\n  _setMap() {\n    this._assertLayerInitialized();\n\n    this.transitLayer.setMap(this._map.googleMap);\n  }\n\n  _unsetMap() {\n    if (this.transitLayer) {\n      this.transitLayer.setMap(null);\n    }\n  }\n\n  _assertLayerInitialized() {\n    if (!this.transitLayer) {\n      throw Error('Cannot interact with a Google Map Transit Layer before it has been initialized. ' + 'Please wait for the Transit Layer to load before trying to interact with it.');\n    }\n  }\n\n}\n\nMapTransitLayer.ɵfac = /* @__PURE__ */function () {\n  let ɵMapTransitLayer_BaseFactory;\n  return function MapTransitLayer_Factory(t) {\n    return (ɵMapTransitLayer_BaseFactory || (ɵMapTransitLayer_BaseFactory = i0.ɵɵgetInheritedFactory(MapTransitLayer)))(t || MapTransitLayer);\n  };\n}();\n\nMapTransitLayer.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MapTransitLayer,\n  selectors: [[\"map-transit-layer\"]],\n  exportAs: [\"mapTransitLayer\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapTransitLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'map-transit-layer',\n      exportAs: 'mapTransitLayer'\n    }]\n  }], null, null);\n})(); /// <reference types=\"google.maps\" />\n\n/**\n * Angular directive that renders a Google Maps heatmap via the Google Maps JavaScript API.\n *\n * See: https://developers.google.com/maps/documentation/javascript/reference/visualization\n */\n\n\nclass MapHeatmapLayer {\n  constructor(_googleMap, _ngZone) {\n    this._googleMap = _googleMap;\n    this._ngZone = _ngZone;\n  }\n  /**\n   * Data shown on the heatmap.\n   * See: https://developers.google.com/maps/documentation/javascript/reference/visualization\n   */\n\n\n  set data(data) {\n    this._data = data;\n  }\n  /**\n   * Options used to configure the heatmap. See:\n   * developers.google.com/maps/documentation/javascript/reference/visualization#HeatmapLayerOptions\n   */\n\n\n  set options(options) {\n    this._options = options;\n  }\n\n  ngOnInit() {\n    if (this._googleMap._isBrowser) {\n      if (!window.google?.maps?.visualization && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Namespace `google.maps.visualization` not found, cannot construct heatmap. ' + 'Please install the Google Maps JavaScript API with the \"visualization\" library: ' + 'https://developers.google.com/maps/documentation/javascript/visualization');\n      } // Create the object outside the zone so its events don't trigger change detection.\n      // We'll bring it back in inside the `MapEventManager` only for the events that the\n      // user has subscribed to.\n\n\n      this._ngZone.runOutsideAngular(() => {\n        this.heatmap = new google.maps.visualization.HeatmapLayer(this._combineOptions());\n      });\n\n      this._assertInitialized();\n\n      this.heatmap.setMap(this._googleMap.googleMap);\n    }\n  }\n\n  ngOnChanges(changes) {\n    const {\n      _data,\n      heatmap\n    } = this;\n\n    if (heatmap) {\n      if (changes['options']) {\n        heatmap.setOptions(this._combineOptions());\n      }\n\n      if (changes['data'] && _data !== undefined) {\n        heatmap.setData(this._normalizeData(_data));\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.heatmap) {\n      this.heatmap.setMap(null);\n    }\n  }\n  /**\n   * Gets the data that is currently shown on the heatmap.\n   * See: developers.google.com/maps/documentation/javascript/reference/visualization#HeatmapLayer\n   */\n\n\n  getData() {\n    this._assertInitialized();\n\n    return this.heatmap.getData();\n  }\n  /** Creates a combined options object using the passed-in options and the individual inputs. */\n\n\n  _combineOptions() {\n    const options = this._options || {};\n    return { ...options,\n      data: this._normalizeData(this._data || options.data || []),\n      map: this._googleMap.googleMap\n    };\n  }\n  /**\n   * Most Google Maps APIs support both `LatLng` objects and `LatLngLiteral`. The latter is more\n   * convenient to write out, because the Google Maps API doesn't have to have been loaded in order\n   * to construct them. The `HeatmapLayer` appears to be an exception that only allows a `LatLng`\n   * object, or it throws a runtime error. Since it's more convenient and we expect that Angular\n   * users will load the API asynchronously, we allow them to pass in a `LatLngLiteral` and we\n   * convert it to a `LatLng` object before passing it off to Google Maps.\n   */\n\n\n  _normalizeData(data) {\n    const result = [];\n    data.forEach(item => {\n      result.push(isLatLngLiteral(item) ? new google.maps.LatLng(item.lat, item.lng) : item);\n    });\n    return result;\n  }\n  /** Asserts that the heatmap object has been initialized. */\n\n\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._googleMap.googleMap) {\n        throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n      }\n\n      if (!this.heatmap) {\n        throw Error('Cannot interact with a Google Map HeatmapLayer before it has been ' + 'initialized. Please wait for the heatmap to load before trying to interact with it.');\n      }\n    }\n  }\n\n}\n\nMapHeatmapLayer.ɵfac = function MapHeatmapLayer_Factory(t) {\n  return new (t || MapHeatmapLayer)(i0.ɵɵdirectiveInject(GoogleMap), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nMapHeatmapLayer.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MapHeatmapLayer,\n  selectors: [[\"map-heatmap-layer\"]],\n  inputs: {\n    data: \"data\",\n    options: \"options\"\n  },\n  exportAs: [\"mapHeatmapLayer\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapHeatmapLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'map-heatmap-layer',\n      exportAs: 'mapHeatmapLayer'\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }]\n  });\n})();\n/** Asserts that an object is a `LatLngLiteral`. */\n\n\nfunction isLatLngLiteral(value) {\n  return value && typeof value.lat === 'number' && typeof value.lng === 'number';\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst COMPONENTS = [GoogleMap, MapBaseLayer, MapBicyclingLayer, MapCircle, MapDirectionsRenderer, MapGroundOverlay, MapInfoWindow, MapKmlLayer, MapMarker, MapMarkerClusterer, MapPolygon, MapPolyline, MapRectangle, MapTrafficLayer, MapTransitLayer, MapHeatmapLayer];\n\nclass GoogleMapsModule {}\n\nGoogleMapsModule.ɵfac = function GoogleMapsModule_Factory(t) {\n  return new (t || GoogleMapsModule)();\n};\n\nGoogleMapsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: GoogleMapsModule\n});\nGoogleMapsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleMapsModule, [{\n    type: NgModule,\n    args: [{\n      declarations: COMPONENTS,\n      exports: COMPONENTS\n    }]\n  }], null, null);\n})(); /// <reference types=\"google.maps\" />\n\n/**\n * Angular service that wraps the Google Maps DirectionsService from the Google Maps JavaScript\n * API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/directions#DirectionsService\n */\n\n\nclass MapDirectionsService {\n  constructor(_ngZone) {\n    this._ngZone = _ngZone;\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/directions\n   * #DirectionsService.route\n   */\n\n\n  route(request) {\n    return new Observable(observer => {\n      // Initialize the `DirectionsService` lazily since the Google Maps API may\n      // not have been loaded when the provider is instantiated.\n      if (!this._directionsService) {\n        this._directionsService = new google.maps.DirectionsService();\n      }\n\n      this._directionsService.route(request, (result, status) => {\n        this._ngZone.run(() => {\n          observer.next({\n            result: result || undefined,\n            status\n          });\n          observer.complete();\n        });\n      });\n    });\n  }\n\n}\n\nMapDirectionsService.ɵfac = function MapDirectionsService_Factory(t) {\n  return new (t || MapDirectionsService)(i0.ɵɵinject(i0.NgZone));\n};\n\nMapDirectionsService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MapDirectionsService,\n  factory: MapDirectionsService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapDirectionsService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }];\n  }, null);\n})(); /// <reference types=\"google.maps\" />\n\n/**\n * Angular service that wraps the Google Maps Geocoder from the Google Maps JavaScript API.\n * See developers.google.com/maps/documentation/javascript/reference/geocoder#Geocoder\n */\n\n\nclass MapGeocoder {\n  constructor(_ngZone) {\n    this._ngZone = _ngZone;\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/geocoder#Geocoder.geocode\n   */\n\n\n  geocode(request) {\n    return new Observable(observer => {\n      // Initialize the `Geocoder` lazily since the Google Maps API may\n      // not have been loaded when the provider is instantiated.\n      if (!this._geocoder) {\n        this._geocoder = new google.maps.Geocoder();\n      }\n\n      this._geocoder.geocode(request, (results, status) => {\n        this._ngZone.run(() => {\n          observer.next({\n            results: results || [],\n            status\n          });\n          observer.complete();\n        });\n      });\n    });\n  }\n\n}\n\nMapGeocoder.ɵfac = function MapGeocoder_Factory(t) {\n  return new (t || MapGeocoder)(i0.ɵɵinject(i0.NgZone));\n};\n\nMapGeocoder.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MapGeocoder,\n  factory: MapGeocoder.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapGeocoder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { GoogleMap, GoogleMapsModule, MapBaseLayer, MapBicyclingLayer, MapCircle, MapDirectionsRenderer, MapDirectionsService, MapGeocoder, MapGroundOverlay, MapHeatmapLayer, MapInfoWindow, MapKmlLayer, MapMarker, MapMarkerClusterer, MapPolygon, MapPolyline, MapRectangle, MapTrafficLayer, MapTransitLayer }; //# sourceMappingURL=google-maps.mjs.map","map":{"version":3,"sources":["/home/juancamilo/Documentos/Developer/Api WEB/Projecto JYW/JYW/frontend/jyw/node_modules/@angular/google-maps/fesm2020/google-maps.mjs"],"names":["i0","EventEmitter","PLATFORM_ID","Component","ChangeDetectionStrategy","ViewEncapsulation","Inject","Input","Output","Directive","ContentChildren","NgModule","Injectable","isPlatformBrowser","BehaviorSubject","Observable","Subject","combineLatest","switchMap","take","map","takeUntil","MapEventManager","constructor","_ngZone","_pending","_listeners","_targetStream","undefined","_clearListeners","listener","remove","getLazyEmitter","name","pipe","target","observable","observer","push","addListener","event","run","next","setTarget","currentTarget","value","forEach","subscriber","subscribe","destroy","complete","DEFAULT_OPTIONS","center","lat","lng","zoom","mapTypeId","DEFAULT_HEIGHT","DEFAULT_WIDTH","GoogleMap","_elementRef","platformId","_eventManager","height","width","_options","mapInitialized","authFailure","boundsChanged","centerChanged","mapClick","mapDblclick","mapDrag","mapDragend","mapDragstart","headingChanged","idle","maptypeidChanged","mapMousemove","mapMouseout","mapMouseover","projectionChanged","mapRightclick","tilesloaded","tiltChanged","zoomChanged","_isBrowser","googleMapsWindow","window","google","ngDevMode","Error","_existingAuthFailureCallback","gm_authFailure","emit","_center","_zoom","options","ngOnChanges","changes","_setSize","googleMap","setOptions","_combineOptions","setCenter","setZoom","setMapTypeId","ngOnInit","_mapEl","nativeElement","querySelector","runOutsideAngular","maps","Map","ngOnDestroy","fitBounds","bounds","padding","_assertInitialized","panBy","x","y","panTo","latLng","panToBounds","latLngBounds","getBounds","getCenter","getClickableIcons","getHeading","getMapTypeId","getProjection","getStreetView","getTilt","getZoom","controls","data","mapTypes","overlayMapTypes","styles","style","coerceCssPixelValue","ɵfac","ElementRef","NgZone","ɵcmp","type","args","selector","exportAs","changeDetection","OnPush","template","encapsulation","None","Object","decorators","cssUnitsPattern","test","MapBaseLayer","_map","_initializeObject","_setMap","_unsetMap","ɵdir","MapBicyclingLayer","bicyclingLayer","BicyclingLayer","_assertLayerInitialized","setMap","MapCircle","_radius","_destroyed","circleClick","circleDblclick","circleDrag","circleDragend","circleDragstart","circleMousedown","circleMousemove","circleMouseout","circleMouseover","circleMouseup","radiusChanged","circleRightclick","radius","circle","Circle","_watchForOptionsChanges","_watchForCenterChanges","_watchForRadiusChanges","getDraggable","getEditable","getRadius","getVisible","combinedOptions","setRadius","MapDirectionsRenderer","_googleMap","directionsChanged","directions","_directions","directionsRenderer","DirectionsRenderer","setDirections","getDirections","getPanel","getRouteIndex","MapGroundOverlay","_opacity","_url","_bounds","clickable","url","opacity","groundOverlay","GroundOverlay","getValue","_watchForOpacityChanges","_watchForUrlChanges","getOpacity","getUrl","setOpacity","overlay","set","MapInfoWindow","_position","_destroy","closeclick","contentChanged","domready","positionChanged","zindexChanged","position","combinedOptionsChanges","infoWindow","InfoWindow","_watchForPositionChanges","close","getContent","getPosition","getZIndex","open","anchor","shouldFocus","anchorObject","getAnchor","get","display","content","setPosition","host","MapKmlLayer","kmlClick","defaultviewportChanged","statusChanged","kmlLayer","KmlLayer","getDefaultViewport","getMetadata","getStatus","setUrl","DEFAULT_MARKER_OPTIONS","MapMarker","animationChanged","clickableChanged","cursorChanged","draggableChanged","flatChanged","iconChanged","mapMousedown","mapMouseup","shapeChanged","titleChanged","visibleChanged","title","_title","label","_label","_clickable","icon","_icon","visible","_visible","marker","Marker","setTitle","setLabel","setClickable","setIcon","setVisible","getAnimation","getClickable","getCursor","getIcon","getLabel","getShape","getTitle","DEFAULT_CLUSTERER_OPTIONS","MapMarkerClusterer","_currentMarkers","Set","ariaLabelFn","clusteringbegin","clusteringend","clusterClick","_canInitialize","averageCenter","_averageCenter","batchSizeIE","_batchSizeIE","calculator","_calculator","clusterClass","_clusterClass","enableRetinaIcons","_enableRetinaIcons","gridSize","_gridSize","ignoreHidden","_ignoreHidden","imageExtension","_imageExtension","imagePath","_imagePath","imageSizes","_imageSizes","maxZoom","_maxZoom","minimumClusterSize","_minimumClusterSize","_styles","zIndex","_zIndex","zoomOnClick","_zoomOnClick","clustererWindow","MarkerClusterer","markerClusterer","ngAfterContentInit","_watchForMarkerChanges","clusterer","setAverageCenter","setBatchSizeIE","setCalculator","setClusterClass","setEnableRetinaIcons","setGridSize","setIgnoreHidden","setImageExtension","setImagePath","setImageSizes","setMaxZoom","setMinimumClusterSize","setStyles","setZIndex","setZoomOnClick","fitMapToMarkers","getAverageCenter","getBatchSizeIE","getCalculator","getClusterClass","getClusters","getEnableRetinaIcons","getGridSize","getIgnoreHidden","getImageExtension","getImagePath","getImageSizes","getMaxZoom","getMinimumClusterSize","getStyles","getTotalClusters","getTotalMarkers","getZoomOnClick","batchSize","initialMarkers","_getInternalMarkers","_markers","toArray","add","addMarkers","markerComponents","newMarkers","markersToAdd","markersToRemove","Array","from","has","removeMarkers","repaint","delete","markers","filter","markerComponent","descendants","MapPolygon","_paths","polygonClick","polygonDblclick","polygonDrag","polygonDragend","polygonDragstart","polygonMousedown","polygonMousemove","polygonMouseout","polygonMouseover","polygonMouseup","polygonRightclick","paths","polygon","Polygon","_watchForPathChanges","getPath","getPaths","setPaths","MapPolyline","_path","polylineClick","polylineDblclick","polylineDrag","polylineDragend","polylineDragstart","polylineMousedown","polylineMousemove","polylineMouseout","polylineMouseover","polylineMouseup","polylineRightclick","path","polyline","Polyline","setPath","MapRectangle","rectangleClick","rectangleDblclick","rectangleDrag","rectangleDragend","rectangleDragstart","rectangleMousedown","rectangleMousemove","rectangleMouseout","rectangleMouseover","rectangleMouseup","rectangleRightclick","rectangle","Rectangle","_watchForBoundsChanges","setBounds","MapTrafficLayer","_autoRefresh","autoRefresh","trafficLayer","TrafficLayer","_watchForAutoRefreshChanges","MapTransitLayer","transitLayer","TransitLayer","MapHeatmapLayer","_data","visualization","heatmap","HeatmapLayer","setData","_normalizeData","getData","result","item","isLatLngLiteral","LatLng","COMPONENTS","GoogleMapsModule","ɵmod","ɵinj","declarations","exports","MapDirectionsService","route","request","_directionsService","DirectionsService","status","ɵprov","providedIn","MapGeocoder","geocode","_geocoder","Geocoder","results"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, PLATFORM_ID, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Input, Output, Directive, ContentChildren, NgModule, Injectable } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { BehaviorSubject, Observable, Subject, combineLatest } from 'rxjs';\nimport { switchMap, take, map, takeUntil } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Manages event on a Google Maps object, ensuring that events are added only when necessary. */\nclass MapEventManager {\n    constructor(_ngZone) {\n        this._ngZone = _ngZone;\n        /** Pending listeners that were added before the target was set. */\n        this._pending = [];\n        this._listeners = [];\n        this._targetStream = new BehaviorSubject(undefined);\n    }\n    /** Clears all currently-registered event listeners. */\n    _clearListeners() {\n        for (const listener of this._listeners) {\n            listener.remove();\n        }\n        this._listeners = [];\n    }\n    /** Gets an observable that adds an event listener to the map when a consumer subscribes to it. */\n    getLazyEmitter(name) {\n        return this._targetStream.pipe(switchMap(target => {\n            const observable = new Observable(observer => {\n                // If the target hasn't been initialized yet, cache the observer so it can be added later.\n                if (!target) {\n                    this._pending.push({ observable, observer });\n                    return undefined;\n                }\n                const listener = target.addListener(name, (event) => {\n                    this._ngZone.run(() => observer.next(event));\n                });\n                this._listeners.push(listener);\n                return () => listener.remove();\n            });\n            return observable;\n        }));\n    }\n    /** Sets the current target that the manager should bind events to. */\n    setTarget(target) {\n        const currentTarget = this._targetStream.value;\n        if (target === currentTarget) {\n            return;\n        }\n        // Clear the listeners from the pre-existing target.\n        if (currentTarget) {\n            this._clearListeners();\n            this._pending = [];\n        }\n        this._targetStream.next(target);\n        // Add the listeners that were bound before the map was initialized.\n        this._pending.forEach(subscriber => subscriber.observable.subscribe(subscriber.observer));\n        this._pending = [];\n    }\n    /** Destroys the manager and clears the event listeners. */\n    destroy() {\n        this._clearListeners();\n        this._pending = [];\n        this._targetStream.complete();\n    }\n}\n\n/// <reference types=\"google.maps\" />\n/** default options set to the Googleplex */\nconst DEFAULT_OPTIONS = {\n    center: { lat: 37.421995, lng: -122.084092 },\n    zoom: 17,\n    // Note: the type conversion here isn't necessary for our CI, but it resolves a g3 failure.\n    mapTypeId: 'roadmap',\n};\n/** Arbitrary default height for the map element */\nconst DEFAULT_HEIGHT = '500px';\n/** Arbitrary default width for the map element */\nconst DEFAULT_WIDTH = '500px';\n/**\n * Angular component that renders a Google Map via the Google Maps JavaScript\n * API.\n * @see https://developers.google.com/maps/documentation/javascript/reference/\n */\nclass GoogleMap {\n    constructor(_elementRef, _ngZone, platformId) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._eventManager = new MapEventManager(this._ngZone);\n        /** Height of the map. Set this to `null` if you'd like to control the height through CSS. */\n        this.height = DEFAULT_HEIGHT;\n        /** Width of the map. Set this to `null` if you'd like to control the width through CSS. */\n        this.width = DEFAULT_WIDTH;\n        this._options = DEFAULT_OPTIONS;\n        /** Event emitted when the map is initialized. */\n        this.mapInitialized = new EventEmitter();\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/events#auth-errors\n         */\n        this.authFailure = new EventEmitter();\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.bounds_changed\n         */\n        this.boundsChanged = this._eventManager.getLazyEmitter('bounds_changed');\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.center_changed\n         */\n        this.centerChanged = this._eventManager.getLazyEmitter('center_changed');\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.click\n         */\n        this.mapClick = this._eventManager.getLazyEmitter('click');\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dblclick\n         */\n        this.mapDblclick = this._eventManager.getLazyEmitter('dblclick');\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.drag\n         */\n        this.mapDrag = this._eventManager.getLazyEmitter('drag');\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragend\n         */\n        this.mapDragend = this._eventManager.getLazyEmitter('dragend');\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragstart\n         */\n        this.mapDragstart = this._eventManager.getLazyEmitter('dragstart');\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.heading_changed\n         */\n        this.headingChanged = this._eventManager.getLazyEmitter('heading_changed');\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.idle\n         */\n        this.idle = this._eventManager.getLazyEmitter('idle');\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.maptypeid_changed\n         */\n        this.maptypeidChanged = this._eventManager.getLazyEmitter('maptypeid_changed');\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mousemove\n         */\n        this.mapMousemove = this._eventManager.getLazyEmitter('mousemove');\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseout\n         */\n        this.mapMouseout = this._eventManager.getLazyEmitter('mouseout');\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseover\n         */\n        this.mapMouseover = this._eventManager.getLazyEmitter('mouseover');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/map#Map.projection_changed\n         */\n        this.projectionChanged = this._eventManager.getLazyEmitter('projection_changed');\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.rightclick\n         */\n        this.mapRightclick = this._eventManager.getLazyEmitter('rightclick');\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilesloaded\n         */\n        this.tilesloaded = this._eventManager.getLazyEmitter('tilesloaded');\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilt_changed\n         */\n        this.tiltChanged = this._eventManager.getLazyEmitter('tilt_changed');\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.zoom_changed\n         */\n        this.zoomChanged = this._eventManager.getLazyEmitter('zoom_changed');\n        this._isBrowser = isPlatformBrowser(platformId);\n        if (this._isBrowser) {\n            const googleMapsWindow = window;\n            if (!googleMapsWindow.google && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Namespace google not found, cannot construct embedded google ' +\n                    'map. Please install the Google Maps JavaScript API: ' +\n                    'https://developers.google.com/maps/documentation/javascript/' +\n                    'tutorial#Loading_the_Maps_API');\n            }\n            this._existingAuthFailureCallback = googleMapsWindow.gm_authFailure;\n            googleMapsWindow.gm_authFailure = () => {\n                if (this._existingAuthFailureCallback) {\n                    this._existingAuthFailureCallback();\n                }\n                this.authFailure.emit();\n            };\n        }\n    }\n    set center(center) {\n        this._center = center;\n    }\n    set zoom(zoom) {\n        this._zoom = zoom;\n    }\n    set options(options) {\n        this._options = options || DEFAULT_OPTIONS;\n    }\n    ngOnChanges(changes) {\n        if (changes['height'] || changes['width']) {\n            this._setSize();\n        }\n        const googleMap = this.googleMap;\n        if (googleMap) {\n            if (changes['options']) {\n                googleMap.setOptions(this._combineOptions());\n            }\n            if (changes['center'] && this._center) {\n                googleMap.setCenter(this._center);\n            }\n            // Note that the zoom can be zero.\n            if (changes['zoom'] && this._zoom != null) {\n                googleMap.setZoom(this._zoom);\n            }\n            if (changes['mapTypeId'] && this.mapTypeId) {\n                googleMap.setMapTypeId(this.mapTypeId);\n            }\n        }\n    }\n    ngOnInit() {\n        // It should be a noop during server-side rendering.\n        if (this._isBrowser) {\n            this._mapEl = this._elementRef.nativeElement.querySelector('.map-container');\n            this._setSize();\n            // Create the object outside the zone so its events don't trigger change detection.\n            // We'll bring it back in inside the `MapEventManager` only for the events that the\n            // user has subscribed to.\n            this._ngZone.runOutsideAngular(() => {\n                this.googleMap = new google.maps.Map(this._mapEl, this._combineOptions());\n            });\n            this._eventManager.setTarget(this.googleMap);\n            this.mapInitialized.emit(this.googleMap);\n        }\n    }\n    ngOnDestroy() {\n        this._eventManager.destroy();\n        if (this._isBrowser) {\n            const googleMapsWindow = window;\n            googleMapsWindow.gm_authFailure = this._existingAuthFailureCallback;\n        }\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.fitBounds\n     */\n    fitBounds(bounds, padding) {\n        this._assertInitialized();\n        this.googleMap.fitBounds(bounds, padding);\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panBy\n     */\n    panBy(x, y) {\n        this._assertInitialized();\n        this.googleMap.panBy(x, y);\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panTo\n     */\n    panTo(latLng) {\n        this._assertInitialized();\n        this.googleMap.panTo(latLng);\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panToBounds\n     */\n    panToBounds(latLngBounds, padding) {\n        this._assertInitialized();\n        this.googleMap.panToBounds(latLngBounds, padding);\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getBounds\n     */\n    getBounds() {\n        this._assertInitialized();\n        return this.googleMap.getBounds() || null;\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getCenter\n     */\n    getCenter() {\n        this._assertInitialized();\n        return this.googleMap.getCenter();\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getClickableIcons\n     */\n    getClickableIcons() {\n        this._assertInitialized();\n        return this.googleMap.getClickableIcons();\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getHeading\n     */\n    getHeading() {\n        this._assertInitialized();\n        return this.googleMap.getHeading();\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getMapTypeId\n     */\n    getMapTypeId() {\n        this._assertInitialized();\n        return this.googleMap.getMapTypeId();\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getProjection\n     */\n    getProjection() {\n        this._assertInitialized();\n        return this.googleMap.getProjection() || null;\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getStreetView\n     */\n    getStreetView() {\n        this._assertInitialized();\n        return this.googleMap.getStreetView();\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getTilt\n     */\n    getTilt() {\n        this._assertInitialized();\n        return this.googleMap.getTilt();\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getZoom\n     */\n    getZoom() {\n        this._assertInitialized();\n        return this.googleMap.getZoom();\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.controls\n     */\n    get controls() {\n        this._assertInitialized();\n        return this.googleMap.controls;\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.data\n     */\n    get data() {\n        this._assertInitialized();\n        return this.googleMap.data;\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mapTypes\n     */\n    get mapTypes() {\n        this._assertInitialized();\n        return this.googleMap.mapTypes;\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.overlayMapTypes\n     */\n    get overlayMapTypes() {\n        this._assertInitialized();\n        return this.googleMap.overlayMapTypes;\n    }\n    _setSize() {\n        if (this._mapEl) {\n            const styles = this._mapEl.style;\n            styles.height =\n                this.height === null ? '' : coerceCssPixelValue(this.height) || DEFAULT_HEIGHT;\n            styles.width = this.width === null ? '' : coerceCssPixelValue(this.width) || DEFAULT_WIDTH;\n        }\n    }\n    /** Combines the center and zoom and the other map options into a single object */\n    _combineOptions() {\n        const options = this._options || {};\n        return {\n            ...options,\n            // It's important that we set **some** kind of `center` and `zoom`, otherwise\n            // Google Maps will render a blank rectangle which looks broken.\n            center: this._center || options.center || DEFAULT_OPTIONS.center,\n            zoom: this._zoom ?? options.zoom ?? DEFAULT_OPTIONS.zoom,\n            // Passing in an undefined `mapTypeId` seems to break tile loading\n            // so make sure that we have some kind of default (see #22082).\n            mapTypeId: this.mapTypeId || options.mapTypeId || DEFAULT_OPTIONS.mapTypeId,\n        };\n    }\n    /** Asserts that the map has been initialized. */\n    _assertInitialized() {\n        if (!this.googleMap && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                'Please wait for the API to load before trying to interact with it.');\n        }\n    }\n}\nGoogleMap.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: GoogleMap, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nGoogleMap.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: GoogleMap, selector: \"google-map\", inputs: { height: \"height\", width: \"width\", mapTypeId: \"mapTypeId\", center: \"center\", zoom: \"zoom\", options: \"options\" }, outputs: { mapInitialized: \"mapInitialized\", authFailure: \"authFailure\", boundsChanged: \"boundsChanged\", centerChanged: \"centerChanged\", mapClick: \"mapClick\", mapDblclick: \"mapDblclick\", mapDrag: \"mapDrag\", mapDragend: \"mapDragend\", mapDragstart: \"mapDragstart\", headingChanged: \"headingChanged\", idle: \"idle\", maptypeidChanged: \"maptypeidChanged\", mapMousemove: \"mapMousemove\", mapMouseout: \"mapMouseout\", mapMouseover: \"mapMouseover\", projectionChanged: \"projectionChanged\", mapRightclick: \"mapRightclick\", tilesloaded: \"tilesloaded\", tiltChanged: \"tiltChanged\", zoomChanged: \"zoomChanged\" }, exportAs: [\"googleMap\"], usesOnChanges: true, ngImport: i0, template: '<div class=\"map-container\"></div><ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: GoogleMap, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'google-map',\n                    exportAs: 'googleMap',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<div class=\"map-container\"></div><ng-content></ng-content>',\n                    encapsulation: ViewEncapsulation.None,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { height: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], mapTypeId: [{\n                type: Input\n            }], center: [{\n                type: Input\n            }], zoom: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], mapInitialized: [{\n                type: Output\n            }], authFailure: [{\n                type: Output\n            }], boundsChanged: [{\n                type: Output\n            }], centerChanged: [{\n                type: Output\n            }], mapClick: [{\n                type: Output\n            }], mapDblclick: [{\n                type: Output\n            }], mapDrag: [{\n                type: Output\n            }], mapDragend: [{\n                type: Output\n            }], mapDragstart: [{\n                type: Output\n            }], headingChanged: [{\n                type: Output\n            }], idle: [{\n                type: Output\n            }], maptypeidChanged: [{\n                type: Output\n            }], mapMousemove: [{\n                type: Output\n            }], mapMouseout: [{\n                type: Output\n            }], mapMouseover: [{\n                type: Output\n            }], projectionChanged: [{\n                type: Output\n            }], mapRightclick: [{\n                type: Output\n            }], tilesloaded: [{\n                type: Output\n            }], tiltChanged: [{\n                type: Output\n            }], zoomChanged: [{\n                type: Output\n            }] } });\nconst cssUnitsPattern = /([A-Za-z%]+)$/;\n/** Coerces a value to a CSS pixel value. */\nfunction coerceCssPixelValue(value) {\n    if (value == null) {\n        return '';\n    }\n    return cssUnitsPattern.test(value) ? value : `${value}px`;\n}\n\n/// <reference types=\"google.maps\" />\nclass MapBaseLayer {\n    constructor(_map, _ngZone) {\n        this._map = _map;\n        this._ngZone = _ngZone;\n    }\n    ngOnInit() {\n        if (this._map._isBrowser) {\n            this._ngZone.runOutsideAngular(() => {\n                this._initializeObject();\n            });\n            this._assertInitialized();\n            this._setMap();\n        }\n    }\n    ngOnDestroy() {\n        this._unsetMap();\n    }\n    _assertInitialized() {\n        if (!this._map.googleMap) {\n            throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                'Please wait for the API to load before trying to interact with it.');\n        }\n    }\n    _initializeObject() { }\n    _setMap() { }\n    _unsetMap() { }\n}\nMapBaseLayer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapBaseLayer, deps: [{ token: GoogleMap }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nMapBaseLayer.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MapBaseLayer, selector: \"map-base-layer\", exportAs: [\"mapBaseLayer\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapBaseLayer, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'map-base-layer',\n                    exportAs: 'mapBaseLayer',\n                }]\n        }], ctorParameters: function () { return [{ type: GoogleMap }, { type: i0.NgZone }]; } });\n\n/// <reference types=\"google.maps\" />\n/**\n * Angular component that renders a Google Maps Bicycling Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/map#BicyclingLayer\n */\nclass MapBicyclingLayer extends MapBaseLayer {\n    _initializeObject() {\n        this.bicyclingLayer = new google.maps.BicyclingLayer();\n    }\n    _setMap() {\n        this._assertLayerInitialized();\n        this.bicyclingLayer.setMap(this._map.googleMap);\n    }\n    _unsetMap() {\n        if (this.bicyclingLayer) {\n            this.bicyclingLayer.setMap(null);\n        }\n    }\n    _assertLayerInitialized() {\n        if (!this.bicyclingLayer) {\n            throw Error('Cannot interact with a Google Map Bicycling Layer before it has been initialized. ' +\n                'Please wait for the Transit Layer to load before trying to interact with it.');\n        }\n    }\n}\nMapBicyclingLayer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapBicyclingLayer, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMapBicyclingLayer.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MapBicyclingLayer, selector: \"map-bicycling-layer\", exportAs: [\"mapBicyclingLayer\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapBicyclingLayer, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'map-bicycling-layer',\n                    exportAs: 'mapBicyclingLayer',\n                }]\n        }] });\n\n/// <reference types=\"google.maps\" />\n/**\n * Angular component that renders a Google Maps Circle via the Google Maps JavaScript API.\n * @see developers.google.com/maps/documentation/javascript/reference/polygon#Circle\n */\nclass MapCircle {\n    constructor(_map, _ngZone) {\n        this._map = _map;\n        this._ngZone = _ngZone;\n        this._eventManager = new MapEventManager(this._ngZone);\n        this._options = new BehaviorSubject({});\n        this._center = new BehaviorSubject(undefined);\n        this._radius = new BehaviorSubject(undefined);\n        this._destroyed = new Subject();\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.center_changed\n         */\n        this.centerChanged = this._eventManager.getLazyEmitter('center_changed');\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.click\n         */\n        this.circleClick = this._eventManager.getLazyEmitter('click');\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dblclick\n         */\n        this.circleDblclick = this._eventManager.getLazyEmitter('dblclick');\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.drag\n         */\n        this.circleDrag = this._eventManager.getLazyEmitter('drag');\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dragend\n         */\n        this.circleDragend = this._eventManager.getLazyEmitter('dragend');\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dragstart\n         */\n        this.circleDragstart = this._eventManager.getLazyEmitter('dragstart');\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mousedown\n         */\n        this.circleMousedown = this._eventManager.getLazyEmitter('mousedown');\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mousemove\n         */\n        this.circleMousemove = this._eventManager.getLazyEmitter('mousemove');\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseout\n         */\n        this.circleMouseout = this._eventManager.getLazyEmitter('mouseout');\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseover\n         */\n        this.circleMouseover = this._eventManager.getLazyEmitter('mouseover');\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseup\n         */\n        this.circleMouseup = this._eventManager.getLazyEmitter('mouseup');\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.radius_changed\n         */\n        this.radiusChanged = this._eventManager.getLazyEmitter('radius_changed');\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.rightclick\n         */\n        this.circleRightclick = this._eventManager.getLazyEmitter('rightclick');\n    }\n    set options(options) {\n        this._options.next(options || {});\n    }\n    set center(center) {\n        this._center.next(center);\n    }\n    set radius(radius) {\n        this._radius.next(radius);\n    }\n    ngOnInit() {\n        if (this._map._isBrowser) {\n            this._combineOptions()\n                .pipe(take(1))\n                .subscribe(options => {\n                // Create the object outside the zone so its events don't trigger change detection.\n                // We'll bring it back in inside the `MapEventManager` only for the events that the\n                // user has subscribed to.\n                this._ngZone.runOutsideAngular(() => {\n                    this.circle = new google.maps.Circle(options);\n                });\n                this._assertInitialized();\n                this.circle.setMap(this._map.googleMap);\n                this._eventManager.setTarget(this.circle);\n            });\n            this._watchForOptionsChanges();\n            this._watchForCenterChanges();\n            this._watchForRadiusChanges();\n        }\n    }\n    ngOnDestroy() {\n        this._eventManager.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n        if (this.circle) {\n            this.circle.setMap(null);\n        }\n    }\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getBounds\n     */\n    getBounds() {\n        this._assertInitialized();\n        return this.circle.getBounds();\n    }\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getCenter\n     */\n    getCenter() {\n        this._assertInitialized();\n        return this.circle.getCenter();\n    }\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getDraggable\n     */\n    getDraggable() {\n        this._assertInitialized();\n        return this.circle.getDraggable();\n    }\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getEditable\n     */\n    getEditable() {\n        this._assertInitialized();\n        return this.circle.getEditable();\n    }\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getRadius\n     */\n    getRadius() {\n        this._assertInitialized();\n        return this.circle.getRadius();\n    }\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getVisible\n     */\n    getVisible() {\n        this._assertInitialized();\n        return this.circle.getVisible();\n    }\n    _combineOptions() {\n        return combineLatest([this._options, this._center, this._radius]).pipe(map(([options, center, radius]) => {\n            const combinedOptions = {\n                ...options,\n                center: center || options.center,\n                radius: radius !== undefined ? radius : options.radius,\n            };\n            return combinedOptions;\n        }));\n    }\n    _watchForOptionsChanges() {\n        this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n            this._assertInitialized();\n            this.circle.setOptions(options);\n        });\n    }\n    _watchForCenterChanges() {\n        this._center.pipe(takeUntil(this._destroyed)).subscribe(center => {\n            if (center) {\n                this._assertInitialized();\n                this.circle.setCenter(center);\n            }\n        });\n    }\n    _watchForRadiusChanges() {\n        this._radius.pipe(takeUntil(this._destroyed)).subscribe(radius => {\n            if (radius !== undefined) {\n                this._assertInitialized();\n                this.circle.setRadius(radius);\n            }\n        });\n    }\n    _assertInitialized() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._map.googleMap) {\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                    'Please wait for the API to load before trying to interact with it.');\n            }\n            if (!this.circle) {\n                throw Error('Cannot interact with a Google Map Circle before it has been ' +\n                    'initialized. Please wait for the Circle to load before trying to interact with it.');\n            }\n        }\n    }\n}\nMapCircle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapCircle, deps: [{ token: GoogleMap }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nMapCircle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MapCircle, selector: \"map-circle\", inputs: { options: \"options\", center: \"center\", radius: \"radius\" }, outputs: { centerChanged: \"centerChanged\", circleClick: \"circleClick\", circleDblclick: \"circleDblclick\", circleDrag: \"circleDrag\", circleDragend: \"circleDragend\", circleDragstart: \"circleDragstart\", circleMousedown: \"circleMousedown\", circleMousemove: \"circleMousemove\", circleMouseout: \"circleMouseout\", circleMouseover: \"circleMouseover\", circleMouseup: \"circleMouseup\", radiusChanged: \"radiusChanged\", circleRightclick: \"circleRightclick\" }, exportAs: [\"mapCircle\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapCircle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'map-circle',\n                    exportAs: 'mapCircle',\n                }]\n        }], ctorParameters: function () { return [{ type: GoogleMap }, { type: i0.NgZone }]; }, propDecorators: { options: [{\n                type: Input\n            }], center: [{\n                type: Input\n            }], radius: [{\n                type: Input\n            }], centerChanged: [{\n                type: Output\n            }], circleClick: [{\n                type: Output\n            }], circleDblclick: [{\n                type: Output\n            }], circleDrag: [{\n                type: Output\n            }], circleDragend: [{\n                type: Output\n            }], circleDragstart: [{\n                type: Output\n            }], circleMousedown: [{\n                type: Output\n            }], circleMousemove: [{\n                type: Output\n            }], circleMouseout: [{\n                type: Output\n            }], circleMouseover: [{\n                type: Output\n            }], circleMouseup: [{\n                type: Output\n            }], radiusChanged: [{\n                type: Output\n            }], circleRightclick: [{\n                type: Output\n            }] } });\n\n/// <reference types=\"google.maps\" />\n/**\n * Angular component that renders a Google Maps Directions Renderer via the Google Maps\n * JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/directions#DirectionsRenderer\n */\nclass MapDirectionsRenderer {\n    constructor(_googleMap, _ngZone) {\n        this._googleMap = _googleMap;\n        this._ngZone = _ngZone;\n        this._eventManager = new MapEventManager(this._ngZone);\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/directions\n         * #DirectionsRenderer.directions_changed\n         */\n        this.directionsChanged = this._eventManager.getLazyEmitter('directions_changed');\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/directions\n     * #DirectionsRendererOptions.directions\n     */\n    set directions(directions) {\n        this._directions = directions;\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/directions\n     * #DirectionsRendererOptions\n     */\n    set options(options) {\n        this._options = options;\n    }\n    ngOnInit() {\n        if (this._googleMap._isBrowser) {\n            // Create the object outside the zone so its events don't trigger change detection.\n            // We'll bring it back in inside the `MapEventManager` only for the events that the\n            // user has subscribed to.\n            this._ngZone.runOutsideAngular(() => {\n                this.directionsRenderer = new google.maps.DirectionsRenderer(this._combineOptions());\n            });\n            this._assertInitialized();\n            this.directionsRenderer.setMap(this._googleMap.googleMap);\n            this._eventManager.setTarget(this.directionsRenderer);\n        }\n    }\n    ngOnChanges(changes) {\n        if (this.directionsRenderer) {\n            if (changes['options']) {\n                this.directionsRenderer.setOptions(this._combineOptions());\n            }\n            if (changes['directions'] && this._directions !== undefined) {\n                this.directionsRenderer.setDirections(this._directions);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._eventManager.destroy();\n        if (this.directionsRenderer) {\n            this.directionsRenderer.setMap(null);\n        }\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/directions\n     * #DirectionsRenderer.getDirections\n     */\n    getDirections() {\n        this._assertInitialized();\n        return this.directionsRenderer.getDirections();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/directions\n     * #DirectionsRenderer.getPanel\n     */\n    getPanel() {\n        this._assertInitialized();\n        return this.directionsRenderer.getPanel();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/directions\n     * #DirectionsRenderer.getRouteIndex\n     */\n    getRouteIndex() {\n        this._assertInitialized();\n        return this.directionsRenderer.getRouteIndex();\n    }\n    _combineOptions() {\n        const options = this._options || {};\n        return {\n            ...options,\n            directions: this._directions || options.directions,\n            map: this._googleMap.googleMap,\n        };\n    }\n    _assertInitialized() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._googleMap.googleMap) {\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                    'Please wait for the API to load before trying to interact with it.');\n            }\n            if (!this.directionsRenderer) {\n                throw Error('Cannot interact with a Google Map Directions Renderer before it has been ' +\n                    'initialized. Please wait for the Directions Renderer to load before trying ' +\n                    'to interact with it.');\n            }\n        }\n    }\n}\nMapDirectionsRenderer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapDirectionsRenderer, deps: [{ token: GoogleMap }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nMapDirectionsRenderer.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MapDirectionsRenderer, selector: \"map-directions-renderer\", inputs: { directions: \"directions\", options: \"options\" }, outputs: { directionsChanged: \"directionsChanged\" }, exportAs: [\"mapDirectionsRenderer\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapDirectionsRenderer, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'map-directions-renderer',\n                    exportAs: 'mapDirectionsRenderer',\n                }]\n        }], ctorParameters: function () { return [{ type: GoogleMap }, { type: i0.NgZone }]; }, propDecorators: { directions: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], directionsChanged: [{\n                type: Output\n            }] } });\n\n/// <reference types=\"google.maps\" />\n/**\n * Angular component that renders a Google Maps Ground Overlay via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/image-overlay#GroundOverlay\n */\nclass MapGroundOverlay {\n    constructor(_map, _ngZone) {\n        this._map = _map;\n        this._ngZone = _ngZone;\n        this._eventManager = new MapEventManager(this._ngZone);\n        this._opacity = new BehaviorSubject(1);\n        this._url = new BehaviorSubject('');\n        this._bounds = new BehaviorSubject(undefined);\n        this._destroyed = new Subject();\n        /** Whether the overlay is clickable */\n        this.clickable = false;\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/image-overlay#GroundOverlay.click\n         */\n        this.mapClick = this._eventManager.getLazyEmitter('click');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/image-overlay\n         * #GroundOverlay.dblclick\n         */\n        this.mapDblclick = this._eventManager.getLazyEmitter('dblclick');\n    }\n    /** URL of the image that will be shown in the overlay. */\n    set url(url) {\n        this._url.next(url);\n    }\n    /** Bounds for the overlay. */\n    get bounds() {\n        return this._bounds.value;\n    }\n    set bounds(bounds) {\n        this._bounds.next(bounds);\n    }\n    /** Opacity of the overlay. */\n    set opacity(opacity) {\n        this._opacity.next(opacity);\n    }\n    ngOnInit() {\n        if (this._map._isBrowser) {\n            // The ground overlay setup is slightly different from the other Google Maps objects in that\n            // we have to recreate the `GroundOverlay` object whenever the bounds change, because\n            // Google Maps doesn't provide an API to update the bounds of an existing overlay.\n            this._bounds.pipe(takeUntil(this._destroyed)).subscribe(bounds => {\n                if (this.groundOverlay) {\n                    this.groundOverlay.setMap(null);\n                    this.groundOverlay = undefined;\n                }\n                // Create the object outside the zone so its events don't trigger change detection.\n                // We'll bring it back in inside the `MapEventManager` only for the events that the\n                // user has subscribed to.\n                if (bounds) {\n                    this._ngZone.runOutsideAngular(() => {\n                        this.groundOverlay = new google.maps.GroundOverlay(this._url.getValue(), bounds, {\n                            clickable: this.clickable,\n                            opacity: this._opacity.value,\n                        });\n                    });\n                    this._assertInitialized();\n                    this.groundOverlay.setMap(this._map.googleMap);\n                    this._eventManager.setTarget(this.groundOverlay);\n                }\n            });\n            this._watchForOpacityChanges();\n            this._watchForUrlChanges();\n        }\n    }\n    ngOnDestroy() {\n        this._eventManager.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n        if (this.groundOverlay) {\n            this.groundOverlay.setMap(null);\n        }\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/image-overlay\n     * #GroundOverlay.getBounds\n     */\n    getBounds() {\n        this._assertInitialized();\n        return this.groundOverlay.getBounds();\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/image-overlay\n     * #GroundOverlay.getOpacity\n     */\n    getOpacity() {\n        this._assertInitialized();\n        return this.groundOverlay.getOpacity();\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/image-overlay\n     * #GroundOverlay.getUrl\n     */\n    getUrl() {\n        this._assertInitialized();\n        return this.groundOverlay.getUrl();\n    }\n    _watchForOpacityChanges() {\n        this._opacity.pipe(takeUntil(this._destroyed)).subscribe(opacity => {\n            if (opacity != null) {\n                this._assertInitialized();\n                this.groundOverlay.setOpacity(opacity);\n            }\n        });\n    }\n    _watchForUrlChanges() {\n        this._url.pipe(takeUntil(this._destroyed)).subscribe(url => {\n            this._assertInitialized();\n            const overlay = this.groundOverlay;\n            overlay.set('url', url);\n            // Google Maps only redraws the overlay if we re-set the map.\n            overlay.setMap(null);\n            overlay.setMap(this._map.googleMap);\n        });\n    }\n    _assertInitialized() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._map.googleMap) {\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                    'Please wait for the API to load before trying to interact with it.');\n            }\n            if (!this.groundOverlay) {\n                throw Error('Cannot interact with a Google Map GroundOverlay before it has been initialized. ' +\n                    'Please wait for the GroundOverlay to load before trying to interact with it.');\n            }\n        }\n    }\n}\nMapGroundOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapGroundOverlay, deps: [{ token: GoogleMap }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nMapGroundOverlay.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MapGroundOverlay, selector: \"map-ground-overlay\", inputs: { url: \"url\", bounds: \"bounds\", clickable: \"clickable\", opacity: \"opacity\" }, outputs: { mapClick: \"mapClick\", mapDblclick: \"mapDblclick\" }, exportAs: [\"mapGroundOverlay\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapGroundOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'map-ground-overlay',\n                    exportAs: 'mapGroundOverlay',\n                }]\n        }], ctorParameters: function () { return [{ type: GoogleMap }, { type: i0.NgZone }]; }, propDecorators: { url: [{\n                type: Input\n            }], bounds: [{\n                type: Input\n            }], clickable: [{\n                type: Input\n            }], opacity: [{\n                type: Input\n            }], mapClick: [{\n                type: Output\n            }], mapDblclick: [{\n                type: Output\n            }] } });\n\n/// <reference types=\"google.maps\" />\n/**\n * Angular component that renders a Google Maps info window via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/info-window\n */\nclass MapInfoWindow {\n    constructor(_googleMap, _elementRef, _ngZone) {\n        this._googleMap = _googleMap;\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._eventManager = new MapEventManager(this._ngZone);\n        this._options = new BehaviorSubject({});\n        this._position = new BehaviorSubject(undefined);\n        this._destroy = new Subject();\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.closeclick\n         */\n        this.closeclick = this._eventManager.getLazyEmitter('closeclick');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/info-window\n         * #InfoWindow.content_changed\n         */\n        this.contentChanged = this._eventManager.getLazyEmitter('content_changed');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.domready\n         */\n        this.domready = this._eventManager.getLazyEmitter('domready');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/info-window\n         * #InfoWindow.position_changed\n         */\n        this.positionChanged = this._eventManager.getLazyEmitter('position_changed');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/info-window\n         * #InfoWindow.zindex_changed\n         */\n        this.zindexChanged = this._eventManager.getLazyEmitter('zindex_changed');\n    }\n    set options(options) {\n        this._options.next(options || {});\n    }\n    set position(position) {\n        this._position.next(position);\n    }\n    ngOnInit() {\n        if (this._googleMap._isBrowser) {\n            const combinedOptionsChanges = this._combineOptions();\n            combinedOptionsChanges.pipe(take(1)).subscribe(options => {\n                // Create the object outside the zone so its events don't trigger change detection.\n                // We'll bring it back in inside the `MapEventManager` only for the events that the\n                // user has subscribed to.\n                this._ngZone.runOutsideAngular(() => {\n                    this.infoWindow = new google.maps.InfoWindow(options);\n                });\n                this._eventManager.setTarget(this.infoWindow);\n            });\n            this._watchForOptionsChanges();\n            this._watchForPositionChanges();\n        }\n    }\n    ngOnDestroy() {\n        this._eventManager.destroy();\n        this._destroy.next();\n        this._destroy.complete();\n        // If no info window has been created on the server, we do not try closing it.\n        // On the server, an info window cannot be created and this would cause errors.\n        if (this.infoWindow) {\n            this.close();\n        }\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.close\n     */\n    close() {\n        this._assertInitialized();\n        this.infoWindow.close();\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getContent\n     */\n    getContent() {\n        this._assertInitialized();\n        return this.infoWindow.getContent() || null;\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/info-window\n     * #InfoWindow.getPosition\n     */\n    getPosition() {\n        this._assertInitialized();\n        return this.infoWindow.getPosition() || null;\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getZIndex\n     */\n    getZIndex() {\n        this._assertInitialized();\n        return this.infoWindow.getZIndex();\n    }\n    /**\n     * Opens the MapInfoWindow using the provided anchor. If the anchor is not set,\n     * then the position property of the options input is used instead.\n     */\n    open(anchor, shouldFocus) {\n        this._assertInitialized();\n        const anchorObject = anchor ? anchor.getAnchor() : undefined;\n        // Prevent the info window from initializing when trying to reopen on the same anchor.\n        // Note that when the window is opened for the first time, the anchor will always be\n        // undefined. If that's the case, we have to allow it to open in order to handle the\n        // case where the window doesn't have an anchor, but is placed at a particular position.\n        if (this.infoWindow.get('anchor') !== anchorObject || !anchorObject) {\n            this._elementRef.nativeElement.style.display = '';\n            // The config is cast to `any`, because the internal typings are out of date.\n            this.infoWindow.open({\n                map: this._googleMap.googleMap,\n                anchor: anchorObject,\n                shouldFocus,\n            });\n        }\n    }\n    _combineOptions() {\n        return combineLatest([this._options, this._position]).pipe(map(([options, position]) => {\n            const combinedOptions = {\n                ...options,\n                position: position || options.position,\n                content: this._elementRef.nativeElement,\n            };\n            return combinedOptions;\n        }));\n    }\n    _watchForOptionsChanges() {\n        this._options.pipe(takeUntil(this._destroy)).subscribe(options => {\n            this._assertInitialized();\n            this.infoWindow.setOptions(options);\n        });\n    }\n    _watchForPositionChanges() {\n        this._position.pipe(takeUntil(this._destroy)).subscribe(position => {\n            if (position) {\n                this._assertInitialized();\n                this.infoWindow.setPosition(position);\n            }\n        });\n    }\n    _assertInitialized() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._googleMap.googleMap) {\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                    'Please wait for the API to load before trying to interact with it.');\n            }\n            if (!this.infoWindow) {\n                throw Error('Cannot interact with a Google Map Info Window before it has been ' +\n                    'initialized. Please wait for the Info Window to load before trying to interact with ' +\n                    'it.');\n            }\n        }\n    }\n}\nMapInfoWindow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapInfoWindow, deps: [{ token: GoogleMap }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nMapInfoWindow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MapInfoWindow, selector: \"map-info-window\", inputs: { options: \"options\", position: \"position\" }, outputs: { closeclick: \"closeclick\", contentChanged: \"contentChanged\", domready: \"domready\", positionChanged: \"positionChanged\", zindexChanged: \"zindexChanged\" }, host: { styleAttribute: \"display: none\" }, exportAs: [\"mapInfoWindow\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapInfoWindow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'map-info-window',\n                    exportAs: 'mapInfoWindow',\n                    host: { 'style': 'display: none' },\n                }]\n        }], ctorParameters: function () { return [{ type: GoogleMap }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { options: [{\n                type: Input\n            }], position: [{\n                type: Input\n            }], closeclick: [{\n                type: Output\n            }], contentChanged: [{\n                type: Output\n            }], domready: [{\n                type: Output\n            }], positionChanged: [{\n                type: Output\n            }], zindexChanged: [{\n                type: Output\n            }] } });\n\n/// <reference types=\"google.maps\" />\n/**\n * Angular component that renders a Google Maps KML Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer\n */\nclass MapKmlLayer {\n    constructor(_map, _ngZone) {\n        this._map = _map;\n        this._ngZone = _ngZone;\n        this._eventManager = new MapEventManager(this._ngZone);\n        this._options = new BehaviorSubject({});\n        this._url = new BehaviorSubject('');\n        this._destroyed = new Subject();\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.click\n         */\n        this.kmlClick = this._eventManager.getLazyEmitter('click');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/kml\n         * #KmlLayer.defaultviewport_changed\n         */\n        this.defaultviewportChanged = this._eventManager.getLazyEmitter('defaultviewport_changed');\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.status_changed\n         */\n        this.statusChanged = this._eventManager.getLazyEmitter('status_changed');\n    }\n    set options(options) {\n        this._options.next(options || {});\n    }\n    set url(url) {\n        this._url.next(url);\n    }\n    ngOnInit() {\n        if (this._map._isBrowser) {\n            this._combineOptions()\n                .pipe(take(1))\n                .subscribe(options => {\n                // Create the object outside the zone so its events don't trigger change detection.\n                // We'll bring it back in inside the `MapEventManager` only for the events that the\n                // user has subscribed to.\n                this._ngZone.runOutsideAngular(() => (this.kmlLayer = new google.maps.KmlLayer(options)));\n                this._assertInitialized();\n                this.kmlLayer.setMap(this._map.googleMap);\n                this._eventManager.setTarget(this.kmlLayer);\n            });\n            this._watchForOptionsChanges();\n            this._watchForUrlChanges();\n        }\n    }\n    ngOnDestroy() {\n        this._eventManager.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n        if (this.kmlLayer) {\n            this.kmlLayer.setMap(null);\n        }\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getDefaultViewport\n     */\n    getDefaultViewport() {\n        this._assertInitialized();\n        return this.kmlLayer.getDefaultViewport();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getMetadata\n     */\n    getMetadata() {\n        this._assertInitialized();\n        return this.kmlLayer.getMetadata();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getStatus\n     */\n    getStatus() {\n        this._assertInitialized();\n        return this.kmlLayer.getStatus();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getUrl\n     */\n    getUrl() {\n        this._assertInitialized();\n        return this.kmlLayer.getUrl();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getZIndex\n     */\n    getZIndex() {\n        this._assertInitialized();\n        return this.kmlLayer.getZIndex();\n    }\n    _combineOptions() {\n        return combineLatest([this._options, this._url]).pipe(map(([options, url]) => {\n            const combinedOptions = {\n                ...options,\n                url: url || options.url,\n            };\n            return combinedOptions;\n        }));\n    }\n    _watchForOptionsChanges() {\n        this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n            if (this.kmlLayer) {\n                this._assertInitialized();\n                this.kmlLayer.setOptions(options);\n            }\n        });\n    }\n    _watchForUrlChanges() {\n        this._url.pipe(takeUntil(this._destroyed)).subscribe(url => {\n            if (url && this.kmlLayer) {\n                this._assertInitialized();\n                this.kmlLayer.setUrl(url);\n            }\n        });\n    }\n    _assertInitialized() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._map.googleMap) {\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                    'Please wait for the API to load before trying to interact with it.');\n            }\n            if (!this.kmlLayer) {\n                throw Error('Cannot interact with a Google Map KmlLayer before it has been ' +\n                    'initialized. Please wait for the KmlLayer to load before trying to interact with it.');\n            }\n        }\n    }\n}\nMapKmlLayer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapKmlLayer, deps: [{ token: GoogleMap }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nMapKmlLayer.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MapKmlLayer, selector: \"map-kml-layer\", inputs: { options: \"options\", url: \"url\" }, outputs: { kmlClick: \"kmlClick\", defaultviewportChanged: \"defaultviewportChanged\", statusChanged: \"statusChanged\" }, exportAs: [\"mapKmlLayer\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapKmlLayer, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'map-kml-layer',\n                    exportAs: 'mapKmlLayer',\n                }]\n        }], ctorParameters: function () { return [{ type: GoogleMap }, { type: i0.NgZone }]; }, propDecorators: { options: [{\n                type: Input\n            }], url: [{\n                type: Input\n            }], kmlClick: [{\n                type: Output\n            }], defaultviewportChanged: [{\n                type: Output\n            }], statusChanged: [{\n                type: Output\n            }] } });\n\n/// <reference types=\"google.maps\" />\n/**\n * Default options for the Google Maps marker component. Displays a marker\n * at the Googleplex.\n */\nconst DEFAULT_MARKER_OPTIONS = {\n    position: { lat: 37.421995, lng: -122.084092 },\n};\n/**\n * Angular component that renders a Google Maps marker via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/marker\n */\nclass MapMarker {\n    constructor(_googleMap, _ngZone) {\n        this._googleMap = _googleMap;\n        this._ngZone = _ngZone;\n        this._eventManager = new MapEventManager(this._ngZone);\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.animation_changed\n         */\n        this.animationChanged = this._eventManager.getLazyEmitter('animation_changed');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.click\n         */\n        this.mapClick = this._eventManager.getLazyEmitter('click');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.clickable_changed\n         */\n        this.clickableChanged = this._eventManager.getLazyEmitter('clickable_changed');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.cursor_changed\n         */\n        this.cursorChanged = this._eventManager.getLazyEmitter('cursor_changed');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dblclick\n         */\n        this.mapDblclick = this._eventManager.getLazyEmitter('dblclick');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.drag\n         */\n        this.mapDrag = this._eventManager.getLazyEmitter('drag');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragend\n         */\n        this.mapDragend = this._eventManager.getLazyEmitter('dragend');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.draggable_changed\n         */\n        this.draggableChanged = this._eventManager.getLazyEmitter('draggable_changed');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragstart\n         */\n        this.mapDragstart = this._eventManager.getLazyEmitter('dragstart');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.flat_changed\n         */\n        this.flatChanged = this._eventManager.getLazyEmitter('flat_changed');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.icon_changed\n         */\n        this.iconChanged = this._eventManager.getLazyEmitter('icon_changed');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mousedown\n         */\n        this.mapMousedown = this._eventManager.getLazyEmitter('mousedown');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseout\n         */\n        this.mapMouseout = this._eventManager.getLazyEmitter('mouseout');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseover\n         */\n        this.mapMouseover = this._eventManager.getLazyEmitter('mouseover');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseup\n         */\n        this.mapMouseup = this._eventManager.getLazyEmitter('mouseup');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.position_changed\n         */\n        this.positionChanged = this._eventManager.getLazyEmitter('position_changed');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.rightclick\n         */\n        this.mapRightclick = this._eventManager.getLazyEmitter('rightclick');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.shape_changed\n         */\n        this.shapeChanged = this._eventManager.getLazyEmitter('shape_changed');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.title_changed\n         */\n        this.titleChanged = this._eventManager.getLazyEmitter('title_changed');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.visible_changed\n         */\n        this.visibleChanged = this._eventManager.getLazyEmitter('visible_changed');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.zindex_changed\n         */\n        this.zindexChanged = this._eventManager.getLazyEmitter('zindex_changed');\n    }\n    /**\n     * Title of the marker.\n     * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.title\n     */\n    set title(title) {\n        this._title = title;\n    }\n    /**\n     * Position of the marker. See:\n     * developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.position\n     */\n    set position(position) {\n        this._position = position;\n    }\n    /**\n     * Label for the marker.\n     * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.label\n     */\n    set label(label) {\n        this._label = label;\n    }\n    /**\n     * Whether the marker is clickable. See:\n     * developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.clickable\n     */\n    set clickable(clickable) {\n        this._clickable = clickable;\n    }\n    /**\n     * Options used to configure the marker.\n     * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions\n     */\n    set options(options) {\n        this._options = options;\n    }\n    /**\n     * Icon to be used for the marker.\n     * See: https://developers.google.com/maps/documentation/javascript/reference/marker#Icon\n     */\n    set icon(icon) {\n        this._icon = icon;\n    }\n    /**\n     * Whether the marker is visible.\n     * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.visible\n     */\n    set visible(value) {\n        this._visible = value;\n    }\n    ngOnInit() {\n        if (this._googleMap._isBrowser) {\n            // Create the object outside the zone so its events don't trigger change detection.\n            // We'll bring it back in inside the `MapEventManager` only for the events that the\n            // user has subscribed to.\n            this._ngZone.runOutsideAngular(() => {\n                this.marker = new google.maps.Marker(this._combineOptions());\n            });\n            this._assertInitialized();\n            this.marker.setMap(this._googleMap.googleMap);\n            this._eventManager.setTarget(this.marker);\n        }\n    }\n    ngOnChanges(changes) {\n        const { marker, _title, _position, _label, _clickable, _icon, _visible } = this;\n        if (marker) {\n            if (changes['options']) {\n                marker.setOptions(this._combineOptions());\n            }\n            if (changes['title'] && _title !== undefined) {\n                marker.setTitle(_title);\n            }\n            if (changes['position'] && _position) {\n                marker.setPosition(_position);\n            }\n            if (changes['label'] && _label !== undefined) {\n                marker.setLabel(_label);\n            }\n            if (changes['clickable'] && _clickable !== undefined) {\n                marker.setClickable(_clickable);\n            }\n            if (changes['icon'] && _icon) {\n                marker.setIcon(_icon);\n            }\n            if (changes['visible'] && _visible !== undefined) {\n                marker.setVisible(_visible);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._eventManager.destroy();\n        if (this.marker) {\n            this.marker.setMap(null);\n        }\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getAnimation\n     */\n    getAnimation() {\n        this._assertInitialized();\n        return this.marker.getAnimation() || null;\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getClickable\n     */\n    getClickable() {\n        this._assertInitialized();\n        return this.marker.getClickable();\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getCursor\n     */\n    getCursor() {\n        this._assertInitialized();\n        return this.marker.getCursor() || null;\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getDraggable\n     */\n    getDraggable() {\n        this._assertInitialized();\n        return !!this.marker.getDraggable();\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getIcon\n     */\n    getIcon() {\n        this._assertInitialized();\n        return this.marker.getIcon() || null;\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getLabel\n     */\n    getLabel() {\n        this._assertInitialized();\n        return this.marker.getLabel() || null;\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getOpacity\n     */\n    getOpacity() {\n        this._assertInitialized();\n        return this.marker.getOpacity() || null;\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getPosition\n     */\n    getPosition() {\n        this._assertInitialized();\n        return this.marker.getPosition() || null;\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getShape\n     */\n    getShape() {\n        this._assertInitialized();\n        return this.marker.getShape() || null;\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getTitle\n     */\n    getTitle() {\n        this._assertInitialized();\n        return this.marker.getTitle() || null;\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getVisible\n     */\n    getVisible() {\n        this._assertInitialized();\n        return this.marker.getVisible();\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getZIndex\n     */\n    getZIndex() {\n        this._assertInitialized();\n        return this.marker.getZIndex() || null;\n    }\n    /** Gets the anchor point that can be used to attach other Google Maps objects. */\n    getAnchor() {\n        this._assertInitialized();\n        return this.marker;\n    }\n    /** Creates a combined options object using the passed-in options and the individual inputs. */\n    _combineOptions() {\n        const options = this._options || DEFAULT_MARKER_OPTIONS;\n        return {\n            ...options,\n            title: this._title || options.title,\n            position: this._position || options.position,\n            label: this._label || options.label,\n            clickable: this._clickable ?? options.clickable,\n            map: this._googleMap.googleMap,\n            icon: this._icon || options.icon,\n            visible: this._visible ?? options.visible,\n        };\n    }\n    _assertInitialized() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._googleMap.googleMap) {\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                    'Please wait for the API to load before trying to interact with it.');\n            }\n            if (!this.marker) {\n                throw Error('Cannot interact with a Google Map Marker before it has been ' +\n                    'initialized. Please wait for the Marker to load before trying to interact with it.');\n            }\n        }\n    }\n}\nMapMarker.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapMarker, deps: [{ token: GoogleMap }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nMapMarker.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MapMarker, selector: \"map-marker\", inputs: { title: \"title\", position: \"position\", label: \"label\", clickable: \"clickable\", options: \"options\", icon: \"icon\", visible: \"visible\" }, outputs: { animationChanged: \"animationChanged\", mapClick: \"mapClick\", clickableChanged: \"clickableChanged\", cursorChanged: \"cursorChanged\", mapDblclick: \"mapDblclick\", mapDrag: \"mapDrag\", mapDragend: \"mapDragend\", draggableChanged: \"draggableChanged\", mapDragstart: \"mapDragstart\", flatChanged: \"flatChanged\", iconChanged: \"iconChanged\", mapMousedown: \"mapMousedown\", mapMouseout: \"mapMouseout\", mapMouseover: \"mapMouseover\", mapMouseup: \"mapMouseup\", positionChanged: \"positionChanged\", mapRightclick: \"mapRightclick\", shapeChanged: \"shapeChanged\", titleChanged: \"titleChanged\", visibleChanged: \"visibleChanged\", zindexChanged: \"zindexChanged\" }, exportAs: [\"mapMarker\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapMarker, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'map-marker',\n                    exportAs: 'mapMarker',\n                }]\n        }], ctorParameters: function () { return [{ type: GoogleMap }, { type: i0.NgZone }]; }, propDecorators: { title: [{\n                type: Input\n            }], position: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], clickable: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], icon: [{\n                type: Input\n            }], visible: [{\n                type: Input\n            }], animationChanged: [{\n                type: Output\n            }], mapClick: [{\n                type: Output\n            }], clickableChanged: [{\n                type: Output\n            }], cursorChanged: [{\n                type: Output\n            }], mapDblclick: [{\n                type: Output\n            }], mapDrag: [{\n                type: Output\n            }], mapDragend: [{\n                type: Output\n            }], draggableChanged: [{\n                type: Output\n            }], mapDragstart: [{\n                type: Output\n            }], flatChanged: [{\n                type: Output\n            }], iconChanged: [{\n                type: Output\n            }], mapMousedown: [{\n                type: Output\n            }], mapMouseout: [{\n                type: Output\n            }], mapMouseover: [{\n                type: Output\n            }], mapMouseup: [{\n                type: Output\n            }], positionChanged: [{\n                type: Output\n            }], mapRightclick: [{\n                type: Output\n            }], shapeChanged: [{\n                type: Output\n            }], titleChanged: [{\n                type: Output\n            }], visibleChanged: [{\n                type: Output\n            }], zindexChanged: [{\n                type: Output\n            }] } });\n\n/// <reference types=\"google.maps\" />\n/** Default options for a clusterer. */\nconst DEFAULT_CLUSTERER_OPTIONS = {};\n/**\n * Angular component for implementing a Google Maps Marker Clusterer.\n *\n * See https://developers.google.com/maps/documentation/javascript/marker-clustering\n */\nclass MapMarkerClusterer {\n    constructor(_googleMap, _ngZone) {\n        this._googleMap = _googleMap;\n        this._ngZone = _ngZone;\n        this._currentMarkers = new Set();\n        this._eventManager = new MapEventManager(this._ngZone);\n        this._destroy = new Subject();\n        this.ariaLabelFn = () => '';\n        /**\n         * See\n         * googlemaps.github.io/v3-utility-library/modules/\n         * _google_markerclustererplus.html#clusteringbegin\n         */\n        this.clusteringbegin = this._eventManager.getLazyEmitter('clusteringbegin');\n        /**\n         * See\n         * googlemaps.github.io/v3-utility-library/modules/_google_markerclustererplus.html#clusteringend\n         */\n        this.clusteringend = this._eventManager.getLazyEmitter('clusteringend');\n        /** Emits when a cluster has been clicked. */\n        this.clusterClick = this._eventManager.getLazyEmitter('click');\n        this._canInitialize = this._googleMap._isBrowser;\n    }\n    set averageCenter(averageCenter) {\n        this._averageCenter = averageCenter;\n    }\n    set batchSizeIE(batchSizeIE) {\n        this._batchSizeIE = batchSizeIE;\n    }\n    set calculator(calculator) {\n        this._calculator = calculator;\n    }\n    set clusterClass(clusterClass) {\n        this._clusterClass = clusterClass;\n    }\n    set enableRetinaIcons(enableRetinaIcons) {\n        this._enableRetinaIcons = enableRetinaIcons;\n    }\n    set gridSize(gridSize) {\n        this._gridSize = gridSize;\n    }\n    set ignoreHidden(ignoreHidden) {\n        this._ignoreHidden = ignoreHidden;\n    }\n    set imageExtension(imageExtension) {\n        this._imageExtension = imageExtension;\n    }\n    set imagePath(imagePath) {\n        this._imagePath = imagePath;\n    }\n    set imageSizes(imageSizes) {\n        this._imageSizes = imageSizes;\n    }\n    set maxZoom(maxZoom) {\n        this._maxZoom = maxZoom;\n    }\n    set minimumClusterSize(minimumClusterSize) {\n        this._minimumClusterSize = minimumClusterSize;\n    }\n    set styles(styles) {\n        this._styles = styles;\n    }\n    set title(title) {\n        this._title = title;\n    }\n    set zIndex(zIndex) {\n        this._zIndex = zIndex;\n    }\n    set zoomOnClick(zoomOnClick) {\n        this._zoomOnClick = zoomOnClick;\n    }\n    set options(options) {\n        this._options = options;\n    }\n    ngOnInit() {\n        if (this._canInitialize) {\n            const clustererWindow = window;\n            if (!clustererWindow.MarkerClusterer && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('MarkerClusterer class not found, cannot construct a marker cluster. ' +\n                    'Please install the MarkerClustererPlus library: ' +\n                    'https://github.com/googlemaps/js-markerclustererplus');\n            }\n            // Create the object outside the zone so its events don't trigger change detection.\n            // We'll bring it back in inside the `MapEventManager` only for the events that the\n            // user has subscribed to.\n            this._ngZone.runOutsideAngular(() => {\n                this.markerClusterer = new MarkerClusterer(this._googleMap.googleMap, [], this._combineOptions());\n            });\n            this._assertInitialized();\n            this._eventManager.setTarget(this.markerClusterer);\n        }\n    }\n    ngAfterContentInit() {\n        if (this._canInitialize) {\n            this._watchForMarkerChanges();\n        }\n    }\n    ngOnChanges(changes) {\n        const { markerClusterer: clusterer, ariaLabelFn, _averageCenter, _batchSizeIE, _calculator, _styles, _clusterClass, _enableRetinaIcons, _gridSize, _ignoreHidden, _imageExtension, _imagePath, _imageSizes, _maxZoom, _minimumClusterSize, _title, _zIndex, _zoomOnClick, } = this;\n        if (clusterer) {\n            if (changes['options']) {\n                clusterer.setOptions(this._combineOptions());\n            }\n            if (changes['ariaLabelFn']) {\n                clusterer.ariaLabelFn = ariaLabelFn;\n            }\n            if (changes['averageCenter'] && _averageCenter !== undefined) {\n                clusterer.setAverageCenter(_averageCenter);\n            }\n            if (changes['batchSizeIE'] && _batchSizeIE !== undefined) {\n                clusterer.setBatchSizeIE(_batchSizeIE);\n            }\n            if (changes['calculator'] && !!_calculator) {\n                clusterer.setCalculator(_calculator);\n            }\n            if (changes['clusterClass'] && _clusterClass !== undefined) {\n                clusterer.setClusterClass(_clusterClass);\n            }\n            if (changes['enableRetinaIcons'] && _enableRetinaIcons !== undefined) {\n                clusterer.setEnableRetinaIcons(_enableRetinaIcons);\n            }\n            if (changes['gridSize'] && _gridSize !== undefined) {\n                clusterer.setGridSize(_gridSize);\n            }\n            if (changes['ignoreHidden'] && _ignoreHidden !== undefined) {\n                clusterer.setIgnoreHidden(_ignoreHidden);\n            }\n            if (changes['imageExtension'] && _imageExtension !== undefined) {\n                clusterer.setImageExtension(_imageExtension);\n            }\n            if (changes['imagePath'] && _imagePath !== undefined) {\n                clusterer.setImagePath(_imagePath);\n            }\n            if (changes['imageSizes'] && _imageSizes) {\n                clusterer.setImageSizes(_imageSizes);\n            }\n            if (changes['maxZoom'] && _maxZoom !== undefined) {\n                clusterer.setMaxZoom(_maxZoom);\n            }\n            if (changes['minimumClusterSize'] && _minimumClusterSize !== undefined) {\n                clusterer.setMinimumClusterSize(_minimumClusterSize);\n            }\n            if (changes['styles'] && _styles) {\n                clusterer.setStyles(_styles);\n            }\n            if (changes['title'] && _title !== undefined) {\n                clusterer.setTitle(_title);\n            }\n            if (changes['zIndex'] && _zIndex !== undefined) {\n                clusterer.setZIndex(_zIndex);\n            }\n            if (changes['zoomOnClick'] && _zoomOnClick !== undefined) {\n                clusterer.setZoomOnClick(_zoomOnClick);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this._eventManager.destroy();\n        if (this.markerClusterer) {\n            this.markerClusterer.setMap(null);\n        }\n    }\n    fitMapToMarkers(padding) {\n        this._assertInitialized();\n        this.markerClusterer.fitMapToMarkers(padding);\n    }\n    getAverageCenter() {\n        this._assertInitialized();\n        return this.markerClusterer.getAverageCenter();\n    }\n    getBatchSizeIE() {\n        this._assertInitialized();\n        return this.markerClusterer.getBatchSizeIE();\n    }\n    getCalculator() {\n        this._assertInitialized();\n        return this.markerClusterer.getCalculator();\n    }\n    getClusterClass() {\n        this._assertInitialized();\n        return this.markerClusterer.getClusterClass();\n    }\n    getClusters() {\n        this._assertInitialized();\n        return this.markerClusterer.getClusters();\n    }\n    getEnableRetinaIcons() {\n        this._assertInitialized();\n        return this.markerClusterer.getEnableRetinaIcons();\n    }\n    getGridSize() {\n        this._assertInitialized();\n        return this.markerClusterer.getGridSize();\n    }\n    getIgnoreHidden() {\n        this._assertInitialized();\n        return this.markerClusterer.getIgnoreHidden();\n    }\n    getImageExtension() {\n        this._assertInitialized();\n        return this.markerClusterer.getImageExtension();\n    }\n    getImagePath() {\n        this._assertInitialized();\n        return this.markerClusterer.getImagePath();\n    }\n    getImageSizes() {\n        this._assertInitialized();\n        return this.markerClusterer.getImageSizes();\n    }\n    getMaxZoom() {\n        this._assertInitialized();\n        return this.markerClusterer.getMaxZoom();\n    }\n    getMinimumClusterSize() {\n        this._assertInitialized();\n        return this.markerClusterer.getMinimumClusterSize();\n    }\n    getStyles() {\n        this._assertInitialized();\n        return this.markerClusterer.getStyles();\n    }\n    getTitle() {\n        this._assertInitialized();\n        return this.markerClusterer.getTitle();\n    }\n    getTotalClusters() {\n        this._assertInitialized();\n        return this.markerClusterer.getTotalClusters();\n    }\n    getTotalMarkers() {\n        this._assertInitialized();\n        return this.markerClusterer.getTotalMarkers();\n    }\n    getZIndex() {\n        this._assertInitialized();\n        return this.markerClusterer.getZIndex();\n    }\n    getZoomOnClick() {\n        this._assertInitialized();\n        return this.markerClusterer.getZoomOnClick();\n    }\n    _combineOptions() {\n        const options = this._options || DEFAULT_CLUSTERER_OPTIONS;\n        return {\n            ...options,\n            ariaLabelFn: this.ariaLabelFn ?? options.ariaLabelFn,\n            averageCenter: this._averageCenter ?? options.averageCenter,\n            batchSize: this.batchSize ?? options.batchSize,\n            batchSizeIE: this._batchSizeIE ?? options.batchSizeIE,\n            calculator: this._calculator ?? options.calculator,\n            clusterClass: this._clusterClass ?? options.clusterClass,\n            enableRetinaIcons: this._enableRetinaIcons ?? options.enableRetinaIcons,\n            gridSize: this._gridSize ?? options.gridSize,\n            ignoreHidden: this._ignoreHidden ?? options.ignoreHidden,\n            imageExtension: this._imageExtension ?? options.imageExtension,\n            imagePath: this._imagePath ?? options.imagePath,\n            imageSizes: this._imageSizes ?? options.imageSizes,\n            maxZoom: this._maxZoom ?? options.maxZoom,\n            minimumClusterSize: this._minimumClusterSize ?? options.minimumClusterSize,\n            styles: this._styles ?? options.styles,\n            title: this._title ?? options.title,\n            zIndex: this._zIndex ?? options.zIndex,\n            zoomOnClick: this._zoomOnClick ?? options.zoomOnClick,\n        };\n    }\n    _watchForMarkerChanges() {\n        this._assertInitialized();\n        const initialMarkers = [];\n        for (const marker of this._getInternalMarkers(this._markers.toArray())) {\n            this._currentMarkers.add(marker);\n            initialMarkers.push(marker);\n        }\n        this.markerClusterer.addMarkers(initialMarkers);\n        this._markers.changes\n            .pipe(takeUntil(this._destroy))\n            .subscribe((markerComponents) => {\n            this._assertInitialized();\n            const newMarkers = new Set(this._getInternalMarkers(markerComponents));\n            const markersToAdd = [];\n            const markersToRemove = [];\n            for (const marker of Array.from(newMarkers)) {\n                if (!this._currentMarkers.has(marker)) {\n                    this._currentMarkers.add(marker);\n                    markersToAdd.push(marker);\n                }\n            }\n            for (const marker of Array.from(this._currentMarkers)) {\n                if (!newMarkers.has(marker)) {\n                    markersToRemove.push(marker);\n                }\n            }\n            this.markerClusterer.addMarkers(markersToAdd, true);\n            this.markerClusterer.removeMarkers(markersToRemove, true);\n            this.markerClusterer.repaint();\n            for (const marker of markersToRemove) {\n                this._currentMarkers.delete(marker);\n            }\n        });\n    }\n    _getInternalMarkers(markers) {\n        return markers\n            .filter(markerComponent => !!markerComponent.marker)\n            .map(markerComponent => markerComponent.marker);\n    }\n    _assertInitialized() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._googleMap.googleMap) {\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                    'Please wait for the API to load before trying to interact with it.');\n            }\n            if (!this.markerClusterer) {\n                throw Error('Cannot interact with a MarkerClusterer before it has been initialized. ' +\n                    'Please wait for the MarkerClusterer to load before trying to interact with it.');\n            }\n        }\n    }\n}\nMapMarkerClusterer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapMarkerClusterer, deps: [{ token: GoogleMap }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nMapMarkerClusterer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MapMarkerClusterer, selector: \"map-marker-clusterer\", inputs: { ariaLabelFn: \"ariaLabelFn\", averageCenter: \"averageCenter\", batchSize: \"batchSize\", batchSizeIE: \"batchSizeIE\", calculator: \"calculator\", clusterClass: \"clusterClass\", enableRetinaIcons: \"enableRetinaIcons\", gridSize: \"gridSize\", ignoreHidden: \"ignoreHidden\", imageExtension: \"imageExtension\", imagePath: \"imagePath\", imageSizes: \"imageSizes\", maxZoom: \"maxZoom\", minimumClusterSize: \"minimumClusterSize\", styles: \"styles\", title: \"title\", zIndex: \"zIndex\", zoomOnClick: \"zoomOnClick\", options: \"options\" }, outputs: { clusteringbegin: \"clusteringbegin\", clusteringend: \"clusteringend\", clusterClick: \"clusterClick\" }, queries: [{ propertyName: \"_markers\", predicate: MapMarker, descendants: true }], exportAs: [\"mapMarkerClusterer\"], usesOnChanges: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapMarkerClusterer, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'map-marker-clusterer',\n                    exportAs: 'mapMarkerClusterer',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>',\n                    encapsulation: ViewEncapsulation.None,\n                }]\n        }], ctorParameters: function () { return [{ type: GoogleMap }, { type: i0.NgZone }]; }, propDecorators: { ariaLabelFn: [{\n                type: Input\n            }], averageCenter: [{\n                type: Input\n            }], batchSize: [{\n                type: Input\n            }], batchSizeIE: [{\n                type: Input\n            }], calculator: [{\n                type: Input\n            }], clusterClass: [{\n                type: Input\n            }], enableRetinaIcons: [{\n                type: Input\n            }], gridSize: [{\n                type: Input\n            }], ignoreHidden: [{\n                type: Input\n            }], imageExtension: [{\n                type: Input\n            }], imagePath: [{\n                type: Input\n            }], imageSizes: [{\n                type: Input\n            }], maxZoom: [{\n                type: Input\n            }], minimumClusterSize: [{\n                type: Input\n            }], styles: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], zIndex: [{\n                type: Input\n            }], zoomOnClick: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], clusteringbegin: [{\n                type: Output\n            }], clusteringend: [{\n                type: Output\n            }], clusterClick: [{\n                type: Output\n            }], _markers: [{\n                type: ContentChildren,\n                args: [MapMarker, { descendants: true }]\n            }] } });\n\n/// <reference types=\"google.maps\" />\n/**\n * Angular component that renders a Google Maps Polygon via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon\n */\nclass MapPolygon {\n    constructor(_map, _ngZone) {\n        this._map = _map;\n        this._ngZone = _ngZone;\n        this._eventManager = new MapEventManager(this._ngZone);\n        this._options = new BehaviorSubject({});\n        this._paths = new BehaviorSubject(undefined);\n        this._destroyed = new Subject();\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.click\n         */\n        this.polygonClick = this._eventManager.getLazyEmitter('click');\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dblclick\n         */\n        this.polygonDblclick = this._eventManager.getLazyEmitter('dblclick');\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.drag\n         */\n        this.polygonDrag = this._eventManager.getLazyEmitter('drag');\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dragend\n         */\n        this.polygonDragend = this._eventManager.getLazyEmitter('dragend');\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dragstart\n         */\n        this.polygonDragstart = this._eventManager.getLazyEmitter('dragstart');\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mousedown\n         */\n        this.polygonMousedown = this._eventManager.getLazyEmitter('mousedown');\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mousemove\n         */\n        this.polygonMousemove = this._eventManager.getLazyEmitter('mousemove');\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseout\n         */\n        this.polygonMouseout = this._eventManager.getLazyEmitter('mouseout');\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseover\n         */\n        this.polygonMouseover = this._eventManager.getLazyEmitter('mouseover');\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseup\n         */\n        this.polygonMouseup = this._eventManager.getLazyEmitter('mouseup');\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.rightclick\n         */\n        this.polygonRightclick = this._eventManager.getLazyEmitter('rightclick');\n    }\n    set options(options) {\n        this._options.next(options || {});\n    }\n    set paths(paths) {\n        this._paths.next(paths);\n    }\n    ngOnInit() {\n        if (this._map._isBrowser) {\n            this._combineOptions()\n                .pipe(take(1))\n                .subscribe(options => {\n                // Create the object outside the zone so its events don't trigger change detection.\n                // We'll bring it back in inside the `MapEventManager` only for the events that the\n                // user has subscribed to.\n                this._ngZone.runOutsideAngular(() => {\n                    this.polygon = new google.maps.Polygon(options);\n                });\n                this._assertInitialized();\n                this.polygon.setMap(this._map.googleMap);\n                this._eventManager.setTarget(this.polygon);\n            });\n            this._watchForOptionsChanges();\n            this._watchForPathChanges();\n        }\n    }\n    ngOnDestroy() {\n        this._eventManager.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n        if (this.polygon) {\n            this.polygon.setMap(null);\n        }\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getDraggable\n     */\n    getDraggable() {\n        this._assertInitialized();\n        return this.polygon.getDraggable();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getEditable\n     */\n    getEditable() {\n        this._assertInitialized();\n        return this.polygon.getEditable();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getPath\n     */\n    getPath() {\n        this._assertInitialized();\n        return this.polygon.getPath();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getPaths\n     */\n    getPaths() {\n        this._assertInitialized();\n        return this.polygon.getPaths();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getVisible\n     */\n    getVisible() {\n        this._assertInitialized();\n        return this.polygon.getVisible();\n    }\n    _combineOptions() {\n        return combineLatest([this._options, this._paths]).pipe(map(([options, paths]) => {\n            const combinedOptions = {\n                ...options,\n                paths: paths || options.paths,\n            };\n            return combinedOptions;\n        }));\n    }\n    _watchForOptionsChanges() {\n        this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n            this._assertInitialized();\n            this.polygon.setOptions(options);\n        });\n    }\n    _watchForPathChanges() {\n        this._paths.pipe(takeUntil(this._destroyed)).subscribe(paths => {\n            if (paths) {\n                this._assertInitialized();\n                this.polygon.setPaths(paths);\n            }\n        });\n    }\n    _assertInitialized() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._map.googleMap) {\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                    'Please wait for the API to load before trying to interact with it.');\n            }\n            if (!this.polygon) {\n                throw Error('Cannot interact with a Google Map Polygon before it has been ' +\n                    'initialized. Please wait for the Polygon to load before trying to interact with it.');\n            }\n        }\n    }\n}\nMapPolygon.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapPolygon, deps: [{ token: GoogleMap }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nMapPolygon.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MapPolygon, selector: \"map-polygon\", inputs: { options: \"options\", paths: \"paths\" }, outputs: { polygonClick: \"polygonClick\", polygonDblclick: \"polygonDblclick\", polygonDrag: \"polygonDrag\", polygonDragend: \"polygonDragend\", polygonDragstart: \"polygonDragstart\", polygonMousedown: \"polygonMousedown\", polygonMousemove: \"polygonMousemove\", polygonMouseout: \"polygonMouseout\", polygonMouseover: \"polygonMouseover\", polygonMouseup: \"polygonMouseup\", polygonRightclick: \"polygonRightclick\" }, exportAs: [\"mapPolygon\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapPolygon, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'map-polygon',\n                    exportAs: 'mapPolygon',\n                }]\n        }], ctorParameters: function () { return [{ type: GoogleMap }, { type: i0.NgZone }]; }, propDecorators: { options: [{\n                type: Input\n            }], paths: [{\n                type: Input\n            }], polygonClick: [{\n                type: Output\n            }], polygonDblclick: [{\n                type: Output\n            }], polygonDrag: [{\n                type: Output\n            }], polygonDragend: [{\n                type: Output\n            }], polygonDragstart: [{\n                type: Output\n            }], polygonMousedown: [{\n                type: Output\n            }], polygonMousemove: [{\n                type: Output\n            }], polygonMouseout: [{\n                type: Output\n            }], polygonMouseover: [{\n                type: Output\n            }], polygonMouseup: [{\n                type: Output\n            }], polygonRightclick: [{\n                type: Output\n            }] } });\n\n/// <reference types=\"google.maps\" />\n/**\n * Angular component that renders a Google Maps Polyline via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline\n */\nclass MapPolyline {\n    constructor(_map, _ngZone) {\n        this._map = _map;\n        this._ngZone = _ngZone;\n        this._eventManager = new MapEventManager(this._ngZone);\n        this._options = new BehaviorSubject({});\n        this._path = new BehaviorSubject(undefined);\n        this._destroyed = new Subject();\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.click\n         */\n        this.polylineClick = this._eventManager.getLazyEmitter('click');\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dblclick\n         */\n        this.polylineDblclick = this._eventManager.getLazyEmitter('dblclick');\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.drag\n         */\n        this.polylineDrag = this._eventManager.getLazyEmitter('drag');\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dragend\n         */\n        this.polylineDragend = this._eventManager.getLazyEmitter('dragend');\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dragstart\n         */\n        this.polylineDragstart = this._eventManager.getLazyEmitter('dragstart');\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mousedown\n         */\n        this.polylineMousedown = this._eventManager.getLazyEmitter('mousedown');\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mousemove\n         */\n        this.polylineMousemove = this._eventManager.getLazyEmitter('mousemove');\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseout\n         */\n        this.polylineMouseout = this._eventManager.getLazyEmitter('mouseout');\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseover\n         */\n        this.polylineMouseover = this._eventManager.getLazyEmitter('mouseover');\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseup\n         */\n        this.polylineMouseup = this._eventManager.getLazyEmitter('mouseup');\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.rightclick\n         */\n        this.polylineRightclick = this._eventManager.getLazyEmitter('rightclick');\n    }\n    set options(options) {\n        this._options.next(options || {});\n    }\n    set path(path) {\n        this._path.next(path);\n    }\n    ngOnInit() {\n        if (this._map._isBrowser) {\n            this._combineOptions()\n                .pipe(take(1))\n                .subscribe(options => {\n                // Create the object outside the zone so its events don't trigger change detection.\n                // We'll bring it back in inside the `MapEventManager` only for the events that the\n                // user has subscribed to.\n                this._ngZone.runOutsideAngular(() => (this.polyline = new google.maps.Polyline(options)));\n                this._assertInitialized();\n                this.polyline.setMap(this._map.googleMap);\n                this._eventManager.setTarget(this.polyline);\n            });\n            this._watchForOptionsChanges();\n            this._watchForPathChanges();\n        }\n    }\n    ngOnDestroy() {\n        this._eventManager.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n        if (this.polyline) {\n            this.polyline.setMap(null);\n        }\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getDraggable\n     */\n    getDraggable() {\n        this._assertInitialized();\n        return this.polyline.getDraggable();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getEditable\n     */\n    getEditable() {\n        this._assertInitialized();\n        return this.polyline.getEditable();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getPath\n     */\n    getPath() {\n        this._assertInitialized();\n        return this.polyline.getPath();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getVisible\n     */\n    getVisible() {\n        this._assertInitialized();\n        return this.polyline.getVisible();\n    }\n    _combineOptions() {\n        return combineLatest([this._options, this._path]).pipe(map(([options, path]) => {\n            const combinedOptions = {\n                ...options,\n                path: path || options.path,\n            };\n            return combinedOptions;\n        }));\n    }\n    _watchForOptionsChanges() {\n        this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n            this._assertInitialized();\n            this.polyline.setOptions(options);\n        });\n    }\n    _watchForPathChanges() {\n        this._path.pipe(takeUntil(this._destroyed)).subscribe(path => {\n            if (path) {\n                this._assertInitialized();\n                this.polyline.setPath(path);\n            }\n        });\n    }\n    _assertInitialized() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._map.googleMap) {\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                    'Please wait for the API to load before trying to interact with it.');\n            }\n            if (!this.polyline) {\n                throw Error('Cannot interact with a Google Map Polyline before it has been ' +\n                    'initialized. Please wait for the Polyline to load before trying to interact with it.');\n            }\n        }\n    }\n}\nMapPolyline.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapPolyline, deps: [{ token: GoogleMap }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nMapPolyline.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MapPolyline, selector: \"map-polyline\", inputs: { options: \"options\", path: \"path\" }, outputs: { polylineClick: \"polylineClick\", polylineDblclick: \"polylineDblclick\", polylineDrag: \"polylineDrag\", polylineDragend: \"polylineDragend\", polylineDragstart: \"polylineDragstart\", polylineMousedown: \"polylineMousedown\", polylineMousemove: \"polylineMousemove\", polylineMouseout: \"polylineMouseout\", polylineMouseover: \"polylineMouseover\", polylineMouseup: \"polylineMouseup\", polylineRightclick: \"polylineRightclick\" }, exportAs: [\"mapPolyline\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapPolyline, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'map-polyline',\n                    exportAs: 'mapPolyline',\n                }]\n        }], ctorParameters: function () { return [{ type: GoogleMap }, { type: i0.NgZone }]; }, propDecorators: { options: [{\n                type: Input\n            }], path: [{\n                type: Input\n            }], polylineClick: [{\n                type: Output\n            }], polylineDblclick: [{\n                type: Output\n            }], polylineDrag: [{\n                type: Output\n            }], polylineDragend: [{\n                type: Output\n            }], polylineDragstart: [{\n                type: Output\n            }], polylineMousedown: [{\n                type: Output\n            }], polylineMousemove: [{\n                type: Output\n            }], polylineMouseout: [{\n                type: Output\n            }], polylineMouseover: [{\n                type: Output\n            }], polylineMouseup: [{\n                type: Output\n            }], polylineRightclick: [{\n                type: Output\n            }] } });\n\n/// <reference types=\"google.maps\" />\n/**\n * Angular component that renders a Google Maps Rectangle via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle\n */\nclass MapRectangle {\n    constructor(_map, _ngZone) {\n        this._map = _map;\n        this._ngZone = _ngZone;\n        this._eventManager = new MapEventManager(this._ngZone);\n        this._options = new BehaviorSubject({});\n        this._bounds = new BehaviorSubject(undefined);\n        this._destroyed = new Subject();\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.boundsChanged\n         */ this.boundsChanged = this._eventManager.getLazyEmitter('bounds_changed');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.click\n         */\n        this.rectangleClick = this._eventManager.getLazyEmitter('click');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dblclick\n         */\n        this.rectangleDblclick = this._eventManager.getLazyEmitter('dblclick');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.drag\n         */\n        this.rectangleDrag = this._eventManager.getLazyEmitter('drag');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dragend\n         */\n        this.rectangleDragend = this._eventManager.getLazyEmitter('dragend');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dragstart\n         */\n        this.rectangleDragstart = this._eventManager.getLazyEmitter('dragstart');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mousedown\n         */\n        this.rectangleMousedown = this._eventManager.getLazyEmitter('mousedown');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mousemove\n         */\n        this.rectangleMousemove = this._eventManager.getLazyEmitter('mousemove');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseout\n         */\n        this.rectangleMouseout = this._eventManager.getLazyEmitter('mouseout');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseover\n         */\n        this.rectangleMouseover = this._eventManager.getLazyEmitter('mouseover');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseup\n         */\n        this.rectangleMouseup = this._eventManager.getLazyEmitter('mouseup');\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.rightclick\n         */\n        this.rectangleRightclick = this._eventManager.getLazyEmitter('rightclick');\n    }\n    set options(options) {\n        this._options.next(options || {});\n    }\n    set bounds(bounds) {\n        this._bounds.next(bounds);\n    }\n    ngOnInit() {\n        if (this._map._isBrowser) {\n            this._combineOptions()\n                .pipe(take(1))\n                .subscribe(options => {\n                // Create the object outside the zone so its events don't trigger change detection.\n                // We'll bring it back in inside the `MapEventManager` only for the events that the\n                // user has subscribed to.\n                this._ngZone.runOutsideAngular(() => {\n                    this.rectangle = new google.maps.Rectangle(options);\n                });\n                this._assertInitialized();\n                this.rectangle.setMap(this._map.googleMap);\n                this._eventManager.setTarget(this.rectangle);\n            });\n            this._watchForOptionsChanges();\n            this._watchForBoundsChanges();\n        }\n    }\n    ngOnDestroy() {\n        this._eventManager.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n        if (this.rectangle) {\n            this.rectangle.setMap(null);\n        }\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getBounds\n     */\n    getBounds() {\n        this._assertInitialized();\n        return this.rectangle.getBounds();\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getDraggable\n     */\n    getDraggable() {\n        this._assertInitialized();\n        return this.rectangle.getDraggable();\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getEditable\n     */\n    getEditable() {\n        this._assertInitialized();\n        return this.rectangle.getEditable();\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getVisible\n     */\n    getVisible() {\n        this._assertInitialized();\n        return this.rectangle.getVisible();\n    }\n    _combineOptions() {\n        return combineLatest([this._options, this._bounds]).pipe(map(([options, bounds]) => {\n            const combinedOptions = {\n                ...options,\n                bounds: bounds || options.bounds,\n            };\n            return combinedOptions;\n        }));\n    }\n    _watchForOptionsChanges() {\n        this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n            this._assertInitialized();\n            this.rectangle.setOptions(options);\n        });\n    }\n    _watchForBoundsChanges() {\n        this._bounds.pipe(takeUntil(this._destroyed)).subscribe(bounds => {\n            if (bounds) {\n                this._assertInitialized();\n                this.rectangle.setBounds(bounds);\n            }\n        });\n    }\n    _assertInitialized() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._map.googleMap) {\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                    'Please wait for the API to load before trying to interact with it.');\n            }\n            if (!this.rectangle) {\n                throw Error('Cannot interact with a Google Map Rectangle before it has been initialized. ' +\n                    'Please wait for the Rectangle to load before trying to interact with it.');\n            }\n        }\n    }\n}\nMapRectangle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapRectangle, deps: [{ token: GoogleMap }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nMapRectangle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MapRectangle, selector: \"map-rectangle\", inputs: { options: \"options\", bounds: \"bounds\" }, outputs: { boundsChanged: \"boundsChanged\", rectangleClick: \"rectangleClick\", rectangleDblclick: \"rectangleDblclick\", rectangleDrag: \"rectangleDrag\", rectangleDragend: \"rectangleDragend\", rectangleDragstart: \"rectangleDragstart\", rectangleMousedown: \"rectangleMousedown\", rectangleMousemove: \"rectangleMousemove\", rectangleMouseout: \"rectangleMouseout\", rectangleMouseover: \"rectangleMouseover\", rectangleMouseup: \"rectangleMouseup\", rectangleRightclick: \"rectangleRightclick\" }, exportAs: [\"mapRectangle\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapRectangle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'map-rectangle',\n                    exportAs: 'mapRectangle',\n                }]\n        }], ctorParameters: function () { return [{ type: GoogleMap }, { type: i0.NgZone }]; }, propDecorators: { options: [{\n                type: Input\n            }], bounds: [{\n                type: Input\n            }], boundsChanged: [{\n                type: Output\n            }], rectangleClick: [{\n                type: Output\n            }], rectangleDblclick: [{\n                type: Output\n            }], rectangleDrag: [{\n                type: Output\n            }], rectangleDragend: [{\n                type: Output\n            }], rectangleDragstart: [{\n                type: Output\n            }], rectangleMousedown: [{\n                type: Output\n            }], rectangleMousemove: [{\n                type: Output\n            }], rectangleMouseout: [{\n                type: Output\n            }], rectangleMouseover: [{\n                type: Output\n            }], rectangleMouseup: [{\n                type: Output\n            }], rectangleRightclick: [{\n                type: Output\n            }] } });\n\n/// <reference types=\"google.maps\" />\n/**\n * Angular component that renders a Google Maps Traffic Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/map#TrafficLayer\n */\nclass MapTrafficLayer {\n    constructor(_map, _ngZone) {\n        this._map = _map;\n        this._ngZone = _ngZone;\n        this._autoRefresh = new BehaviorSubject(true);\n        this._destroyed = new Subject();\n    }\n    /**\n     * Whether the traffic layer refreshes with updated information automatically.\n     */\n    set autoRefresh(autoRefresh) {\n        this._autoRefresh.next(autoRefresh);\n    }\n    ngOnInit() {\n        if (this._map._isBrowser) {\n            this._combineOptions()\n                .pipe(take(1))\n                .subscribe(options => {\n                // Create the object outside the zone so its events don't trigger change detection.\n                this._ngZone.runOutsideAngular(() => {\n                    this.trafficLayer = new google.maps.TrafficLayer(options);\n                });\n                this._assertInitialized();\n                this.trafficLayer.setMap(this._map.googleMap);\n            });\n            this._watchForAutoRefreshChanges();\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        if (this.trafficLayer) {\n            this.trafficLayer.setMap(null);\n        }\n    }\n    _combineOptions() {\n        return this._autoRefresh.pipe(map(autoRefresh => {\n            const combinedOptions = { autoRefresh };\n            return combinedOptions;\n        }));\n    }\n    _watchForAutoRefreshChanges() {\n        this._combineOptions()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(options => {\n            this._assertInitialized();\n            this.trafficLayer.setOptions(options);\n        });\n    }\n    _assertInitialized() {\n        if (!this._map.googleMap) {\n            throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                'Please wait for the API to load before trying to interact with it.');\n        }\n        if (!this.trafficLayer) {\n            throw Error('Cannot interact with a Google Map Traffic Layer before it has been initialized. ' +\n                'Please wait for the Traffic Layer to load before trying to interact with it.');\n        }\n    }\n}\nMapTrafficLayer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapTrafficLayer, deps: [{ token: GoogleMap }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nMapTrafficLayer.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MapTrafficLayer, selector: \"map-traffic-layer\", inputs: { autoRefresh: \"autoRefresh\" }, exportAs: [\"mapTrafficLayer\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapTrafficLayer, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'map-traffic-layer',\n                    exportAs: 'mapTrafficLayer',\n                }]\n        }], ctorParameters: function () { return [{ type: GoogleMap }, { type: i0.NgZone }]; }, propDecorators: { autoRefresh: [{\n                type: Input\n            }] } });\n\n/// <reference types=\"google.maps\" />\n/**\n * Angular component that renders a Google Maps Transit Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/map#TransitLayer\n */\nclass MapTransitLayer extends MapBaseLayer {\n    _initializeObject() {\n        this.transitLayer = new google.maps.TransitLayer();\n    }\n    _setMap() {\n        this._assertLayerInitialized();\n        this.transitLayer.setMap(this._map.googleMap);\n    }\n    _unsetMap() {\n        if (this.transitLayer) {\n            this.transitLayer.setMap(null);\n        }\n    }\n    _assertLayerInitialized() {\n        if (!this.transitLayer) {\n            throw Error('Cannot interact with a Google Map Transit Layer before it has been initialized. ' +\n                'Please wait for the Transit Layer to load before trying to interact with it.');\n        }\n    }\n}\nMapTransitLayer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapTransitLayer, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMapTransitLayer.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MapTransitLayer, selector: \"map-transit-layer\", exportAs: [\"mapTransitLayer\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapTransitLayer, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'map-transit-layer',\n                    exportAs: 'mapTransitLayer',\n                }]\n        }] });\n\n/// <reference types=\"google.maps\" />\n/**\n * Angular directive that renders a Google Maps heatmap via the Google Maps JavaScript API.\n *\n * See: https://developers.google.com/maps/documentation/javascript/reference/visualization\n */\nclass MapHeatmapLayer {\n    constructor(_googleMap, _ngZone) {\n        this._googleMap = _googleMap;\n        this._ngZone = _ngZone;\n    }\n    /**\n     * Data shown on the heatmap.\n     * See: https://developers.google.com/maps/documentation/javascript/reference/visualization\n     */\n    set data(data) {\n        this._data = data;\n    }\n    /**\n     * Options used to configure the heatmap. See:\n     * developers.google.com/maps/documentation/javascript/reference/visualization#HeatmapLayerOptions\n     */\n    set options(options) {\n        this._options = options;\n    }\n    ngOnInit() {\n        if (this._googleMap._isBrowser) {\n            if (!window.google?.maps?.visualization && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Namespace `google.maps.visualization` not found, cannot construct heatmap. ' +\n                    'Please install the Google Maps JavaScript API with the \"visualization\" library: ' +\n                    'https://developers.google.com/maps/documentation/javascript/visualization');\n            }\n            // Create the object outside the zone so its events don't trigger change detection.\n            // We'll bring it back in inside the `MapEventManager` only for the events that the\n            // user has subscribed to.\n            this._ngZone.runOutsideAngular(() => {\n                this.heatmap = new google.maps.visualization.HeatmapLayer(this._combineOptions());\n            });\n            this._assertInitialized();\n            this.heatmap.setMap(this._googleMap.googleMap);\n        }\n    }\n    ngOnChanges(changes) {\n        const { _data, heatmap } = this;\n        if (heatmap) {\n            if (changes['options']) {\n                heatmap.setOptions(this._combineOptions());\n            }\n            if (changes['data'] && _data !== undefined) {\n                heatmap.setData(this._normalizeData(_data));\n            }\n        }\n    }\n    ngOnDestroy() {\n        if (this.heatmap) {\n            this.heatmap.setMap(null);\n        }\n    }\n    /**\n     * Gets the data that is currently shown on the heatmap.\n     * See: developers.google.com/maps/documentation/javascript/reference/visualization#HeatmapLayer\n     */\n    getData() {\n        this._assertInitialized();\n        return this.heatmap.getData();\n    }\n    /** Creates a combined options object using the passed-in options and the individual inputs. */\n    _combineOptions() {\n        const options = this._options || {};\n        return {\n            ...options,\n            data: this._normalizeData(this._data || options.data || []),\n            map: this._googleMap.googleMap,\n        };\n    }\n    /**\n     * Most Google Maps APIs support both `LatLng` objects and `LatLngLiteral`. The latter is more\n     * convenient to write out, because the Google Maps API doesn't have to have been loaded in order\n     * to construct them. The `HeatmapLayer` appears to be an exception that only allows a `LatLng`\n     * object, or it throws a runtime error. Since it's more convenient and we expect that Angular\n     * users will load the API asynchronously, we allow them to pass in a `LatLngLiteral` and we\n     * convert it to a `LatLng` object before passing it off to Google Maps.\n     */\n    _normalizeData(data) {\n        const result = [];\n        data.forEach(item => {\n            result.push(isLatLngLiteral(item) ? new google.maps.LatLng(item.lat, item.lng) : item);\n        });\n        return result;\n    }\n    /** Asserts that the heatmap object has been initialized. */\n    _assertInitialized() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._googleMap.googleMap) {\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                    'Please wait for the API to load before trying to interact with it.');\n            }\n            if (!this.heatmap) {\n                throw Error('Cannot interact with a Google Map HeatmapLayer before it has been ' +\n                    'initialized. Please wait for the heatmap to load before trying to interact with it.');\n            }\n        }\n    }\n}\nMapHeatmapLayer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapHeatmapLayer, deps: [{ token: GoogleMap }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nMapHeatmapLayer.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MapHeatmapLayer, selector: \"map-heatmap-layer\", inputs: { data: \"data\", options: \"options\" }, exportAs: [\"mapHeatmapLayer\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapHeatmapLayer, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'map-heatmap-layer',\n                    exportAs: 'mapHeatmapLayer',\n                }]\n        }], ctorParameters: function () { return [{ type: GoogleMap }, { type: i0.NgZone }]; }, propDecorators: { data: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }] } });\n/** Asserts that an object is a `LatLngLiteral`. */\nfunction isLatLngLiteral(value) {\n    return value && typeof value.lat === 'number' && typeof value.lng === 'number';\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst COMPONENTS = [\n    GoogleMap,\n    MapBaseLayer,\n    MapBicyclingLayer,\n    MapCircle,\n    MapDirectionsRenderer,\n    MapGroundOverlay,\n    MapInfoWindow,\n    MapKmlLayer,\n    MapMarker,\n    MapMarkerClusterer,\n    MapPolygon,\n    MapPolyline,\n    MapRectangle,\n    MapTrafficLayer,\n    MapTransitLayer,\n    MapHeatmapLayer,\n];\nclass GoogleMapsModule {\n}\nGoogleMapsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: GoogleMapsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nGoogleMapsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: GoogleMapsModule, declarations: [GoogleMap,\n        MapBaseLayer,\n        MapBicyclingLayer,\n        MapCircle,\n        MapDirectionsRenderer,\n        MapGroundOverlay,\n        MapInfoWindow,\n        MapKmlLayer,\n        MapMarker,\n        MapMarkerClusterer,\n        MapPolygon,\n        MapPolyline,\n        MapRectangle,\n        MapTrafficLayer,\n        MapTransitLayer,\n        MapHeatmapLayer], exports: [GoogleMap,\n        MapBaseLayer,\n        MapBicyclingLayer,\n        MapCircle,\n        MapDirectionsRenderer,\n        MapGroundOverlay,\n        MapInfoWindow,\n        MapKmlLayer,\n        MapMarker,\n        MapMarkerClusterer,\n        MapPolygon,\n        MapPolyline,\n        MapRectangle,\n        MapTrafficLayer,\n        MapTransitLayer,\n        MapHeatmapLayer] });\nGoogleMapsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: GoogleMapsModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: GoogleMapsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: COMPONENTS,\n                    exports: COMPONENTS,\n                }]\n        }] });\n\n/// <reference types=\"google.maps\" />\n/**\n * Angular service that wraps the Google Maps DirectionsService from the Google Maps JavaScript\n * API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/directions#DirectionsService\n */\nclass MapDirectionsService {\n    constructor(_ngZone) {\n        this._ngZone = _ngZone;\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/directions\n     * #DirectionsService.route\n     */\n    route(request) {\n        return new Observable(observer => {\n            // Initialize the `DirectionsService` lazily since the Google Maps API may\n            // not have been loaded when the provider is instantiated.\n            if (!this._directionsService) {\n                this._directionsService = new google.maps.DirectionsService();\n            }\n            this._directionsService.route(request, (result, status) => {\n                this._ngZone.run(() => {\n                    observer.next({ result: result || undefined, status });\n                    observer.complete();\n                });\n            });\n        });\n    }\n}\nMapDirectionsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapDirectionsService, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nMapDirectionsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapDirectionsService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapDirectionsService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });\n\n/// <reference types=\"google.maps\" />\n/**\n * Angular service that wraps the Google Maps Geocoder from the Google Maps JavaScript API.\n * See developers.google.com/maps/documentation/javascript/reference/geocoder#Geocoder\n */\nclass MapGeocoder {\n    constructor(_ngZone) {\n        this._ngZone = _ngZone;\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/geocoder#Geocoder.geocode\n     */\n    geocode(request) {\n        return new Observable(observer => {\n            // Initialize the `Geocoder` lazily since the Google Maps API may\n            // not have been loaded when the provider is instantiated.\n            if (!this._geocoder) {\n                this._geocoder = new google.maps.Geocoder();\n            }\n            this._geocoder.geocode(request, (results, status) => {\n                this._ngZone.run(() => {\n                    observer.next({ results: results || [], status });\n                    observer.complete();\n                });\n            });\n        });\n    }\n}\nMapGeocoder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapGeocoder, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nMapGeocoder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapGeocoder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MapGeocoder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { GoogleMap, GoogleMapsModule, MapBaseLayer, MapBicyclingLayer, MapCircle, MapDirectionsRenderer, MapDirectionsService, MapGeocoder, MapGroundOverlay, MapHeatmapLayer, MapInfoWindow, MapKmlLayer, MapMarker, MapMarkerClusterer, MapPolygon, MapPolyline, MapRectangle, MapTrafficLayer, MapTransitLayer };\n//# sourceMappingURL=google-maps.mjs.map\n"]},"metadata":{},"sourceType":"module"}