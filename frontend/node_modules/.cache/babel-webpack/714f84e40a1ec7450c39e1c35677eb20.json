{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ViewChild, NgModule, NO_ERRORS_SCHEMA, Type, Directive, ViewChildren } from '@angular/core';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from '@ngx-formly/core';\nimport { FieldWrapper, ɵdefineHiddenProp, FormlyModule, FieldType as FieldType$1, ɵobserve } from '@ngx-formly/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport * as i2 from '@angular/material/form-field';\nimport { MatFormField, MatFormFieldModule, MatFormFieldControl } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/a11y';\nimport { Subject } from 'rxjs';\n\nfunction FormlyWrapperFormField_mat_label_3_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 11);\n    i0.ɵɵtext(1, \"*\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction FormlyWrapperFormField_mat_label_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-label\");\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, FormlyWrapperFormField_mat_label_3_span_2_Template, 2, 0, \"span\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.props.label, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.props.required && ctx_r1.props.hideRequiredMarker !== true);\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    field: a0\n  };\n};\n\nfunction FormlyWrapperFormField_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 12);\n    i0.ɵɵelementContainer(1, 13);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.props.textPrefix)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c0, ctx_r2.field));\n  }\n}\n\nfunction FormlyWrapperFormField_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 14);\n    i0.ɵɵelementContainer(1, 13);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.props.prefix)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c0, ctx_r3.field));\n  }\n}\n\nfunction FormlyWrapperFormField_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 15);\n    i0.ɵɵelementContainer(1, 13);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.props.textSuffix)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c0, ctx_r4.field));\n  }\n}\n\nfunction FormlyWrapperFormField_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 16);\n    i0.ɵɵelementContainer(1, 13);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r5.props.suffix)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c0, ctx_r5.field));\n  }\n}\n\nconst _c1 = function (a0) {\n  return {\n    content: a0\n  };\n};\n\nfunction FormlyWrapperFormField_mat_hint_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-hint\");\n    i0.ɵɵelementContainer(1, 13);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const hint_r11 = ctx.ngIf;\n    i0.ɵɵnextContext();\n\n    const _r8 = i0.ɵɵreference(13);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r8)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c1, hint_r11));\n  }\n}\n\nfunction FormlyWrapperFormField_mat_hint_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-hint\", 17);\n    i0.ɵɵelementContainer(1, 13);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const hintEnd_r12 = ctx.ngIf;\n    i0.ɵɵnextContext();\n\n    const _r8 = i0.ɵɵreference(13);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r8)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c1, hintEnd_r12));\n  }\n}\n\nfunction FormlyWrapperFormField_ng_template_12_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const content_r13 = i0.ɵɵnextContext().content;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(content_r13);\n  }\n}\n\nfunction FormlyWrapperFormField_ng_template_12_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 13);\n  }\n\n  if (rf & 2) {\n    const content_r13 = i0.ɵɵnextContext().content;\n    const ctx_r16 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", content_r13)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c0, ctx_r16.field));\n  }\n}\n\nfunction FormlyWrapperFormField_ng_template_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, FormlyWrapperFormField_ng_template_12_ng_container_0_Template, 2, 1, \"ng-container\", 18);\n    i0.ɵɵtemplate(1, FormlyWrapperFormField_ng_template_12_ng_template_1_Template, 1, 4, \"ng-template\", null, 19, i0.ɵɵtemplateRefExtractor);\n  }\n\n  if (rf & 2) {\n    const content_r13 = ctx.content;\n\n    const _r15 = i0.ɵɵreference(2);\n\n    i0.ɵɵproperty(\"ngIf\", !content_r13.createEmbeddedView)(\"ngIfElse\", _r15);\n  }\n}\n\nconst _c2 = [\"matPrefix\"];\nconst _c3 = [\"matTextPrefix\"];\nconst _c4 = [\"matSuffix\"];\nconst _c5 = [\"matTextSuffix\"];\n\nclass FormlyWrapperFormField extends FieldWrapper {\n  constructor(renderer, elementRef, focusMonitor) {\n    super();\n    this.renderer = renderer;\n    this.elementRef = elementRef;\n    this.focusMonitor = focusMonitor;\n  }\n\n  ngOnInit() {\n    ɵdefineHiddenProp(this.field, '_formField', this.formField);\n    this.focusMonitor.monitor(this.elementRef, true).subscribe(origin => {\n      if (!origin && this.field.focus) {\n        this.field.focus = false;\n      }\n    });\n  }\n\n  ngAfterViewInit() {\n    // temporary fix for https://github.com/angular/material2/issues/7891\n    if (this.formField.appearance !== 'outline' && this.props.hideFieldUnderline === true) {\n      const underlineElement = this.formField._elementRef.nativeElement.querySelector('.mat-form-field-underline');\n\n      underlineElement && this.renderer.removeChild(underlineElement.parentNode, underlineElement);\n    }\n  }\n\n  ngOnDestroy() {\n    delete this.field._formField;\n    this.focusMonitor.stopMonitoring(this.elementRef);\n  }\n\n}\n\nFormlyWrapperFormField.ɵfac = function FormlyWrapperFormField_Factory(t) {\n  return new (t || FormlyWrapperFormField)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n};\n\nFormlyWrapperFormField.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: FormlyWrapperFormField,\n  selectors: [[\"formly-wrapper-mat-form-field\"]],\n  viewQuery: function FormlyWrapperFormField_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(MatFormField, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.formField = _t.first);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 14,\n  vars: 13,\n  consts: [[3, \"hideRequiredMarker\", \"floatLabel\", \"appearance\", \"subscriptSizing\", \"color\"], [\"fieldComponent\", \"\"], [4, \"ngIf\"], [\"matTextPrefix\", \"\", 4, \"ngIf\"], [\"matPrefix\", \"\", 4, \"ngIf\"], [\"matTextSuffix\", \"\", 4, \"ngIf\"], [\"matSuffix\", \"\", 4, \"ngIf\"], [3, \"field\"], [\"align\", \"end\", 4, \"ngIf\"], [\"stringOrTemplate\", \"\"], [\"aria-hidden\", \"true\", \"class\", \"mat-form-field-required-marker\", 4, \"ngIf\"], [\"aria-hidden\", \"true\", 1, \"mat-form-field-required-marker\"], [\"matTextPrefix\", \"\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"matPrefix\", \"\"], [\"matTextSuffix\", \"\"], [\"matSuffix\", \"\"], [\"align\", \"end\"], [4, \"ngIf\", \"ngIfElse\"], [\"template\", \"\"]],\n  template: function FormlyWrapperFormField_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-form-field\", 0);\n      i0.ɵɵelementContainer(1, null, 1);\n      i0.ɵɵtemplate(3, FormlyWrapperFormField_mat_label_3_Template, 3, 2, \"mat-label\", 2);\n      i0.ɵɵtemplate(4, FormlyWrapperFormField_ng_container_4_Template, 2, 4, \"ng-container\", 3);\n      i0.ɵɵtemplate(5, FormlyWrapperFormField_ng_container_5_Template, 2, 4, \"ng-container\", 4);\n      i0.ɵɵtemplate(6, FormlyWrapperFormField_ng_container_6_Template, 2, 4, \"ng-container\", 5);\n      i0.ɵɵtemplate(7, FormlyWrapperFormField_ng_container_7_Template, 2, 4, \"ng-container\", 6);\n      i0.ɵɵelementStart(8, \"mat-error\");\n      i0.ɵɵelement(9, \"formly-validation-message\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(10, FormlyWrapperFormField_mat_hint_10_Template, 2, 4, \"mat-hint\", 2);\n      i0.ɵɵtemplate(11, FormlyWrapperFormField_mat_hint_11_Template, 2, 4, \"mat-hint\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(12, FormlyWrapperFormField_ng_template_12_Template, 3, 2, \"ng-template\", null, 9, i0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      let tmp_4_0;\n      i0.ɵɵproperty(\"hideRequiredMarker\", true)(\"floatLabel\", ctx.props.floatLabel)(\"appearance\", ctx.props.appearance)(\"subscriptSizing\", ctx.props.subscriptSizing)(\"color\", (tmp_4_0 = ctx.props.color) !== null && tmp_4_0 !== undefined ? tmp_4_0 : \"primary\");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.props.label && ctx.props.hideLabel !== true);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.props.textPrefix);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.props.prefix);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.props.textSuffix);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.props.suffix);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"field\", ctx.field);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.props.description || ctx.props.hintStart);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.props.hintEnd);\n    }\n  },\n  directives: [i2.MatFormField, i4.NgIf, i2.MatError, i3.ɵFormlyValidationMessage, i2.MatLabel, i4.NgTemplateOutlet, i2.MatPrefix, i2.MatSuffix, i2.MatHint],\n  styles: [\"formly-wrapper-mat-form-field .mat-mdc-form-field,formly-wrapper-mat-form-field .mat-form-field{width:100%}\\n\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyWrapperFormField, [{\n    type: Component,\n    args: [{\n      selector: 'formly-wrapper-mat-form-field',\n      template: `\n    <!-- fix https://github.com/angular/material2/pull/7083 by setting width to 100% -->\n    <mat-form-field\n      [hideRequiredMarker]=\"true\"\n      [floatLabel]=\"props.floatLabel\"\n      [appearance]=\"props.appearance\"\n      [subscriptSizing]=\"props.subscriptSizing\"\n      [color]=\"props.color ?? 'primary'\"\n    >\n      <ng-container #fieldComponent></ng-container>\n      <mat-label *ngIf=\"props.label && props.hideLabel !== true\">\n        {{ props.label }}\n        <span\n          *ngIf=\"props.required && props.hideRequiredMarker !== true\"\n          aria-hidden=\"true\"\n          class=\"mat-form-field-required-marker\"\n          >*</span\n        >\n      </mat-label>\n\n      <ng-container matTextPrefix *ngIf=\"props.textPrefix\">\n        <ng-container [ngTemplateOutlet]=\"props.textPrefix\" [ngTemplateOutletContext]=\"{ field: field }\"></ng-container>\n      </ng-container>\n\n      <ng-container matPrefix *ngIf=\"props.prefix\">\n        <ng-container [ngTemplateOutlet]=\"props.prefix\" [ngTemplateOutletContext]=\"{ field: field }\"></ng-container>\n      </ng-container>\n\n      <ng-container matTextSuffix *ngIf=\"props.textSuffix\">\n        <ng-container [ngTemplateOutlet]=\"props.textSuffix\" [ngTemplateOutletContext]=\"{ field: field }\"></ng-container>\n      </ng-container>\n\n      <ng-container matSuffix *ngIf=\"props.suffix\">\n        <ng-container [ngTemplateOutlet]=\"props.suffix\" [ngTemplateOutletContext]=\"{ field: field }\"></ng-container>\n      </ng-container>\n\n      <mat-error>\n        <formly-validation-message [field]=\"field\"></formly-validation-message>\n      </mat-error>\n\n      <mat-hint *ngIf=\"props.description || props.hintStart as hint\">\n        <ng-container [ngTemplateOutlet]=\"stringOrTemplate\" [ngTemplateOutletContext]=\"{ content: hint }\">\n        </ng-container>\n      </mat-hint>\n\n      <mat-hint *ngIf=\"props.hintEnd as hintEnd\" align=\"end\">\n        <ng-container [ngTemplateOutlet]=\"stringOrTemplate\" [ngTemplateOutletContext]=\"{ content: hintEnd }\">\n        </ng-container>\n      </mat-hint>\n    </mat-form-field>\n\n    <ng-template #stringOrTemplate let-content=\"content\">\n      <ng-container *ngIf=\"!content.createEmbeddedView; else template\">{{ content }}</ng-container>\n      <ng-template #template>\n        <ng-container [ngTemplateOutlet]=\"content\" [ngTemplateOutletContext]=\"{ field: field }\"></ng-container>\n      </ng-template>\n    </ng-template>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\"formly-wrapper-mat-form-field .mat-mdc-form-field,formly-wrapper-mat-form-field .mat-form-field{width:100%}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i1.FocusMonitor\n    }];\n  }, {\n    formField: [{\n      type: ViewChild,\n      args: [MatFormField, {\n        static: true\n      }]\n    }]\n  });\n})();\n\nclass FormlyMatFormFieldModule {}\n\nFormlyMatFormFieldModule.ɵfac = function FormlyMatFormFieldModule_Factory(t) {\n  return new (t || FormlyMatFormFieldModule)();\n};\n\nFormlyMatFormFieldModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: FormlyMatFormFieldModule\n});\nFormlyMatFormFieldModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, ReactiveFormsModule, MatFormFieldModule, FormlyModule.forChild({\n    wrappers: [{\n      name: 'form-field',\n      component: FormlyWrapperFormField\n    }]\n  })]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyMatFormFieldModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [FormlyWrapperFormField],\n      imports: [CommonModule, ReactiveFormsModule, MatFormFieldModule, FormlyModule.forChild({\n        wrappers: [{\n          name: 'form-field',\n          component: FormlyWrapperFormField\n        }]\n      })],\n      schemas: [NO_ERRORS_SCHEMA]\n    }]\n  }], null, null);\n})();\n\nclass FieldType extends FieldType$1 {\n  constructor() {\n    super(...arguments);\n    this.errorStateMatcher = {\n      isErrorState: () => this.field && this.showError\n    };\n    this.stateChanges = new Subject();\n    this._errorState = false;\n  }\n\n  set matPrefix(prefix) {\n    if (prefix) {\n      this.props.prefix = prefix;\n    }\n  }\n\n  set matTextPrefix(textPrefix) {\n    if (textPrefix) {\n      this.props.textPrefix = textPrefix;\n    }\n  }\n\n  set matSuffix(suffix) {\n    if (suffix) {\n      this.props.suffix = suffix;\n    }\n  }\n\n  set matTextSuffix(textSuffix) {\n    if (textSuffix) {\n      this.props.textSuffix = textSuffix;\n    }\n  }\n\n  set _controls(controls) {\n    this.attachControl(controls.length === 1 ? controls.first : this);\n  }\n\n  ngOnDestroy() {\n    delete this.formField?._control;\n    this.stateChanges.complete();\n  }\n\n  setDescribedByIds(_ids) {}\n\n  onContainerClick(_event) {\n    this.field.focus = true;\n    this.stateChanges.next();\n  }\n\n  get errorState() {\n    const showError = this.options.showError(this);\n\n    if (showError !== this._errorState) {\n      this._errorState = showError;\n      this.stateChanges.next();\n    }\n\n    return showError;\n  }\n\n  get controlType() {\n    if (this.props.type) {\n      return this.props.type;\n    }\n\n    const type = this.field.type;\n    return type instanceof Type ? type.prototype.constructor.name : type;\n  }\n\n  get focused() {\n    return !!this.field.focus && !this.disabled;\n  }\n\n  get disabled() {\n    return !!this.props.disabled;\n  }\n\n  get required() {\n    return !!this.props.required;\n  }\n\n  get placeholder() {\n    return this.props.placeholder || '';\n  }\n\n  get shouldPlaceholderFloat() {\n    return this.shouldLabelFloat;\n  }\n\n  get value() {\n    return this.formControl?.value;\n  }\n\n  set value(value) {\n    this.formControl?.patchValue(value);\n  }\n\n  get ngControl() {\n    return this.formControl;\n  }\n\n  get empty() {\n    return this.value == null || this.value === '';\n  }\n\n  get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n\n  get formField() {\n    return this.field?.['_formField'];\n  }\n\n  attachControl(control) {\n    if (this.formField && control !== this.formField._control) {\n      this.formField._control = control; // temporary fix for https://github.com/angular/material2/issues/6728\n\n      const ngControl = control?.ngControl;\n\n      if (ngControl?.valueAccessor?.hasOwnProperty('_formField')) {\n        ngControl.valueAccessor['_formField'] = this.formField;\n      }\n\n      if (ngControl?.valueAccessor?.hasOwnProperty('_parentFormField')) {\n        ngControl.valueAccessor['_parentFormField'] = this.formField;\n      }\n\n      ['prefix', 'suffix', 'textPrefix', 'textSuffix'].forEach(type => ɵobserve(this.field, ['props', type], ({\n        currentValue\n      }) => currentValue && Promise.resolve().then(() => {\n        this.options.detectChanges(this.field);\n      }))); // https://github.com/angular/components/issues/16209\n\n      const setDescribedByIds = control.setDescribedByIds.bind(control);\n\n      control.setDescribedByIds = ids => {\n        setTimeout(() => setDescribedByIds(ids));\n      };\n    }\n  }\n\n}\n\nFieldType.ɵfac = /* @__PURE__ */function () {\n  let ɵFieldType_BaseFactory;\n  return function FieldType_Factory(t) {\n    return (ɵFieldType_BaseFactory || (ɵFieldType_BaseFactory = i0.ɵɵgetInheritedFactory(FieldType)))(t || FieldType);\n  };\n}();\n\nFieldType.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: FieldType,\n  viewQuery: function FieldType_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c2, 5);\n      i0.ɵɵviewQuery(_c3, 5);\n      i0.ɵɵviewQuery(_c4, 5);\n      i0.ɵɵviewQuery(_c5, 5);\n      i0.ɵɵviewQuery(MatFormFieldControl, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matPrefix = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matTextPrefix = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matSuffix = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matTextSuffix = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._controls = _t);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FieldType, [{\n    type: Directive\n  }], null, {\n    matPrefix: [{\n      type: ViewChild,\n      args: ['matPrefix']\n    }],\n    matTextPrefix: [{\n      type: ViewChild,\n      args: ['matTextPrefix']\n    }],\n    matSuffix: [{\n      type: ViewChild,\n      args: ['matSuffix']\n    }],\n    matTextSuffix: [{\n      type: ViewChild,\n      args: ['matTextSuffix']\n    }],\n    _controls: [{\n      type: ViewChildren,\n      args: [MatFormFieldControl]\n    }]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FieldType, FormlyMatFormFieldModule }; //# sourceMappingURL=ngx-formly-material-form-field.mjs.map","map":{"version":3,"sources":["/home/juancamilo/Documentos/Developer/Api WEB/Projecto JYW/JYW/frontend/jyw/node_modules/@ngx-formly/material/fesm2020/ngx-formly-material-form-field.mjs"],"names":["i0","Component","ViewEncapsulation","ViewChild","NgModule","NO_ERRORS_SCHEMA","Type","Directive","ViewChildren","i4","CommonModule","i3","FieldWrapper","ɵdefineHiddenProp","FormlyModule","FieldType","FieldType$1","ɵobserve","ReactiveFormsModule","i2","MatFormField","MatFormFieldModule","MatFormFieldControl","i1","Subject","FormlyWrapperFormField","constructor","renderer","elementRef","focusMonitor","ngOnInit","field","formField","monitor","subscribe","origin","focus","ngAfterViewInit","appearance","props","hideFieldUnderline","underlineElement","_elementRef","nativeElement","querySelector","removeChild","parentNode","ngOnDestroy","_formField","stopMonitoring","ɵfac","Renderer2","ElementRef","FocusMonitor","ɵcmp","NgIf","MatError","ɵFormlyValidationMessage","MatLabel","NgTemplateOutlet","MatPrefix","MatSuffix","MatHint","type","args","selector","template","encapsulation","None","styles","static","FormlyMatFormFieldModule","ɵmod","ɵinj","forChild","wrappers","name","component","declarations","imports","schemas","arguments","errorStateMatcher","isErrorState","showError","stateChanges","_errorState","matPrefix","prefix","matTextPrefix","textPrefix","matSuffix","suffix","matTextSuffix","textSuffix","_controls","controls","attachControl","length","first","_control","complete","setDescribedByIds","_ids","onContainerClick","_event","next","errorState","options","controlType","prototype","focused","disabled","required","placeholder","shouldPlaceholderFloat","shouldLabelFloat","value","formControl","patchValue","ngControl","empty","control","valueAccessor","hasOwnProperty","forEach","currentValue","Promise","resolve","then","detectChanges","bind","ids","setTimeout","ɵdir"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ViewChild, NgModule, NO_ERRORS_SCHEMA, Type, Directive, ViewChildren } from '@angular/core';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from '@ngx-formly/core';\nimport { FieldWrapper, ɵdefineHiddenProp, FormlyModule, FieldType as FieldType$1, ɵobserve } from '@ngx-formly/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport * as i2 from '@angular/material/form-field';\nimport { MatFormField, MatFormFieldModule, MatFormFieldControl } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/a11y';\nimport { Subject } from 'rxjs';\n\nclass FormlyWrapperFormField extends FieldWrapper {\n    constructor(renderer, elementRef, focusMonitor) {\n        super();\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.focusMonitor = focusMonitor;\n    }\n    ngOnInit() {\n        ɵdefineHiddenProp(this.field, '_formField', this.formField);\n        this.focusMonitor.monitor(this.elementRef, true).subscribe((origin) => {\n            if (!origin && this.field.focus) {\n                this.field.focus = false;\n            }\n        });\n    }\n    ngAfterViewInit() {\n        // temporary fix for https://github.com/angular/material2/issues/7891\n        if (this.formField.appearance !== 'outline' && this.props.hideFieldUnderline === true) {\n            const underlineElement = this.formField._elementRef.nativeElement.querySelector('.mat-form-field-underline');\n            underlineElement && this.renderer.removeChild(underlineElement.parentNode, underlineElement);\n        }\n    }\n    ngOnDestroy() {\n        delete this.field._formField;\n        this.focusMonitor.stopMonitoring(this.elementRef);\n    }\n}\nFormlyWrapperFormField.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyWrapperFormField, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });\nFormlyWrapperFormField.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyWrapperFormField, selector: \"formly-wrapper-mat-form-field\", viewQueries: [{ propertyName: \"formField\", first: true, predicate: MatFormField, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: `\n    <!-- fix https://github.com/angular/material2/pull/7083 by setting width to 100% -->\n    <mat-form-field\n      [hideRequiredMarker]=\"true\"\n      [floatLabel]=\"props.floatLabel\"\n      [appearance]=\"props.appearance\"\n      [subscriptSizing]=\"props.subscriptSizing\"\n      [color]=\"props.color ?? 'primary'\"\n    >\n      <ng-container #fieldComponent></ng-container>\n      <mat-label *ngIf=\"props.label && props.hideLabel !== true\">\n        {{ props.label }}\n        <span\n          *ngIf=\"props.required && props.hideRequiredMarker !== true\"\n          aria-hidden=\"true\"\n          class=\"mat-form-field-required-marker\"\n          >*</span\n        >\n      </mat-label>\n\n      <ng-container matTextPrefix *ngIf=\"props.textPrefix\">\n        <ng-container [ngTemplateOutlet]=\"props.textPrefix\" [ngTemplateOutletContext]=\"{ field: field }\"></ng-container>\n      </ng-container>\n\n      <ng-container matPrefix *ngIf=\"props.prefix\">\n        <ng-container [ngTemplateOutlet]=\"props.prefix\" [ngTemplateOutletContext]=\"{ field: field }\"></ng-container>\n      </ng-container>\n\n      <ng-container matTextSuffix *ngIf=\"props.textSuffix\">\n        <ng-container [ngTemplateOutlet]=\"props.textSuffix\" [ngTemplateOutletContext]=\"{ field: field }\"></ng-container>\n      </ng-container>\n\n      <ng-container matSuffix *ngIf=\"props.suffix\">\n        <ng-container [ngTemplateOutlet]=\"props.suffix\" [ngTemplateOutletContext]=\"{ field: field }\"></ng-container>\n      </ng-container>\n\n      <mat-error>\n        <formly-validation-message [field]=\"field\"></formly-validation-message>\n      </mat-error>\n\n      <mat-hint *ngIf=\"props.description || props.hintStart as hint\">\n        <ng-container [ngTemplateOutlet]=\"stringOrTemplate\" [ngTemplateOutletContext]=\"{ content: hint }\">\n        </ng-container>\n      </mat-hint>\n\n      <mat-hint *ngIf=\"props.hintEnd as hintEnd\" align=\"end\">\n        <ng-container [ngTemplateOutlet]=\"stringOrTemplate\" [ngTemplateOutletContext]=\"{ content: hintEnd }\">\n        </ng-container>\n      </mat-hint>\n    </mat-form-field>\n\n    <ng-template #stringOrTemplate let-content=\"content\">\n      <ng-container *ngIf=\"!content.createEmbeddedView; else template\">{{ content }}</ng-container>\n      <ng-template #template>\n        <ng-container [ngTemplateOutlet]=\"content\" [ngTemplateOutletContext]=\"{ field: field }\"></ng-container>\n      </ng-template>\n    </ng-template>\n  `, isInline: true, styles: [\"formly-wrapper-mat-form-field .mat-mdc-form-field,formly-wrapper-mat-form-field .mat-form-field{width:100%}\\n\"], components: [{ type: i2.MatFormField, selector: \"mat-form-field\", inputs: [\"color\", \"appearance\", \"hideRequiredMarker\", \"hintLabel\", \"floatLabel\"], exportAs: [\"matFormField\"] }, { type: i3.ɵFormlyValidationMessage, selector: \"formly-validation-message\", inputs: [\"field\"] }], directives: [{ type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.MatLabel, selector: \"mat-label\" }, { type: i4.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }, { type: i2.MatPrefix, selector: \"[matPrefix]\" }, { type: i2.MatSuffix, selector: \"[matSuffix]\" }, { type: i2.MatError, selector: \"mat-error\", inputs: [\"id\"] }, { type: i2.MatHint, selector: \"mat-hint\", inputs: [\"align\", \"id\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyWrapperFormField, decorators: [{\n            type: Component,\n            args: [{ selector: 'formly-wrapper-mat-form-field', template: `\n    <!-- fix https://github.com/angular/material2/pull/7083 by setting width to 100% -->\n    <mat-form-field\n      [hideRequiredMarker]=\"true\"\n      [floatLabel]=\"props.floatLabel\"\n      [appearance]=\"props.appearance\"\n      [subscriptSizing]=\"props.subscriptSizing\"\n      [color]=\"props.color ?? 'primary'\"\n    >\n      <ng-container #fieldComponent></ng-container>\n      <mat-label *ngIf=\"props.label && props.hideLabel !== true\">\n        {{ props.label }}\n        <span\n          *ngIf=\"props.required && props.hideRequiredMarker !== true\"\n          aria-hidden=\"true\"\n          class=\"mat-form-field-required-marker\"\n          >*</span\n        >\n      </mat-label>\n\n      <ng-container matTextPrefix *ngIf=\"props.textPrefix\">\n        <ng-container [ngTemplateOutlet]=\"props.textPrefix\" [ngTemplateOutletContext]=\"{ field: field }\"></ng-container>\n      </ng-container>\n\n      <ng-container matPrefix *ngIf=\"props.prefix\">\n        <ng-container [ngTemplateOutlet]=\"props.prefix\" [ngTemplateOutletContext]=\"{ field: field }\"></ng-container>\n      </ng-container>\n\n      <ng-container matTextSuffix *ngIf=\"props.textSuffix\">\n        <ng-container [ngTemplateOutlet]=\"props.textSuffix\" [ngTemplateOutletContext]=\"{ field: field }\"></ng-container>\n      </ng-container>\n\n      <ng-container matSuffix *ngIf=\"props.suffix\">\n        <ng-container [ngTemplateOutlet]=\"props.suffix\" [ngTemplateOutletContext]=\"{ field: field }\"></ng-container>\n      </ng-container>\n\n      <mat-error>\n        <formly-validation-message [field]=\"field\"></formly-validation-message>\n      </mat-error>\n\n      <mat-hint *ngIf=\"props.description || props.hintStart as hint\">\n        <ng-container [ngTemplateOutlet]=\"stringOrTemplate\" [ngTemplateOutletContext]=\"{ content: hint }\">\n        </ng-container>\n      </mat-hint>\n\n      <mat-hint *ngIf=\"props.hintEnd as hintEnd\" align=\"end\">\n        <ng-container [ngTemplateOutlet]=\"stringOrTemplate\" [ngTemplateOutletContext]=\"{ content: hintEnd }\">\n        </ng-container>\n      </mat-hint>\n    </mat-form-field>\n\n    <ng-template #stringOrTemplate let-content=\"content\">\n      <ng-container *ngIf=\"!content.createEmbeddedView; else template\">{{ content }}</ng-container>\n      <ng-template #template>\n        <ng-container [ngTemplateOutlet]=\"content\" [ngTemplateOutletContext]=\"{ field: field }\"></ng-container>\n      </ng-template>\n    </ng-template>\n  `, encapsulation: ViewEncapsulation.None, styles: [\"formly-wrapper-mat-form-field .mat-mdc-form-field,formly-wrapper-mat-form-field .mat-form-field{width:100%}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i1.FocusMonitor }]; }, propDecorators: { formField: [{\n                type: ViewChild,\n                args: [MatFormField, { static: true }]\n            }] } });\n\nclass FormlyMatFormFieldModule {\n}\nFormlyMatFormFieldModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatFormFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nFormlyMatFormFieldModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatFormFieldModule, declarations: [FormlyWrapperFormField], imports: [CommonModule,\n        ReactiveFormsModule,\n        MatFormFieldModule, i3.FormlyModule] });\nFormlyMatFormFieldModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatFormFieldModule, imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            MatFormFieldModule,\n            FormlyModule.forChild({\n                wrappers: [\n                    {\n                        name: 'form-field',\n                        component: FormlyWrapperFormField,\n                    },\n                ],\n            }),\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatFormFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [FormlyWrapperFormField],\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        MatFormFieldModule,\n                        FormlyModule.forChild({\n                            wrappers: [\n                                {\n                                    name: 'form-field',\n                                    component: FormlyWrapperFormField,\n                                },\n                            ],\n                        }),\n                    ],\n                    schemas: [NO_ERRORS_SCHEMA],\n                }]\n        }] });\n\nclass FieldType extends FieldType$1 {\n    constructor() {\n        super(...arguments);\n        this.errorStateMatcher = { isErrorState: () => this.field && this.showError };\n        this.stateChanges = new Subject();\n        this._errorState = false;\n    }\n    set matPrefix(prefix) {\n        if (prefix) {\n            this.props.prefix = prefix;\n        }\n    }\n    set matTextPrefix(textPrefix) {\n        if (textPrefix) {\n            this.props.textPrefix = textPrefix;\n        }\n    }\n    set matSuffix(suffix) {\n        if (suffix) {\n            this.props.suffix = suffix;\n        }\n    }\n    set matTextSuffix(textSuffix) {\n        if (textSuffix) {\n            this.props.textSuffix = textSuffix;\n        }\n    }\n    set _controls(controls) {\n        this.attachControl(controls.length === 1 ? controls.first : this);\n    }\n    ngOnDestroy() {\n        delete this.formField?._control;\n        this.stateChanges.complete();\n    }\n    setDescribedByIds(_ids) { }\n    onContainerClick(_event) {\n        this.field.focus = true;\n        this.stateChanges.next();\n    }\n    get errorState() {\n        const showError = this.options.showError(this);\n        if (showError !== this._errorState) {\n            this._errorState = showError;\n            this.stateChanges.next();\n        }\n        return showError;\n    }\n    get controlType() {\n        if (this.props.type) {\n            return this.props.type;\n        }\n        const type = this.field.type;\n        return type instanceof Type ? type.prototype.constructor.name : type;\n    }\n    get focused() {\n        return !!this.field.focus && !this.disabled;\n    }\n    get disabled() {\n        return !!this.props.disabled;\n    }\n    get required() {\n        return !!this.props.required;\n    }\n    get placeholder() {\n        return this.props.placeholder || '';\n    }\n    get shouldPlaceholderFloat() {\n        return this.shouldLabelFloat;\n    }\n    get value() {\n        return this.formControl?.value;\n    }\n    set value(value) {\n        this.formControl?.patchValue(value);\n    }\n    get ngControl() {\n        return this.formControl;\n    }\n    get empty() {\n        return this.value == null || this.value === '';\n    }\n    get shouldLabelFloat() {\n        return this.focused || !this.empty;\n    }\n    get formField() {\n        return this.field?.['_formField'];\n    }\n    attachControl(control) {\n        if (this.formField && control !== this.formField._control) {\n            this.formField._control = control;\n            // temporary fix for https://github.com/angular/material2/issues/6728\n            const ngControl = control?.ngControl;\n            if (ngControl?.valueAccessor?.hasOwnProperty('_formField')) {\n                ngControl.valueAccessor['_formField'] = this.formField;\n            }\n            if (ngControl?.valueAccessor?.hasOwnProperty('_parentFormField')) {\n                ngControl.valueAccessor['_parentFormField'] = this.formField;\n            }\n            ['prefix', 'suffix', 'textPrefix', 'textSuffix'].forEach((type) => ɵobserve(this.field, ['props', type], ({ currentValue }) => currentValue &&\n                Promise.resolve().then(() => {\n                    this.options.detectChanges(this.field);\n                })));\n            // https://github.com/angular/components/issues/16209\n            const setDescribedByIds = control.setDescribedByIds.bind(control);\n            control.setDescribedByIds = (ids) => {\n                setTimeout(() => setDescribedByIds(ids));\n            };\n        }\n    }\n}\nFieldType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldType, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nFieldType.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FieldType, viewQueries: [{ propertyName: \"matPrefix\", first: true, predicate: [\"matPrefix\"], descendants: true }, { propertyName: \"matTextPrefix\", first: true, predicate: [\"matTextPrefix\"], descendants: true }, { propertyName: \"matSuffix\", first: true, predicate: [\"matSuffix\"], descendants: true }, { propertyName: \"matTextSuffix\", first: true, predicate: [\"matTextSuffix\"], descendants: true }, { propertyName: \"_controls\", predicate: MatFormFieldControl, descendants: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldType, decorators: [{\n            type: Directive\n        }], propDecorators: { matPrefix: [{\n                type: ViewChild,\n                args: ['matPrefix']\n            }], matTextPrefix: [{\n                type: ViewChild,\n                args: ['matTextPrefix']\n            }], matSuffix: [{\n                type: ViewChild,\n                args: ['matSuffix']\n            }], matTextSuffix: [{\n                type: ViewChild,\n                args: ['matTextSuffix']\n            }], _controls: [{\n                type: ViewChildren,\n                args: [MatFormFieldControl]\n            }] } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FieldType, FormlyMatFormFieldModule };\n//# sourceMappingURL=ngx-formly-material-form-field.mjs.map\n"]},"metadata":{},"sourceType":"module"}