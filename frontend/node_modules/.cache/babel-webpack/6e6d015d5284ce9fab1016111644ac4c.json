{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport * as i5 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport * as i4 from '@ngx-formly/core';\nimport { ɵobserve, FormlyModule } from '@ngx-formly/core';\nimport * as i6 from '@ngx-formly/core/select';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport * as i2 from '@angular/material/select';\nimport { MatSelect, MatSelectModule } from '@angular/material/select';\nimport * as i1 from '@angular/material/core';\nimport { MatPseudoCheckboxModule } from '@angular/material/core';\n\nfunction FormlyFieldSelect_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-option\", 3);\n    i0.ɵɵlistener(\"click\", function FormlyFieldSelect_ng_template_0_Template_mat_option_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const selectOptions_r3 = restoredCtx.selectOptions;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.toggleSelectAll(selectOptions_r3);\n    });\n    i0.ɵɵelement(1, \"mat-pseudo-checkbox\", 4);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const selectOptions_r3 = ctx.selectOptions;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"state\", ctx_r1.getSelectAllState(selectOptions_r3));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.props.selectAllOption, \" \");\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    selectOptions: a0\n  };\n};\n\nfunction FormlyFieldSelect_ng_container_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 7);\n  }\n\n  if (rf & 2) {\n    const selectOptions_r6 = i0.ɵɵnextContext().ngIf;\n    i0.ɵɵnextContext();\n\n    const _r0 = i0.ɵɵreference(1);\n\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r0)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c0, selectOptions_r6));\n  }\n}\n\nfunction FormlyFieldSelect_ng_container_3_ng_container_2_mat_optgroup_1_mat_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const child_r14 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", child_r14.value)(\"disabled\", child_r14.disabled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", child_r14.label, \" \");\n  }\n}\n\nfunction FormlyFieldSelect_ng_container_3_ng_container_2_mat_optgroup_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-optgroup\", 10);\n    i0.ɵɵtemplate(1, FormlyFieldSelect_ng_container_3_ng_container_2_mat_optgroup_1_mat_option_1_Template, 2, 3, \"mat-option\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r10 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"label\", item_r10.label);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", item_r10.group);\n  }\n}\n\nfunction FormlyFieldSelect_ng_container_3_ng_container_2_mat_option_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r10 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"value\", item_r10.value)(\"disabled\", item_r10.disabled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r10.label);\n  }\n}\n\nfunction FormlyFieldSelect_ng_container_3_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, FormlyFieldSelect_ng_container_3_ng_container_2_mat_optgroup_1_Template, 2, 2, \"mat-optgroup\", 8);\n    i0.ɵɵtemplate(2, FormlyFieldSelect_ng_container_3_ng_container_2_mat_option_2_Template, 2, 3, \"mat-option\", 9);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const item_r10 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r10.group);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !item_r10.group);\n  }\n}\n\nfunction FormlyFieldSelect_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, FormlyFieldSelect_ng_container_3_ng_container_1_Template, 1, 4, \"ng-container\", 5);\n    i0.ɵɵtemplate(2, FormlyFieldSelect_ng_container_3_ng_container_2_Template, 3, 2, \"ng-container\", 6);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const selectOptions_r6 = ctx.ngIf;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.props.multiple && ctx_r2.props.selectAllOption);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", selectOptions_r6);\n  }\n}\n\nclass FormlyFieldSelect extends FieldType {\n  constructor() {\n    super(...arguments);\n    this.defaultOptions = {\n      props: {\n        compareWith(o1, o2) {\n          return o1 === o2;\n        }\n\n      }\n    };\n  }\n\n  set select(select) {\n    ɵobserve(select, ['_parentFormField', '_textField'], ({\n      currentValue\n    }) => {\n      if (currentValue) {\n        select._preferredOverlayOrigin = select._parentFormField.getConnectedOverlayOrigin();\n      }\n    });\n  }\n\n  getSelectAllState(options) {\n    if (this.empty || this.value.length === 0) {\n      return null;\n    }\n\n    return this.value.length !== this.getSelectAllValue(options).length ? 'indeterminate' : 'checked';\n  }\n\n  toggleSelectAll(options) {\n    const selectAllValue = this.getSelectAllValue(options);\n    this.formControl.setValue(!this.value || this.value.length !== selectAllValue.length ? selectAllValue : []);\n    this.formControl.markAsDirty();\n  }\n\n  change($event) {\n    this.props.change?.(this.field, $event);\n  }\n\n  _getAriaLabelledby() {\n    if (this.props.attributes?.['aria-labelledby']) {\n      return this.props.attributes['aria-labelledby'];\n    }\n\n    return this.formField?._labelId;\n  }\n\n  _getAriaLabel() {\n    return this.props.attributes?.['aria-label'];\n  }\n\n  getSelectAllValue(options) {\n    if (!this.selectAllValue || options !== this.selectAllValue.options) {\n      const flatOptions = [];\n      options.forEach(o => o.group ? flatOptions.push(...o.group) : flatOptions.push(o));\n      this.selectAllValue = {\n        options,\n        value: flatOptions.filter(o => !o.disabled).map(o => o.value)\n      };\n    }\n\n    return this.selectAllValue.value;\n  }\n\n}\n\nFormlyFieldSelect.ɵfac = /* @__PURE__ */function () {\n  let ɵFormlyFieldSelect_BaseFactory;\n  return function FormlyFieldSelect_Factory(t) {\n    return (ɵFormlyFieldSelect_BaseFactory || (ɵFormlyFieldSelect_BaseFactory = i0.ɵɵgetInheritedFactory(FormlyFieldSelect)))(t || FormlyFieldSelect);\n  };\n}();\n\nFormlyFieldSelect.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: FormlyFieldSelect,\n  selectors: [[\"formly-field-mat-select\"]],\n  viewQuery: function FormlyFieldSelect_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(MatSelect, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.select = _t.first);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 19,\n  consts: [[\"selectAll\", \"\"], [3, \"id\", \"formControl\", \"formlyAttributes\", \"placeholder\", \"tabIndex\", \"required\", \"compareWith\", \"multiple\", \"errorStateMatcher\", \"aria-label\", \"aria-labelledby\", \"disableOptionCentering\", \"typeaheadDebounceInterval\", \"selectionChange\"], [4, \"ngIf\"], [3, \"click\"], [1, \"mat-option-pseudo-checkbox\", 3, \"state\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"label\", 4, \"ngIf\"], [3, \"value\", \"disabled\", 4, \"ngIf\"], [3, \"label\"], [3, \"value\", \"disabled\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\", \"disabled\"]],\n  template: function FormlyFieldSelect_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, FormlyFieldSelect_ng_template_0_Template, 3, 2, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementStart(2, \"mat-select\", 1);\n      i0.ɵɵlistener(\"selectionChange\", function FormlyFieldSelect_Template_mat_select_selectionChange_2_listener($event) {\n        return ctx.change($event);\n      });\n      i0.ɵɵtemplate(3, FormlyFieldSelect_ng_container_3_Template, 3, 2, \"ng-container\", 2);\n      i0.ɵɵpipe(4, \"async\");\n      i0.ɵɵpipe(5, \"formlySelectOptions\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"id\", ctx.id)(\"formControl\", ctx.formControl)(\"formlyAttributes\", ctx.field)(\"placeholder\", ctx.props.placeholder)(\"tabIndex\", ctx.props.tabindex)(\"required\", ctx.required)(\"compareWith\", ctx.props.compareWith)(\"multiple\", ctx.props.multiple)(\"errorStateMatcher\", ctx.errorStateMatcher)(\"aria-label\", ctx._getAriaLabel())(\"aria-labelledby\", ctx._getAriaLabelledby())(\"disableOptionCentering\", ctx.props.disableOptionCentering)(\"typeaheadDebounceInterval\", ctx.props.typeaheadDebounceInterval);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(4, 14, i0.ɵɵpipeBind2(5, 16, ctx.props.options, ctx.field)));\n    }\n  },\n  directives: [i2.MatSelect, i3.NgControlStatus, i3.FormControlDirective, i4.ɵFormlyAttributes, i3.RequiredValidator, i5.NgIf, i1.MatOption, i1.MatPseudoCheckbox, i5.NgForOf, i5.NgTemplateOutlet, i1.MatOptgroup],\n  pipes: [i5.AsyncPipe, i6.FormlySelectOptionsPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyFieldSelect, [{\n    type: Component,\n    args: [{\n      selector: 'formly-field-mat-select',\n      template: `\n    <ng-template #selectAll let-selectOptions=\"selectOptions\">\n      <mat-option (click)=\"toggleSelectAll(selectOptions)\">\n        <mat-pseudo-checkbox class=\"mat-option-pseudo-checkbox\" [state]=\"getSelectAllState(selectOptions)\">\n        </mat-pseudo-checkbox>\n        {{ props.selectAllOption }}\n      </mat-option>\n    </ng-template>\n\n    <mat-select\n      [id]=\"id\"\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      [placeholder]=\"props.placeholder\"\n      [tabIndex]=\"props.tabindex\"\n      [required]=\"required\"\n      [compareWith]=\"props.compareWith\"\n      [multiple]=\"props.multiple\"\n      (selectionChange)=\"change($event)\"\n      [errorStateMatcher]=\"errorStateMatcher\"\n      [aria-label]=\"_getAriaLabel()\"\n      [aria-labelledby]=\"_getAriaLabelledby()\"\n      [disableOptionCentering]=\"props.disableOptionCentering\"\n      [typeaheadDebounceInterval]=\"props.typeaheadDebounceInterval\"\n    >\n      <ng-container *ngIf=\"props.options | formlySelectOptions : field | async as selectOptions\">\n        <ng-container\n          *ngIf=\"props.multiple && props.selectAllOption\"\n          [ngTemplateOutlet]=\"selectAll\"\n          [ngTemplateOutletContext]=\"{ selectOptions: selectOptions }\"\n        >\n        </ng-container>\n        <ng-container *ngFor=\"let item of selectOptions\">\n          <mat-optgroup *ngIf=\"item.group\" [label]=\"item.label\">\n            <mat-option *ngFor=\"let child of item.group\" [value]=\"child.value\" [disabled]=\"child.disabled\">\n              {{ child.label }}\n            </mat-option>\n          </mat-optgroup>\n          <mat-option *ngIf=\"!item.group\" [value]=\"item.value\" [disabled]=\"item.disabled\">{{ item.label }}</mat-option>\n        </ng-container>\n      </ng-container>\n    </mat-select>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    select: [{\n      type: ViewChild,\n      args: [MatSelect, {\n        static: true\n      }]\n    }]\n  });\n})();\n\nclass FormlyMatSelectModule {}\n\nFormlyMatSelectModule.ɵfac = function FormlyMatSelectModule_Factory(t) {\n  return new (t || FormlyMatSelectModule)();\n};\n\nFormlyMatSelectModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: FormlyMatSelectModule\n});\nFormlyMatSelectModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, ReactiveFormsModule, MatSelectModule, MatPseudoCheckboxModule, FormlyMatFormFieldModule, FormlySelectModule, FormlyModule.forChild({\n    types: [{\n      name: 'select',\n      component: FormlyFieldSelect,\n      wrappers: ['form-field']\n    }, {\n      name: 'enum',\n      extends: 'select'\n    }]\n  })]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyMatSelectModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [FormlyFieldSelect],\n      imports: [CommonModule, ReactiveFormsModule, MatSelectModule, MatPseudoCheckboxModule, FormlyMatFormFieldModule, FormlySelectModule, FormlyModule.forChild({\n        types: [{\n          name: 'select',\n          component: FormlyFieldSelect,\n          wrappers: ['form-field']\n        }, {\n          name: 'enum',\n          extends: 'select'\n        }]\n      })]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FormlyFieldSelect, FormlyMatSelectModule }; //# sourceMappingURL=ngx-formly-material-select.mjs.map","map":{"version":3,"sources":["/home/juancamilo/Documentos/Developer/Api WEB/Projecto JYW/JYW/frontend/jyw/node_modules/@ngx-formly/material/fesm2020/ngx-formly-material-select.mjs"],"names":["i0","Component","ChangeDetectionStrategy","ViewChild","NgModule","i5","CommonModule","i3","ReactiveFormsModule","i4","ɵobserve","FormlyModule","i6","FormlySelectModule","FieldType","FormlyMatFormFieldModule","i2","MatSelect","MatSelectModule","i1","MatPseudoCheckboxModule","FormlyFieldSelect","constructor","arguments","defaultOptions","props","compareWith","o1","o2","select","currentValue","_preferredOverlayOrigin","_parentFormField","getConnectedOverlayOrigin","getSelectAllState","options","empty","value","length","getSelectAllValue","toggleSelectAll","selectAllValue","formControl","setValue","markAsDirty","change","$event","field","_getAriaLabelledby","attributes","formField","_labelId","_getAriaLabel","flatOptions","forEach","o","group","push","filter","disabled","map","ɵfac","ɵcmp","NgControlStatus","FormControlDirective","ɵFormlyAttributes","RequiredValidator","NgIf","MatOption","MatPseudoCheckbox","NgForOf","NgTemplateOutlet","MatOptgroup","AsyncPipe","FormlySelectOptionsPipe","type","args","selector","template","changeDetection","OnPush","static","FormlyMatSelectModule","ɵmod","ɵinj","forChild","types","name","component","wrappers","extends","declarations","imports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport * as i5 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport * as i4 from '@ngx-formly/core';\nimport { ɵobserve, FormlyModule } from '@ngx-formly/core';\nimport * as i6 from '@ngx-formly/core/select';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport * as i2 from '@angular/material/select';\nimport { MatSelect, MatSelectModule } from '@angular/material/select';\nimport * as i1 from '@angular/material/core';\nimport { MatPseudoCheckboxModule } from '@angular/material/core';\n\nclass FormlyFieldSelect extends FieldType {\n    constructor() {\n        super(...arguments);\n        this.defaultOptions = {\n            props: {\n                compareWith(o1, o2) {\n                    return o1 === o2;\n                },\n            },\n        };\n    }\n    set select(select) {\n        ɵobserve(select, ['_parentFormField', '_textField'], ({ currentValue }) => {\n            if (currentValue) {\n                select._preferredOverlayOrigin = select._parentFormField.getConnectedOverlayOrigin();\n            }\n        });\n    }\n    getSelectAllState(options) {\n        if (this.empty || this.value.length === 0) {\n            return null;\n        }\n        return this.value.length !== this.getSelectAllValue(options).length ? 'indeterminate' : 'checked';\n    }\n    toggleSelectAll(options) {\n        const selectAllValue = this.getSelectAllValue(options);\n        this.formControl.setValue(!this.value || this.value.length !== selectAllValue.length ? selectAllValue : []);\n        this.formControl.markAsDirty();\n    }\n    change($event) {\n        this.props.change?.(this.field, $event);\n    }\n    _getAriaLabelledby() {\n        if (this.props.attributes?.['aria-labelledby']) {\n            return this.props.attributes['aria-labelledby'];\n        }\n        return this.formField?._labelId;\n    }\n    _getAriaLabel() {\n        return this.props.attributes?.['aria-label'];\n    }\n    getSelectAllValue(options) {\n        if (!this.selectAllValue || options !== this.selectAllValue.options) {\n            const flatOptions = [];\n            options.forEach((o) => (o.group ? flatOptions.push(...o.group) : flatOptions.push(o)));\n            this.selectAllValue = {\n                options,\n                value: flatOptions.filter((o) => !o.disabled).map((o) => o.value),\n            };\n        }\n        return this.selectAllValue.value;\n    }\n}\nFormlyFieldSelect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldSelect, deps: null, target: i0.ɵɵFactoryTarget.Component });\nFormlyFieldSelect.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyFieldSelect, selector: \"formly-field-mat-select\", viewQueries: [{ propertyName: \"select\", first: true, predicate: MatSelect, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: `\n    <ng-template #selectAll let-selectOptions=\"selectOptions\">\n      <mat-option (click)=\"toggleSelectAll(selectOptions)\">\n        <mat-pseudo-checkbox class=\"mat-option-pseudo-checkbox\" [state]=\"getSelectAllState(selectOptions)\">\n        </mat-pseudo-checkbox>\n        {{ props.selectAllOption }}\n      </mat-option>\n    </ng-template>\n\n    <mat-select\n      [id]=\"id\"\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      [placeholder]=\"props.placeholder\"\n      [tabIndex]=\"props.tabindex\"\n      [required]=\"required\"\n      [compareWith]=\"props.compareWith\"\n      [multiple]=\"props.multiple\"\n      (selectionChange)=\"change($event)\"\n      [errorStateMatcher]=\"errorStateMatcher\"\n      [aria-label]=\"_getAriaLabel()\"\n      [aria-labelledby]=\"_getAriaLabelledby()\"\n      [disableOptionCentering]=\"props.disableOptionCentering\"\n      [typeaheadDebounceInterval]=\"props.typeaheadDebounceInterval\"\n    >\n      <ng-container *ngIf=\"props.options | formlySelectOptions : field | async as selectOptions\">\n        <ng-container\n          *ngIf=\"props.multiple && props.selectAllOption\"\n          [ngTemplateOutlet]=\"selectAll\"\n          [ngTemplateOutletContext]=\"{ selectOptions: selectOptions }\"\n        >\n        </ng-container>\n        <ng-container *ngFor=\"let item of selectOptions\">\n          <mat-optgroup *ngIf=\"item.group\" [label]=\"item.label\">\n            <mat-option *ngFor=\"let child of item.group\" [value]=\"child.value\" [disabled]=\"child.disabled\">\n              {{ child.label }}\n            </mat-option>\n          </mat-optgroup>\n          <mat-option *ngIf=\"!item.group\" [value]=\"item.value\" [disabled]=\"item.disabled\">{{ item.label }}</mat-option>\n        </ng-container>\n      </ng-container>\n    </mat-select>\n  `, isInline: true, components: [{ type: i1.MatOption, selector: \"mat-option\", exportAs: [\"matOption\"] }, { type: i1.MatPseudoCheckbox, selector: \"mat-pseudo-checkbox\", inputs: [\"state\", \"disabled\"] }, { type: i2.MatSelect, selector: \"mat-select\", inputs: [\"disabled\", \"disableRipple\", \"tabIndex\"], exportAs: [\"matSelect\"] }, { type: i1.MatOptgroup, selector: \"mat-optgroup\", inputs: [\"disabled\"], exportAs: [\"matOptgroup\"] }], directives: [{ type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i3.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }, { type: i4.ɵFormlyAttributes, selector: \"[formlyAttributes]\", inputs: [\"formlyAttributes\", \"id\"] }, { type: i3.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i5.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }, { type: i5.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], pipes: { \"async\": i5.AsyncPipe, \"formlySelectOptions\": i6.FormlySelectOptionsPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldSelect, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-field-mat-select',\n                    template: `\n    <ng-template #selectAll let-selectOptions=\"selectOptions\">\n      <mat-option (click)=\"toggleSelectAll(selectOptions)\">\n        <mat-pseudo-checkbox class=\"mat-option-pseudo-checkbox\" [state]=\"getSelectAllState(selectOptions)\">\n        </mat-pseudo-checkbox>\n        {{ props.selectAllOption }}\n      </mat-option>\n    </ng-template>\n\n    <mat-select\n      [id]=\"id\"\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      [placeholder]=\"props.placeholder\"\n      [tabIndex]=\"props.tabindex\"\n      [required]=\"required\"\n      [compareWith]=\"props.compareWith\"\n      [multiple]=\"props.multiple\"\n      (selectionChange)=\"change($event)\"\n      [errorStateMatcher]=\"errorStateMatcher\"\n      [aria-label]=\"_getAriaLabel()\"\n      [aria-labelledby]=\"_getAriaLabelledby()\"\n      [disableOptionCentering]=\"props.disableOptionCentering\"\n      [typeaheadDebounceInterval]=\"props.typeaheadDebounceInterval\"\n    >\n      <ng-container *ngIf=\"props.options | formlySelectOptions : field | async as selectOptions\">\n        <ng-container\n          *ngIf=\"props.multiple && props.selectAllOption\"\n          [ngTemplateOutlet]=\"selectAll\"\n          [ngTemplateOutletContext]=\"{ selectOptions: selectOptions }\"\n        >\n        </ng-container>\n        <ng-container *ngFor=\"let item of selectOptions\">\n          <mat-optgroup *ngIf=\"item.group\" [label]=\"item.label\">\n            <mat-option *ngFor=\"let child of item.group\" [value]=\"child.value\" [disabled]=\"child.disabled\">\n              {{ child.label }}\n            </mat-option>\n          </mat-optgroup>\n          <mat-option *ngIf=\"!item.group\" [value]=\"item.value\" [disabled]=\"item.disabled\">{{ item.label }}</mat-option>\n        </ng-container>\n      </ng-container>\n    </mat-select>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], propDecorators: { select: [{\n                type: ViewChild,\n                args: [MatSelect, { static: true }]\n            }] } });\n\nclass FormlyMatSelectModule {\n}\nFormlyMatSelectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nFormlyMatSelectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatSelectModule, declarations: [FormlyFieldSelect], imports: [CommonModule,\n        ReactiveFormsModule,\n        MatSelectModule,\n        MatPseudoCheckboxModule,\n        FormlyMatFormFieldModule,\n        FormlySelectModule, i4.FormlyModule] });\nFormlyMatSelectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatSelectModule, imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            MatSelectModule,\n            MatPseudoCheckboxModule,\n            FormlyMatFormFieldModule,\n            FormlySelectModule,\n            FormlyModule.forChild({\n                types: [\n                    {\n                        name: 'select',\n                        component: FormlyFieldSelect,\n                        wrappers: ['form-field'],\n                    },\n                    { name: 'enum', extends: 'select' },\n                ],\n            }),\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [FormlyFieldSelect],\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        MatSelectModule,\n                        MatPseudoCheckboxModule,\n                        FormlyMatFormFieldModule,\n                        FormlySelectModule,\n                        FormlyModule.forChild({\n                            types: [\n                                {\n                                    name: 'select',\n                                    component: FormlyFieldSelect,\n                                    wrappers: ['form-field'],\n                                },\n                                { name: 'enum', extends: 'select' },\n                            ],\n                        }),\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FormlyFieldSelect, FormlyMatSelectModule };\n//# sourceMappingURL=ngx-formly-material-select.mjs.map\n"]},"metadata":{},"sourceType":"module"}