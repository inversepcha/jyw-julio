{"ast":null,"code":"import { HttpEventType } from \"@angular/common/http\";\nimport { distinctUntilChanged, scan } from \"rxjs/operators\";\n\nfunction isHttpResponse(event) {\n  return event.type === HttpEventType.Response;\n}\n\nfunction isHttpProgressEvent(event) {\n  return event.type === HttpEventType.DownloadProgress || event.type === HttpEventType.UploadProgress;\n}\n\nexport function download(saver) {\n  return source => source.pipe(scan((download, event) => {\n    if (isHttpProgressEvent(event)) {\n      return {\n        progress: event.total ? Math.round(100 * event.loaded / event.total) : download.progress,\n        state: \"EN_PROGRESO\",\n        content: null\n      };\n    }\n\n    if (isHttpResponse(event)) {\n      if (saver) {\n        saver(event.body);\n      }\n\n      return {\n        progress: 100,\n        state: \"HECHO\",\n        content: event.body\n      };\n    }\n\n    return download;\n  }, {\n    state: \"PENDIENTE\",\n    progress: 0,\n    content: null\n  }), distinctUntilChanged((a, b) => a.state === b.state && a.progress === b.progress && a.content === b.content));\n}","map":null,"metadata":{},"sourceType":"module"}