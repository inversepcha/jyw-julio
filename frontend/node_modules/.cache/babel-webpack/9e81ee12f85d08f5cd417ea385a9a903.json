{"ast":null,"code":"import _asyncToGenerator from \"/home/juancamilo/Documentos/Developer/Api WEB/Projecto JYW/JYW/frontend/jyw/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Swal from 'sweetalert2';\nimport { environment } from \"../../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/report-designer/report-designer.service\";\nimport * as i2 from \"../../service/preguntas/preguntas.service\";\nimport * as i3 from \"@angular/router\";\nconst _c0 = [\"contenido\"];\nexport class GenratePdfComponent {\n  constructor(_reportDesignerService, _preguntasService, _activatedRoute) {\n    this._reportDesignerService = _reportDesignerService;\n    this._preguntasService = _preguntasService;\n    this._activatedRoute = _activatedRoute;\n    this.pages = [];\n    this.url = environment.url;\n\n    this._activatedRoute.params.subscribe(params => {\n      this.informe = params['ruta_id'];\n    });\n  }\n\n  ngOnInit() {\n    this.onGetInforme();\n  }\n\n  onGetInforme() {\n    this._preguntasService.getPreguntas(this.informe).subscribe(res => {\n      this.encabezado = res.body.encabezado;\n      console.log(this.encabezado);\n      this.onGetPages();\n    }, error => {\n      var errorMessage = error;\n\n      if (errorMessage != null) {\n        var body = error.error;\n\n        if (error.status == 500) {\n          const Toast = Swal.mixin({\n            toast: true,\n            position: 'center',\n            showConfirmButton: false,\n            timer: 4000,\n            timerProgressBar: true,\n            width: '300px'\n          });\n          Toast.fire({\n            icon: 'error',\n            title: body.body.message\n          });\n        } else if (error.status == 0) {\n          const Toast = Swal.mixin({\n            toast: true,\n            position: 'center',\n            showConfirmButton: false,\n            timer: 4000,\n            timerProgressBar: true,\n            width: '300px'\n          });\n          Toast.fire({\n            icon: 'error',\n            title: 'Por favor compruebe su conexión de internet'\n          });\n        }\n      }\n    });\n  }\n\n  onGetPages() {\n    this._reportDesignerService.getPages(this.informe).subscribe(res => {\n      this.pages = res.body;\n      this.generarPDF();\n    }, error => {\n      var errorMessage = error;\n\n      if (errorMessage != null) {\n        var body = error.error;\n\n        if (error.status == 500) {\n          const Toast = Swal.mixin({\n            toast: true,\n            position: 'center',\n            showConfirmButton: false,\n            timer: 4000,\n            timerProgressBar: true,\n            width: '300px'\n          });\n          Toast.fire({\n            icon: 'error',\n            title: body.body.message\n          });\n        } else if (error.status == 0) {\n          const Toast = Swal.mixin({\n            toast: true,\n            position: 'center',\n            showConfirmButton: false,\n            timer: 4000,\n            timerProgressBar: true,\n            width: '300px'\n          });\n          Toast.fire({\n            icon: 'error',\n            title: 'Por favor compruebe su conexión de internet'\n          });\n        }\n      }\n    });\n  }\n\n  generarPDF() {\n    return _asyncToGenerator(function* () {})();\n  }\n\n}\n\nGenratePdfComponent.ɵfac = function GenratePdfComponent_Factory(t) {\n  return new (t || GenratePdfComponent)(i0.ɵɵdirectiveInject(i1.ReportDesignerService), i0.ɵɵdirectiveInject(i2.PreguntasService), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n};\n\nGenratePdfComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GenratePdfComponent,\n  selectors: [[\"app-genrate-pdf\"]],\n  viewQuery: function GenratePdfComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contenidoPdf = _t.first);\n    }\n  },\n  decls: 2,\n  vars: 0,\n  template: function GenratePdfComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"genrate-pdf works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJnZW5yYXRlLXBkZi5jb21wb25lbnQuY3NzIn0= */\"]\n});","map":{"version":3,"sources":["/home/juancamilo/Documentos/Developer/Api WEB/Projecto JYW/JYW/frontend/jyw/src/app/components/genrate-pdf/genrate-pdf.component.ts","/home/juancamilo/Documentos/Developer/Api WEB/Projecto JYW/JYW/frontend/jyw/src/app/components/genrate-pdf/genrate-pdf.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { ActivatedRoute, NavigationEnd } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { environment } from \"../../../environments/environment\";\n\n/* SERVICE */\n\nimport { ReportDesignerService } from \"../../service/report-designer/report-designer.service\"\nimport { PreguntasService } from \"../../service/preguntas/preguntas.service\";\n\n@Component({\n  selector: 'app-genrate-pdf',\n  templateUrl: './genrate-pdf.component.html',\n  styleUrls: ['./genrate-pdf.component.css']\n})\nexport class GenratePdfComponent implements OnInit {\n\n  encabezado: any\n  contenido: any\n\n  @ViewChild('contenido', { static: false }) contenidoPdf!: ElementRef;\n  url: string;\n\n  pages: any[] = []\n  informe: any\n\n  constructor(private _reportDesignerService: ReportDesignerService, private _preguntasService: PreguntasService, private _activatedRoute: ActivatedRoute) {\n    this.url = environment.url;\n    this._activatedRoute.params.subscribe(params => {\n      this.informe = params['ruta_id'];\n\n    })\n  }\n\n  ngOnInit(): void {\n    this.onGetInforme()\n  }\n  onGetInforme() {\n\n    this._preguntasService.getPreguntas(this.informe).subscribe((res: any) => {\n      this.encabezado = res.body.encabezado\n      console.log(this.encabezado)\n      this.onGetPages()\n\n    }, error => {\n      var errorMessage = <any>error;\n      if (errorMessage != null) {\n        var body = error.error\n\n        if (error.status == 500) {\n\n          const Toast = Swal.mixin({\n            toast: true,\n            position: 'center',\n            showConfirmButton: false,\n            timer: 4000,\n            timerProgressBar: true,\n            width: '300px'\n          })\n\n          Toast.fire({\n            icon: 'error',\n            title: body.body.message\n\n          })\n\n        } else if (error.status == 0) {\n          const Toast = Swal.mixin({\n            toast: true,\n            position: 'center',\n            showConfirmButton: false,\n            timer: 4000,\n            timerProgressBar: true,\n            width: '300px'\n          })\n\n          Toast.fire({\n            icon: 'error',\n            title: 'Por favor compruebe su conexión de internet'\n\n          })\n        }\n      }\n    })\n\n  }\n\n  onGetPages() {\n\n    this._reportDesignerService.getPages(this.informe).subscribe((res: any) => {\n      this.pages = res.body;\n     this.generarPDF()\n\n    }, error => {\n      var errorMessage = <any>error;\n      if (errorMessage != null) {\n        var body = error.error\n\n        if (error.status == 500) {\n\n          const Toast = Swal.mixin({\n            toast: true,\n            position: 'center',\n            showConfirmButton: false,\n            timer: 4000,\n            timerProgressBar: true,\n            width: '300px'\n          })\n\n          Toast.fire({\n            icon: 'error',\n            title: body.body.message\n\n          })\n\n        } else if (error.status == 0) {\n          const Toast = Swal.mixin({\n            toast: true,\n            position: 'center',\n            showConfirmButton: false,\n            timer: 4000,\n            timerProgressBar: true,\n            width: '300px'\n          })\n\n          Toast.fire({\n            icon: 'error',\n            title: 'Por favor compruebe su conexión de internet'\n\n          })\n        }\n      }\n    })\n\n  }\n\n  async generarPDF() {\n\n  }\n}\n","<p>genrate-pdf works!</p>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}