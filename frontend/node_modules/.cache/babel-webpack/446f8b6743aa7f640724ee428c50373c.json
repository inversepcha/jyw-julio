{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as i4 from '@ngx-formly/core';\nimport { FormlyModule } from '@ngx-formly/core';\nimport * as i2 from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport * as i1 from '@angular/material/input';\nimport { MAT_INPUT_VALUE_ACCESSOR, MatInputModule } from '@angular/material/input';\nimport * as i3 from '@angular/cdk/text-field';\n\nclass FormlyFieldTextArea extends FieldType {\n  constructor() {\n    super(...arguments);\n    this.defaultOptions = {\n      props: {\n        cols: 1,\n        rows: 1\n      }\n    };\n  }\n\n}\n\nFormlyFieldTextArea.ɵfac = /* @__PURE__ */function () {\n  let ɵFormlyFieldTextArea_BaseFactory;\n  return function FormlyFieldTextArea_Factory(t) {\n    return (ɵFormlyFieldTextArea_BaseFactory || (ɵFormlyFieldTextArea_BaseFactory = i0.ɵɵgetInheritedFactory(FormlyFieldTextArea)))(t || FormlyFieldTextArea);\n  };\n}();\n\nFormlyFieldTextArea.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: FormlyFieldTextArea,\n  selectors: [[\"formly-field-mat-textarea\"]],\n  features: [i0.ɵɵProvidersFeature([// fix for https://github.com/ngx-formly/ngx-formly/issues/1688\n  // rely on formControl value instead of elementRef which return empty value in Firefox.\n  {\n    provide: MAT_INPUT_VALUE_ACCESSOR,\n    useExisting: FormlyFieldTextArea\n  }]), i0.ɵɵInheritDefinitionFeature],\n  decls: 2,\n  vars: 15,\n  consts: [[\"matInput\", \"\", 3, \"id\", \"readonly\", \"required\", \"formControl\", \"errorStateMatcher\", \"cols\", \"rows\", \"formlyAttributes\", \"placeholder\", \"tabindex\", \"cdkTextareaAutosize\", \"cdkAutosizeMinRows\", \"cdkAutosizeMaxRows\"]],\n  template: function FormlyFieldTextArea_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"textarea\", 0);\n      i0.ɵɵtext(1, \"    \");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"cdk-textarea-autosize\", ctx.props.autosize);\n      i0.ɵɵproperty(\"id\", ctx.id)(\"readonly\", ctx.props.readonly)(\"required\", ctx.required)(\"formControl\", ctx.formControl)(\"errorStateMatcher\", ctx.errorStateMatcher)(\"cols\", ctx.props.cols)(\"rows\", ctx.props.rows)(\"formlyAttributes\", ctx.field)(\"placeholder\", ctx.props.placeholder)(\"tabindex\", ctx.props.tabindex)(\"cdkTextareaAutosize\", ctx.props.autosize)(\"cdkAutosizeMinRows\", ctx.props.autosizeMinRows)(\"cdkAutosizeMaxRows\", ctx.props.autosizeMaxRows);\n    }\n  },\n  directives: [i1.MatInput, i2.DefaultValueAccessor, i3.CdkTextareaAutosize, i2.RequiredValidator, i2.NgControlStatus, i2.FormControlDirective, i4.ɵFormlyAttributes],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyFieldTextArea, [{\n    type: Component,\n    args: [{\n      selector: 'formly-field-mat-textarea',\n      template: `\n    <textarea\n      matInput\n      [id]=\"id\"\n      [readonly]=\"props.readonly\"\n      [required]=\"required\"\n      [formControl]=\"formControl\"\n      [errorStateMatcher]=\"errorStateMatcher\"\n      [cols]=\"props.cols\"\n      [rows]=\"props.rows\"\n      [formlyAttributes]=\"field\"\n      [placeholder]=\"props.placeholder\"\n      [tabindex]=\"props.tabindex\"\n      [cdkTextareaAutosize]=\"props.autosize\"\n      [cdkAutosizeMinRows]=\"props.autosizeMinRows\"\n      [cdkAutosizeMaxRows]=\"props.autosizeMaxRows\"\n      [class.cdk-textarea-autosize]=\"props.autosize\"\n    >\n    </textarea>\n  `,\n      providers: [// fix for https://github.com/ngx-formly/ngx-formly/issues/1688\n      // rely on formControl value instead of elementRef which return empty value in Firefox.\n      {\n        provide: MAT_INPUT_VALUE_ACCESSOR,\n        useExisting: FormlyFieldTextArea\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, null);\n})();\n\nclass FormlyMatTextAreaModule {}\n\nFormlyMatTextAreaModule.ɵfac = function FormlyMatTextAreaModule_Factory(t) {\n  return new (t || FormlyMatTextAreaModule)();\n};\n\nFormlyMatTextAreaModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: FormlyMatTextAreaModule\n});\nFormlyMatTextAreaModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, ReactiveFormsModule, MatInputModule, FormlyMatFormFieldModule, FormlyModule.forChild({\n    types: [{\n      name: 'textarea',\n      component: FormlyFieldTextArea,\n      wrappers: ['form-field']\n    }]\n  })]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyMatTextAreaModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [FormlyFieldTextArea],\n      imports: [CommonModule, ReactiveFormsModule, MatInputModule, FormlyMatFormFieldModule, FormlyModule.forChild({\n        types: [{\n          name: 'textarea',\n          component: FormlyFieldTextArea,\n          wrappers: ['form-field']\n        }]\n      })]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FormlyFieldTextArea, FormlyMatTextAreaModule }; //# sourceMappingURL=ngx-formly-material-textarea.mjs.map","map":{"version":3,"sources":["/home/juancamilo/Documentos/Developer/Api WEB/Projecto JYW/JYW/frontend/jyw/node_modules/@ngx-formly/material/fesm2020/ngx-formly-material-textarea.mjs"],"names":["i0","Component","ChangeDetectionStrategy","NgModule","CommonModule","i4","FormlyModule","i2","ReactiveFormsModule","FieldType","FormlyMatFormFieldModule","i1","MAT_INPUT_VALUE_ACCESSOR","MatInputModule","i3","FormlyFieldTextArea","constructor","arguments","defaultOptions","props","cols","rows","ɵfac","ɵcmp","provide","useExisting","MatInput","DefaultValueAccessor","CdkTextareaAutosize","RequiredValidator","NgControlStatus","FormControlDirective","ɵFormlyAttributes","type","args","selector","template","providers","changeDetection","OnPush","FormlyMatTextAreaModule","ɵmod","ɵinj","forChild","types","name","component","wrappers","declarations","imports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as i4 from '@ngx-formly/core';\nimport { FormlyModule } from '@ngx-formly/core';\nimport * as i2 from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport * as i1 from '@angular/material/input';\nimport { MAT_INPUT_VALUE_ACCESSOR, MatInputModule } from '@angular/material/input';\nimport * as i3 from '@angular/cdk/text-field';\n\nclass FormlyFieldTextArea extends FieldType {\n    constructor() {\n        super(...arguments);\n        this.defaultOptions = {\n            props: {\n                cols: 1,\n                rows: 1,\n            },\n        };\n    }\n}\nFormlyFieldTextArea.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTextArea, deps: null, target: i0.ɵɵFactoryTarget.Component });\nFormlyFieldTextArea.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyFieldTextArea, selector: \"formly-field-mat-textarea\", providers: [\n        // fix for https://github.com/ngx-formly/ngx-formly/issues/1688\n        // rely on formControl value instead of elementRef which return empty value in Firefox.\n        { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: FormlyFieldTextArea },\n    ], usesInheritance: true, ngImport: i0, template: `\n    <textarea\n      matInput\n      [id]=\"id\"\n      [readonly]=\"props.readonly\"\n      [required]=\"required\"\n      [formControl]=\"formControl\"\n      [errorStateMatcher]=\"errorStateMatcher\"\n      [cols]=\"props.cols\"\n      [rows]=\"props.rows\"\n      [formlyAttributes]=\"field\"\n      [placeholder]=\"props.placeholder\"\n      [tabindex]=\"props.tabindex\"\n      [cdkTextareaAutosize]=\"props.autosize\"\n      [cdkAutosizeMinRows]=\"props.autosizeMinRows\"\n      [cdkAutosizeMaxRows]=\"props.autosizeMaxRows\"\n      [class.cdk-textarea-autosize]=\"props.autosize\"\n    >\n    </textarea>\n  `, isInline: true, directives: [{ type: i1.MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\", inputs: [\"disabled\", \"id\", \"placeholder\", \"name\", \"required\", \"type\", \"errorStateMatcher\", \"aria-describedby\", \"value\", \"readonly\"], exportAs: [\"matInput\"] }, { type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i3.CdkTextareaAutosize, selector: \"textarea[cdkTextareaAutosize]\", inputs: [\"cdkAutosizeMinRows\", \"cdkAutosizeMaxRows\", \"cdkTextareaAutosize\", \"placeholder\"], exportAs: [\"cdkTextareaAutosize\"] }, { type: i2.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i2.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }, { type: i4.ɵFormlyAttributes, selector: \"[formlyAttributes]\", inputs: [\"formlyAttributes\", \"id\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTextArea, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-field-mat-textarea',\n                    template: `\n    <textarea\n      matInput\n      [id]=\"id\"\n      [readonly]=\"props.readonly\"\n      [required]=\"required\"\n      [formControl]=\"formControl\"\n      [errorStateMatcher]=\"errorStateMatcher\"\n      [cols]=\"props.cols\"\n      [rows]=\"props.rows\"\n      [formlyAttributes]=\"field\"\n      [placeholder]=\"props.placeholder\"\n      [tabindex]=\"props.tabindex\"\n      [cdkTextareaAutosize]=\"props.autosize\"\n      [cdkAutosizeMinRows]=\"props.autosizeMinRows\"\n      [cdkAutosizeMaxRows]=\"props.autosizeMaxRows\"\n      [class.cdk-textarea-autosize]=\"props.autosize\"\n    >\n    </textarea>\n  `,\n                    providers: [\n                        // fix for https://github.com/ngx-formly/ngx-formly/issues/1688\n                        // rely on formControl value instead of elementRef which return empty value in Firefox.\n                        { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: FormlyFieldTextArea },\n                    ],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }] });\n\nclass FormlyMatTextAreaModule {\n}\nFormlyMatTextAreaModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatTextAreaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nFormlyMatTextAreaModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatTextAreaModule, declarations: [FormlyFieldTextArea], imports: [CommonModule,\n        ReactiveFormsModule,\n        MatInputModule,\n        FormlyMatFormFieldModule, i4.FormlyModule] });\nFormlyMatTextAreaModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatTextAreaModule, imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            MatInputModule,\n            FormlyMatFormFieldModule,\n            FormlyModule.forChild({\n                types: [\n                    {\n                        name: 'textarea',\n                        component: FormlyFieldTextArea,\n                        wrappers: ['form-field'],\n                    },\n                ],\n            }),\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyMatTextAreaModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [FormlyFieldTextArea],\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        MatInputModule,\n                        FormlyMatFormFieldModule,\n                        FormlyModule.forChild({\n                            types: [\n                                {\n                                    name: 'textarea',\n                                    component: FormlyFieldTextArea,\n                                    wrappers: ['form-field'],\n                                },\n                            ],\n                        }),\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FormlyFieldTextArea, FormlyMatTextAreaModule };\n//# sourceMappingURL=ngx-formly-material-textarea.mjs.map\n"]},"metadata":{},"sourceType":"module"}